
NUCLEO-SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000694  08006d20  08006d20  00016d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073b4  080073b4  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  080073b4  080073b4  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  080073b4  080073b4  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073b4  080073b4  000173b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073b8  080073b8  000173b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080073bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002364  20000024  080073e0  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002388  080073e0  00022388  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b547  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002124  00000000  00000000  0002b594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  0002d6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac8  00000000  00000000  0002e268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f16  00000000  00000000  0002ed30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e6c5  00000000  00000000  00046c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000844a8  00000000  00000000  0005530b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d97b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fc8  00000000  00000000  000d9804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08006d08 	.word	0x08006d08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08006d08 	.word	0x08006d08

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_dmul>:
 800015c:	b570      	push	{r4, r5, r6, lr}
 800015e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000162:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000166:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016a:	bf1d      	ittte	ne
 800016c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000170:	ea94 0f0c 	teqne	r4, ip
 8000174:	ea95 0f0c 	teqne	r5, ip
 8000178:	f000 f8de 	bleq	8000338 <__aeabi_dmul+0x1dc>
 800017c:	442c      	add	r4, r5
 800017e:	ea81 0603 	eor.w	r6, r1, r3
 8000182:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000186:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800018e:	bf18      	it	ne
 8000190:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000194:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000198:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800019c:	d038      	beq.n	8000210 <__aeabi_dmul+0xb4>
 800019e:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a2:	f04f 0500 	mov.w	r5, #0
 80001a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b2:	f04f 0600 	mov.w	r6, #0
 80001b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ba:	f09c 0f00 	teq	ip, #0
 80001be:	bf18      	it	ne
 80001c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d0:	d204      	bcs.n	80001dc <__aeabi_dmul+0x80>
 80001d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001d6:	416d      	adcs	r5, r5
 80001d8:	eb46 0606 	adc.w	r6, r6, r6
 80001dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f4:	bf88      	it	hi
 80001f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fa:	d81e      	bhi.n	800023a <__aeabi_dmul+0xde>
 80001fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000200:	bf08      	it	eq
 8000202:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000206:	f150 0000 	adcs.w	r0, r0, #0
 800020a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800020e:	bd70      	pop	{r4, r5, r6, pc}
 8000210:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000214:	ea46 0101 	orr.w	r1, r6, r1
 8000218:	ea40 0002 	orr.w	r0, r0, r2
 800021c:	ea81 0103 	eor.w	r1, r1, r3
 8000220:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000224:	bfc2      	ittt	gt
 8000226:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800022e:	bd70      	popgt	{r4, r5, r6, pc}
 8000230:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000234:	f04f 0e00 	mov.w	lr, #0
 8000238:	3c01      	subs	r4, #1
 800023a:	f300 80ab 	bgt.w	8000394 <__aeabi_dmul+0x238>
 800023e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000242:	bfde      	ittt	le
 8000244:	2000      	movle	r0, #0
 8000246:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024a:	bd70      	pople	{r4, r5, r6, pc}
 800024c:	f1c4 0400 	rsb	r4, r4, #0
 8000250:	3c20      	subs	r4, #32
 8000252:	da35      	bge.n	80002c0 <__aeabi_dmul+0x164>
 8000254:	340c      	adds	r4, #12
 8000256:	dc1b      	bgt.n	8000290 <__aeabi_dmul+0x134>
 8000258:	f104 0414 	add.w	r4, r4, #20
 800025c:	f1c4 0520 	rsb	r5, r4, #32
 8000260:	fa00 f305 	lsl.w	r3, r0, r5
 8000264:	fa20 f004 	lsr.w	r0, r0, r4
 8000268:	fa01 f205 	lsl.w	r2, r1, r5
 800026c:	ea40 0002 	orr.w	r0, r0, r2
 8000270:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000274:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000278:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800027c:	fa21 f604 	lsr.w	r6, r1, r4
 8000280:	eb42 0106 	adc.w	r1, r2, r6
 8000284:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000288:	bf08      	it	eq
 800028a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800028e:	bd70      	pop	{r4, r5, r6, pc}
 8000290:	f1c4 040c 	rsb	r4, r4, #12
 8000294:	f1c4 0520 	rsb	r5, r4, #32
 8000298:	fa00 f304 	lsl.w	r3, r0, r4
 800029c:	fa20 f005 	lsr.w	r0, r0, r5
 80002a0:	fa01 f204 	lsl.w	r2, r1, r4
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002b8:	bf08      	it	eq
 80002ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002be:	bd70      	pop	{r4, r5, r6, pc}
 80002c0:	f1c4 0520 	rsb	r5, r4, #32
 80002c4:	fa00 f205 	lsl.w	r2, r0, r5
 80002c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80002cc:	fa20 f304 	lsr.w	r3, r0, r4
 80002d0:	fa01 f205 	lsl.w	r2, r1, r5
 80002d4:	ea43 0302 	orr.w	r3, r3, r2
 80002d8:	fa21 f004 	lsr.w	r0, r1, r4
 80002dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e0:	fa21 f204 	lsr.w	r2, r1, r4
 80002e4:	ea20 0002 	bic.w	r0, r0, r2
 80002e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f0:	bf08      	it	eq
 80002f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002f6:	bd70      	pop	{r4, r5, r6, pc}
 80002f8:	f094 0f00 	teq	r4, #0
 80002fc:	d10f      	bne.n	800031e <__aeabi_dmul+0x1c2>
 80002fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000302:	0040      	lsls	r0, r0, #1
 8000304:	eb41 0101 	adc.w	r1, r1, r1
 8000308:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030c:	bf08      	it	eq
 800030e:	3c01      	subeq	r4, #1
 8000310:	d0f7      	beq.n	8000302 <__aeabi_dmul+0x1a6>
 8000312:	ea41 0106 	orr.w	r1, r1, r6
 8000316:	f095 0f00 	teq	r5, #0
 800031a:	bf18      	it	ne
 800031c:	4770      	bxne	lr
 800031e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000322:	0052      	lsls	r2, r2, #1
 8000324:	eb43 0303 	adc.w	r3, r3, r3
 8000328:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800032c:	bf08      	it	eq
 800032e:	3d01      	subeq	r5, #1
 8000330:	d0f7      	beq.n	8000322 <__aeabi_dmul+0x1c6>
 8000332:	ea43 0306 	orr.w	r3, r3, r6
 8000336:	4770      	bx	lr
 8000338:	ea94 0f0c 	teq	r4, ip
 800033c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000340:	bf18      	it	ne
 8000342:	ea95 0f0c 	teqne	r5, ip
 8000346:	d00c      	beq.n	8000362 <__aeabi_dmul+0x206>
 8000348:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800034c:	bf18      	it	ne
 800034e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000352:	d1d1      	bne.n	80002f8 <__aeabi_dmul+0x19c>
 8000354:	ea81 0103 	eor.w	r1, r1, r3
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	f04f 0000 	mov.w	r0, #0
 8000360:	bd70      	pop	{r4, r5, r6, pc}
 8000362:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000366:	bf06      	itte	eq
 8000368:	4610      	moveq	r0, r2
 800036a:	4619      	moveq	r1, r3
 800036c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000370:	d019      	beq.n	80003a6 <__aeabi_dmul+0x24a>
 8000372:	ea94 0f0c 	teq	r4, ip
 8000376:	d102      	bne.n	800037e <__aeabi_dmul+0x222>
 8000378:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800037c:	d113      	bne.n	80003a6 <__aeabi_dmul+0x24a>
 800037e:	ea95 0f0c 	teq	r5, ip
 8000382:	d105      	bne.n	8000390 <__aeabi_dmul+0x234>
 8000384:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000388:	bf1c      	itt	ne
 800038a:	4610      	movne	r0, r2
 800038c:	4619      	movne	r1, r3
 800038e:	d10a      	bne.n	80003a6 <__aeabi_dmul+0x24a>
 8000390:	ea81 0103 	eor.w	r1, r1, r3
 8000394:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000398:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd70      	pop	{r4, r5, r6, pc}
 80003a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003ae:	bd70      	pop	{r4, r5, r6, pc}

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_d2uiz>:
 8000728:	004a      	lsls	r2, r1, #1
 800072a:	d211      	bcs.n	8000750 <__aeabi_d2uiz+0x28>
 800072c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000730:	d211      	bcs.n	8000756 <__aeabi_d2uiz+0x2e>
 8000732:	d50d      	bpl.n	8000750 <__aeabi_d2uiz+0x28>
 8000734:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000738:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800073c:	d40e      	bmi.n	800075c <__aeabi_d2uiz+0x34>
 800073e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000742:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000746:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074a:	fa23 f002 	lsr.w	r0, r3, r2
 800074e:	4770      	bx	lr
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	4770      	bx	lr
 8000756:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800075a:	d102      	bne.n	8000762 <__aeabi_d2uiz+0x3a>
 800075c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000760:	4770      	bx	lr
 8000762:	f04f 0000 	mov.w	r0, #0
 8000766:	4770      	bx	lr

08000768 <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000772:	4802      	ldr	r0, [pc, #8]	; (800077c <SELECT+0x14>)
 8000774:	f001 fb04 	bl	8001d80 <HAL_GPIO_WritePin>
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40011000 	.word	0x40011000

08000780 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800078a:	4802      	ldr	r0, [pc, #8]	; (8000794 <DESELECT+0x14>)
 800078c:	f001 faf8 	bl	8001d80 <HAL_GPIO_WritePin>
}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40011000 	.word	0x40011000

08000798 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80007a2:	bf00      	nop
 80007a4:	4808      	ldr	r0, [pc, #32]	; (80007c8 <SPI_TxByte+0x30>)
 80007a6:	f002 faa1 	bl	8002cec <HAL_SPI_GetState>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d1f9      	bne.n	80007a4 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80007b0:	1df9      	adds	r1, r7, #7
 80007b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b6:	2201      	movs	r2, #1
 80007b8:	4803      	ldr	r0, [pc, #12]	; (80007c8 <SPI_TxByte+0x30>)
 80007ba:	f001 ffb9 	bl	8002730 <HAL_SPI_Transmit>
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000044 	.word	0x20000044

080007cc <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80007d2:	23ff      	movs	r3, #255	; 0xff
 80007d4:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80007da:	bf00      	nop
 80007dc:	4809      	ldr	r0, [pc, #36]	; (8000804 <SPI_RxByte+0x38>)
 80007de:	f002 fa85 	bl	8002cec <HAL_SPI_GetState>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d1f9      	bne.n	80007dc <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80007e8:	1dba      	adds	r2, r7, #6
 80007ea:	1df9      	adds	r1, r7, #7
 80007ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f0:	9300      	str	r3, [sp, #0]
 80007f2:	2301      	movs	r3, #1
 80007f4:	4803      	ldr	r0, [pc, #12]	; (8000804 <SPI_RxByte+0x38>)
 80007f6:	f002 f8d7 	bl	80029a8 <HAL_SPI_TransmitReceive>

  return data;
 80007fa:	79bb      	ldrb	r3, [r7, #6]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000044 	.word	0x20000044

08000808 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000810:	f7ff ffdc 	bl	80007cc <SPI_RxByte>
 8000814:	4603      	mov	r3, r0
 8000816:	461a      	mov	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	701a      	strb	r2, [r3, #0]
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <SD_ReadyWait+0x34>)
 800082c:	2232      	movs	r2, #50	; 0x32
 800082e:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000830:	f7ff ffcc 	bl	80007cc <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000834:	f7ff ffca 	bl	80007cc <SPI_RxByte>
 8000838:	4603      	mov	r3, r0
 800083a:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	2bff      	cmp	r3, #255	; 0xff
 8000840:	d004      	beq.n	800084c <SD_ReadyWait+0x28>
 8000842:	4b05      	ldr	r3, [pc, #20]	; (8000858 <SD_ReadyWait+0x34>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b00      	cmp	r3, #0
 800084a:	d1f3      	bne.n	8000834 <SD_ReadyWait+0x10>

  return res;
 800084c:	79fb      	ldrb	r3, [r7, #7]
}
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	2000214d 	.word	0x2000214d

0800085c <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000862:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000866:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000868:	f7ff ff8a 	bl	8000780 <DESELECT>

  for(int i = 0; i < 10; i++)
 800086c:	2300      	movs	r3, #0
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	e005      	b.n	800087e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000872:	20ff      	movs	r0, #255	; 0xff
 8000874:	f7ff ff90 	bl	8000798 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000878:	693b      	ldr	r3, [r7, #16]
 800087a:	3301      	adds	r3, #1
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	2b09      	cmp	r3, #9
 8000882:	ddf6      	ble.n	8000872 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000884:	f7ff ff70 	bl	8000768 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000888:	2340      	movs	r3, #64	; 0x40
 800088a:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 800089c:	2395      	movs	r3, #149	; 0x95
 800089e:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	e009      	b.n	80008ba <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80008a6:	1d3a      	adds	r2, r7, #4
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	4413      	add	r3, r2
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff ff72 	bl	8000798 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	3301      	adds	r3, #1
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	2b05      	cmp	r3, #5
 80008be:	ddf2      	ble.n	80008a6 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80008c0:	e002      	b.n	80008c8 <SD_PowerOn+0x6c>
  {
    Count--;
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	3b01      	subs	r3, #1
 80008c6:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80008c8:	f7ff ff80 	bl	80007cc <SPI_RxByte>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d002      	beq.n	80008d8 <SD_PowerOn+0x7c>
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d1f4      	bne.n	80008c2 <SD_PowerOn+0x66>
  }

  DESELECT();
 80008d8:	f7ff ff52 	bl	8000780 <DESELECT>
  SPI_TxByte(0XFF);
 80008dc:	20ff      	movs	r0, #255	; 0xff
 80008de:	f7ff ff5b 	bl	8000798 <SPI_TxByte>

  PowerFlag = 1;
 80008e2:	4b03      	ldr	r3, [pc, #12]	; (80008f0 <SD_PowerOn+0x94>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	701a      	strb	r2, [r3, #0]
}
 80008e8:	bf00      	nop
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000041 	.word	0x20000041

080008f4 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80008f8:	4b03      	ldr	r3, [pc, #12]	; (8000908 <SD_PowerOff+0x14>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	20000041 	.word	0x20000041

0800090c <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000910:	4b02      	ldr	r3, [pc, #8]	; (800091c <SD_CheckPower+0x10>)
 8000912:	781b      	ldrb	r3, [r3, #0]
}
 8000914:	4618      	mov	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr
 800091c:	20000041 	.word	0x20000041

08000920 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <SD_RxDataBlock+0x68>)
 800092c:	220a      	movs	r2, #10
 800092e:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000930:	f7ff ff4c 	bl	80007cc <SPI_RxByte>
 8000934:	4603      	mov	r3, r0
 8000936:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000938:	7bfb      	ldrb	r3, [r7, #15]
 800093a:	2bff      	cmp	r3, #255	; 0xff
 800093c:	d104      	bne.n	8000948 <SD_RxDataBlock+0x28>
 800093e:	4b12      	ldr	r3, [pc, #72]	; (8000988 <SD_RxDataBlock+0x68>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1f3      	bne.n	8000930 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	2bfe      	cmp	r3, #254	; 0xfe
 800094c:	d001      	beq.n	8000952 <SD_RxDataBlock+0x32>
    return FALSE;
 800094e:	2300      	movs	r3, #0
 8000950:	e016      	b.n	8000980 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	1c5a      	adds	r2, r3, #1
 8000956:	607a      	str	r2, [r7, #4]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ff55 	bl	8000808 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	1c5a      	adds	r2, r3, #1
 8000962:	607a      	str	r2, [r7, #4]
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff ff4f 	bl	8000808 <SPI_RxBytePtr>
  } while(btr -= 2);
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	3b02      	subs	r3, #2
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d1ed      	bne.n	8000952 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8000976:	f7ff ff29 	bl	80007cc <SPI_RxByte>
  SPI_RxByte();
 800097a:	f7ff ff27 	bl	80007cc <SPI_RxByte>

  return TRUE;
 800097e:	2301      	movs	r3, #1
}
 8000980:	4618      	mov	r0, r3
 8000982:	3710      	adds	r7, #16
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	2000214c 	.word	0x2000214c

0800098c <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	460b      	mov	r3, r1
 8000996:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 800099c:	f7ff ff42 	bl	8000824 <SD_ReadyWait>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2bff      	cmp	r3, #255	; 0xff
 80009a4:	d001      	beq.n	80009aa <SD_TxDataBlock+0x1e>
    return FALSE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	e040      	b.n	8000a2c <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 80009aa:	78fb      	ldrb	r3, [r7, #3]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fef3 	bl	8000798 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80009b2:	78fb      	ldrb	r3, [r7, #3]
 80009b4:	2bfd      	cmp	r3, #253	; 0xfd
 80009b6:	d031      	beq.n	8000a1c <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	1c5a      	adds	r2, r3, #1
 80009c0:	607a      	str	r2, [r7, #4]
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fee7 	bl	8000798 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	1c5a      	adds	r2, r3, #1
 80009ce:	607a      	str	r2, [r7, #4]
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff fee0 	bl	8000798 <SPI_TxByte>
    } while (--wc);
 80009d8:	7bbb      	ldrb	r3, [r7, #14]
 80009da:	3b01      	subs	r3, #1
 80009dc:	73bb      	strb	r3, [r7, #14]
 80009de:	7bbb      	ldrb	r3, [r7, #14]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d1eb      	bne.n	80009bc <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 80009e4:	f7ff fef2 	bl	80007cc <SPI_RxByte>
    SPI_RxByte();
 80009e8:	f7ff fef0 	bl	80007cc <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 80009ec:	e00b      	b.n	8000a06 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 80009ee:	f7ff feed 	bl	80007cc <SPI_RxByte>
 80009f2:	4603      	mov	r3, r0
 80009f4:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	f003 031f 	and.w	r3, r3, #31
 80009fc:	2b05      	cmp	r3, #5
 80009fe:	d006      	beq.n	8000a0e <SD_TxDataBlock+0x82>
        break;

      i++;
 8000a00:	7b7b      	ldrb	r3, [r7, #13]
 8000a02:	3301      	adds	r3, #1
 8000a04:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000a06:	7b7b      	ldrb	r3, [r7, #13]
 8000a08:	2b40      	cmp	r3, #64	; 0x40
 8000a0a:	d9f0      	bls.n	80009ee <SD_TxDataBlock+0x62>
 8000a0c:	e000      	b.n	8000a10 <SD_TxDataBlock+0x84>
        break;
 8000a0e:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000a10:	bf00      	nop
 8000a12:	f7ff fedb 	bl	80007cc <SPI_RxByte>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d0fa      	beq.n	8000a12 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000a1c:	7bfb      	ldrb	r3, [r7, #15]
 8000a1e:	f003 031f 	and.w	r3, r3, #31
 8000a22:	2b05      	cmp	r3, #5
 8000a24:	d101      	bne.n	8000a2a <SD_TxDataBlock+0x9e>
    return TRUE;
 8000a26:	2301      	movs	r3, #1
 8000a28:	e000      	b.n	8000a2c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000a2a:	2300      	movs	r3, #0
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	6039      	str	r1, [r7, #0]
 8000a3e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000a40:	f7ff fef0 	bl	8000824 <SD_ReadyWait>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2bff      	cmp	r3, #255	; 0xff
 8000a48:	d001      	beq.n	8000a4e <SD_SendCmd+0x1a>
    return 0xFF;
 8000a4a:	23ff      	movs	r3, #255	; 0xff
 8000a4c:	e040      	b.n	8000ad0 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff fea1 	bl	8000798 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	0e1b      	lsrs	r3, r3, #24
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fe9b 	bl	8000798 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	0c1b      	lsrs	r3, r3, #16
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fe95 	bl	8000798 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	0a1b      	lsrs	r3, r3, #8
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fe8f 	bl	8000798 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fe8a 	bl	8000798 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	2b40      	cmp	r3, #64	; 0x40
 8000a8c:	d101      	bne.n	8000a92 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000a8e:	2395      	movs	r3, #149	; 0x95
 8000a90:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	2b48      	cmp	r3, #72	; 0x48
 8000a96:	d101      	bne.n	8000a9c <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000a98:	2387      	movs	r3, #135	; 0x87
 8000a9a:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8000a9c:	7bfb      	ldrb	r3, [r7, #15]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff fe7a 	bl	8000798 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	2b4c      	cmp	r3, #76	; 0x4c
 8000aa8:	d101      	bne.n	8000aae <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000aaa:	f7ff fe8f 	bl	80007cc <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8000aae:	230a      	movs	r3, #10
 8000ab0:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000ab2:	f7ff fe8b 	bl	80007cc <SPI_RxByte>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000aba:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	da05      	bge.n	8000ace <SD_SendCmd+0x9a>
 8000ac2:	7bbb      	ldrb	r3, [r7, #14]
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	73bb      	strb	r3, [r7, #14]
 8000ac8:	7bbb      	ldrb	r3, [r7, #14]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d1f1      	bne.n	8000ab2 <SD_SendCmd+0x7e>

  return res;
 8000ace:	7b7b      	ldrb	r3, [r7, #13]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3710      	adds	r7, #16
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e0d5      	b.n	8000c98 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000aec:	4b6c      	ldr	r3, [pc, #432]	; (8000ca0 <SD_disk_initialize+0x1c8>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d003      	beq.n	8000b02 <SD_disk_initialize+0x2a>
    return Stat;
 8000afa:	4b69      	ldr	r3, [pc, #420]	; (8000ca0 <SD_disk_initialize+0x1c8>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	e0ca      	b.n	8000c98 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000b02:	f7ff feab 	bl	800085c <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8000b06:	f7ff fe2f 	bl	8000768 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000b0e:	2100      	movs	r1, #0
 8000b10:	2040      	movs	r0, #64	; 0x40
 8000b12:	f7ff ff8f 	bl	8000a34 <SD_SendCmd>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	f040 80a5 	bne.w	8000c68 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000b1e:	4b61      	ldr	r3, [pc, #388]	; (8000ca4 <SD_disk_initialize+0x1cc>)
 8000b20:	2264      	movs	r2, #100	; 0x64
 8000b22:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000b24:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000b28:	2048      	movs	r0, #72	; 0x48
 8000b2a:	f7ff ff83 	bl	8000a34 <SD_SendCmd>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d158      	bne.n	8000be6 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000b34:	2300      	movs	r3, #0
 8000b36:	73fb      	strb	r3, [r7, #15]
 8000b38:	e00c      	b.n	8000b54 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8000b3a:	7bfc      	ldrb	r4, [r7, #15]
 8000b3c:	f7ff fe46 	bl	80007cc <SPI_RxByte>
 8000b40:	4603      	mov	r3, r0
 8000b42:	461a      	mov	r2, r3
 8000b44:	f104 0310 	add.w	r3, r4, #16
 8000b48:	443b      	add	r3, r7
 8000b4a:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	3301      	adds	r3, #1
 8000b52:	73fb      	strb	r3, [r7, #15]
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
 8000b56:	2b03      	cmp	r3, #3
 8000b58:	d9ef      	bls.n	8000b3a <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000b5a:	7abb      	ldrb	r3, [r7, #10]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	f040 8083 	bne.w	8000c68 <SD_disk_initialize+0x190>
 8000b62:	7afb      	ldrb	r3, [r7, #11]
 8000b64:	2baa      	cmp	r3, #170	; 0xaa
 8000b66:	d17f      	bne.n	8000c68 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2077      	movs	r0, #119	; 0x77
 8000b6c:	f7ff ff62 	bl	8000a34 <SD_SendCmd>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d807      	bhi.n	8000b86 <SD_disk_initialize+0xae>
 8000b76:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000b7a:	2069      	movs	r0, #105	; 0x69
 8000b7c:	f7ff ff5a 	bl	8000a34 <SD_SendCmd>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d005      	beq.n	8000b92 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000b86:	4b47      	ldr	r3, [pc, #284]	; (8000ca4 <SD_disk_initialize+0x1cc>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d1eb      	bne.n	8000b68 <SD_disk_initialize+0x90>
 8000b90:	e000      	b.n	8000b94 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000b92:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000b94:	4b43      	ldr	r3, [pc, #268]	; (8000ca4 <SD_disk_initialize+0x1cc>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d064      	beq.n	8000c68 <SD_disk_initialize+0x190>
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	207a      	movs	r0, #122	; 0x7a
 8000ba2:	f7ff ff47 	bl	8000a34 <SD_SendCmd>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d15d      	bne.n	8000c68 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000bac:	2300      	movs	r3, #0
 8000bae:	73fb      	strb	r3, [r7, #15]
 8000bb0:	e00c      	b.n	8000bcc <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000bb2:	7bfc      	ldrb	r4, [r7, #15]
 8000bb4:	f7ff fe0a 	bl	80007cc <SPI_RxByte>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	461a      	mov	r2, r3
 8000bbc:	f104 0310 	add.w	r3, r4, #16
 8000bc0:	443b      	add	r3, r7
 8000bc2:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	73fb      	strb	r3, [r7, #15]
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
 8000bce:	2b03      	cmp	r3, #3
 8000bd0:	d9ef      	bls.n	8000bb2 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8000bd2:	7a3b      	ldrb	r3, [r7, #8]
 8000bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <SD_disk_initialize+0x108>
 8000bdc:	2306      	movs	r3, #6
 8000bde:	e000      	b.n	8000be2 <SD_disk_initialize+0x10a>
 8000be0:	2302      	movs	r3, #2
 8000be2:	73bb      	strb	r3, [r7, #14]
 8000be4:	e040      	b.n	8000c68 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000be6:	2100      	movs	r1, #0
 8000be8:	2077      	movs	r0, #119	; 0x77
 8000bea:	f7ff ff23 	bl	8000a34 <SD_SendCmd>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d808      	bhi.n	8000c06 <SD_disk_initialize+0x12e>
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2069      	movs	r0, #105	; 0x69
 8000bf8:	f7ff ff1c 	bl	8000a34 <SD_SendCmd>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d801      	bhi.n	8000c06 <SD_disk_initialize+0x12e>
 8000c02:	2302      	movs	r3, #2
 8000c04:	e000      	b.n	8000c08 <SD_disk_initialize+0x130>
 8000c06:	2301      	movs	r3, #1
 8000c08:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8000c0a:	7bbb      	ldrb	r3, [r7, #14]
 8000c0c:	2b02      	cmp	r3, #2
 8000c0e:	d10e      	bne.n	8000c2e <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000c10:	2100      	movs	r1, #0
 8000c12:	2077      	movs	r0, #119	; 0x77
 8000c14:	f7ff ff0e 	bl	8000a34 <SD_SendCmd>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d80e      	bhi.n	8000c3c <SD_disk_initialize+0x164>
 8000c1e:	2100      	movs	r1, #0
 8000c20:	2069      	movs	r0, #105	; 0x69
 8000c22:	f7ff ff07 	bl	8000a34 <SD_SendCmd>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d107      	bne.n	8000c3c <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000c2c:	e00d      	b.n	8000c4a <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000c2e:	2100      	movs	r1, #0
 8000c30:	2041      	movs	r0, #65	; 0x41
 8000c32:	f7ff feff 	bl	8000a34 <SD_SendCmd>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d005      	beq.n	8000c48 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000c3c:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <SD_disk_initialize+0x1cc>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d1e1      	bne.n	8000c0a <SD_disk_initialize+0x132>
 8000c46:	e000      	b.n	8000c4a <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8000c48:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8000c4a:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <SD_disk_initialize+0x1cc>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d007      	beq.n	8000c64 <SD_disk_initialize+0x18c>
 8000c54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c58:	2050      	movs	r0, #80	; 0x50
 8000c5a:	f7ff feeb 	bl	8000a34 <SD_SendCmd>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8000c68:	4a0f      	ldr	r2, [pc, #60]	; (8000ca8 <SD_disk_initialize+0x1d0>)
 8000c6a:	7bbb      	ldrb	r3, [r7, #14]
 8000c6c:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8000c6e:	f7ff fd87 	bl	8000780 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000c72:	f7ff fdab 	bl	80007cc <SPI_RxByte>

  if (type)
 8000c76:	7bbb      	ldrb	r3, [r7, #14]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d008      	beq.n	8000c8e <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <SD_disk_initialize+0x1c8>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	f023 0301 	bic.w	r3, r3, #1
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <SD_disk_initialize+0x1c8>)
 8000c8a:	701a      	strb	r2, [r3, #0]
 8000c8c:	e001      	b.n	8000c92 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000c8e:	f7ff fe31 	bl	80008f4 <SD_PowerOff>
  }

  return Stat;
 8000c92:	4b03      	ldr	r3, [pc, #12]	; (8000ca0 <SD_disk_initialize+0x1c8>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	b2db      	uxtb	r3, r3
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd90      	pop	{r4, r7, pc}
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	2000214c 	.word	0x2000214c
 8000ca8:	20000040 	.word	0x20000040

08000cac <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <SD_disk_status+0x14>
    return STA_NOINIT;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e002      	b.n	8000cc6 <SD_disk_status+0x1a>

  return Stat;
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <SD_disk_status+0x24>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	b2db      	uxtb	r3, r3
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr
 8000cd0:	20000000 	.word	0x20000000

08000cd4 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60b9      	str	r1, [r7, #8]
 8000cdc:	607a      	str	r2, [r7, #4]
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d102      	bne.n	8000cf0 <SD_disk_read+0x1c>
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d101      	bne.n	8000cf4 <SD_disk_read+0x20>
    return RES_PARERR;
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	e051      	b.n	8000d98 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8000cf4:	4b2a      	ldr	r3, [pc, #168]	; (8000da0 <SD_disk_read+0xcc>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000d02:	2303      	movs	r3, #3
 8000d04:	e048      	b.n	8000d98 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8000d06:	4b27      	ldr	r3, [pc, #156]	; (8000da4 <SD_disk_read+0xd0>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	f003 0304 	and.w	r3, r3, #4
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d102      	bne.n	8000d18 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	025b      	lsls	r3, r3, #9
 8000d16:	607b      	str	r3, [r7, #4]

  SELECT();
 8000d18:	f7ff fd26 	bl	8000768 <SELECT>

  if (count == 1)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d111      	bne.n	8000d46 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	2051      	movs	r0, #81	; 0x51
 8000d26:	f7ff fe85 	bl	8000a34 <SD_SendCmd>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d129      	bne.n	8000d84 <SD_disk_read+0xb0>
 8000d30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d34:	68b8      	ldr	r0, [r7, #8]
 8000d36:	f7ff fdf3 	bl	8000920 <SD_RxDataBlock>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d021      	beq.n	8000d84 <SD_disk_read+0xb0>
      count = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	e01e      	b.n	8000d84 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	2052      	movs	r0, #82	; 0x52
 8000d4a:	f7ff fe73 	bl	8000a34 <SD_SendCmd>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d117      	bne.n	8000d84 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000d54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d58:	68b8      	ldr	r0, [r7, #8]
 8000d5a:	f7ff fde1 	bl	8000920 <SD_RxDataBlock>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d00a      	beq.n	8000d7a <SD_disk_read+0xa6>
          break;

        buff += 512;
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000d6a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d1ed      	bne.n	8000d54 <SD_disk_read+0x80>
 8000d78:	e000      	b.n	8000d7c <SD_disk_read+0xa8>
          break;
 8000d7a:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	204c      	movs	r0, #76	; 0x4c
 8000d80:	f7ff fe58 	bl	8000a34 <SD_SendCmd>
    }
  }

  DESELECT();
 8000d84:	f7ff fcfc 	bl	8000780 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8000d88:	f7ff fd20 	bl	80007cc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	bf14      	ite	ne
 8000d92:	2301      	movne	r3, #1
 8000d94:	2300      	moveq	r3, #0
 8000d96:	b2db      	uxtb	r3, r3
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000000 	.word	0x20000000
 8000da4:	20000040 	.word	0x20000040

08000da8 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	4603      	mov	r3, r0
 8000db6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d102      	bne.n	8000dc4 <SD_disk_write+0x1c>
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d101      	bne.n	8000dc8 <SD_disk_write+0x20>
    return RES_PARERR;
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	e06b      	b.n	8000ea0 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8000dc8:	4b37      	ldr	r3, [pc, #220]	; (8000ea8 <SD_disk_write+0x100>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <SD_disk_write+0x32>
    return RES_NOTRDY;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e062      	b.n	8000ea0 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8000dda:	4b33      	ldr	r3, [pc, #204]	; (8000ea8 <SD_disk_write+0x100>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	f003 0304 	and.w	r3, r3, #4
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <SD_disk_write+0x44>
    return RES_WRPRT;
 8000de8:	2302      	movs	r3, #2
 8000dea:	e059      	b.n	8000ea0 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8000dec:	4b2f      	ldr	r3, [pc, #188]	; (8000eac <SD_disk_write+0x104>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	f003 0304 	and.w	r3, r3, #4
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d102      	bne.n	8000dfe <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	025b      	lsls	r3, r3, #9
 8000dfc:	607b      	str	r3, [r7, #4]

  SELECT();
 8000dfe:	f7ff fcb3 	bl	8000768 <SELECT>

  if (count == 1)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d110      	bne.n	8000e2a <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000e08:	6879      	ldr	r1, [r7, #4]
 8000e0a:	2058      	movs	r0, #88	; 0x58
 8000e0c:	f7ff fe12 	bl	8000a34 <SD_SendCmd>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d13a      	bne.n	8000e8c <SD_disk_write+0xe4>
 8000e16:	21fe      	movs	r1, #254	; 0xfe
 8000e18:	68b8      	ldr	r0, [r7, #8]
 8000e1a:	f7ff fdb7 	bl	800098c <SD_TxDataBlock>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d033      	beq.n	8000e8c <SD_disk_write+0xe4>
      count = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	603b      	str	r3, [r7, #0]
 8000e28:	e030      	b.n	8000e8c <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8000e2a:	4b20      	ldr	r3, [pc, #128]	; (8000eac <SD_disk_write+0x104>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d007      	beq.n	8000e46 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000e36:	2100      	movs	r1, #0
 8000e38:	2077      	movs	r0, #119	; 0x77
 8000e3a:	f7ff fdfb 	bl	8000a34 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000e3e:	6839      	ldr	r1, [r7, #0]
 8000e40:	2057      	movs	r0, #87	; 0x57
 8000e42:	f7ff fdf7 	bl	8000a34 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	2059      	movs	r0, #89	; 0x59
 8000e4a:	f7ff fdf3 	bl	8000a34 <SD_SendCmd>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d11b      	bne.n	8000e8c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000e54:	21fc      	movs	r1, #252	; 0xfc
 8000e56:	68b8      	ldr	r0, [r7, #8]
 8000e58:	f7ff fd98 	bl	800098c <SD_TxDataBlock>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d00a      	beq.n	8000e78 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000e68:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d1ee      	bne.n	8000e54 <SD_disk_write+0xac>
 8000e76:	e000      	b.n	8000e7a <SD_disk_write+0xd2>
          break;
 8000e78:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8000e7a:	21fd      	movs	r1, #253	; 0xfd
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f7ff fd85 	bl	800098c <SD_TxDataBlock>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d101      	bne.n	8000e8c <SD_disk_write+0xe4>
      {
        count = 1;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8000e8c:	f7ff fc78 	bl	8000780 <DESELECT>
  SPI_RxByte();
 8000e90:	f7ff fc9c 	bl	80007cc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	bf14      	ite	ne
 8000e9a:	2301      	movne	r3, #1
 8000e9c:	2300      	moveq	r3, #0
 8000e9e:	b2db      	uxtb	r3, r3
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	20000040 	.word	0x20000040

08000eb0 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b08b      	sub	sp, #44	; 0x2c
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	603a      	str	r2, [r7, #0]
 8000eba:	71fb      	strb	r3, [r7, #7]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8000eca:	2304      	movs	r3, #4
 8000ecc:	e11b      	b.n	8001106 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8000ed4:	79bb      	ldrb	r3, [r7, #6]
 8000ed6:	2b05      	cmp	r3, #5
 8000ed8:	d129      	bne.n	8000f2e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8000eda:	6a3b      	ldr	r3, [r7, #32]
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d017      	beq.n	8000f12 <SD_disk_ioctl+0x62>
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	dc1f      	bgt.n	8000f26 <SD_disk_ioctl+0x76>
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d002      	beq.n	8000ef0 <SD_disk_ioctl+0x40>
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d00b      	beq.n	8000f06 <SD_disk_ioctl+0x56>
 8000eee:	e01a      	b.n	8000f26 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8000ef0:	f7ff fd0c 	bl	800090c <SD_CheckPower>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8000efa:	f7ff fcfb 	bl	80008f4 <SD_PowerOff>
      res = RES_OK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000f04:	e0fd      	b.n	8001102 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8000f06:	f7ff fca9 	bl	800085c <SD_PowerOn>
      res = RES_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000f10:	e0f7      	b.n	8001102 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8000f12:	6a3b      	ldr	r3, [r7, #32]
 8000f14:	1c5c      	adds	r4, r3, #1
 8000f16:	f7ff fcf9 	bl	800090c <SD_CheckPower>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000f24:	e0ed      	b.n	8001102 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8000f26:	2304      	movs	r3, #4
 8000f28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f2c:	e0e9      	b.n	8001102 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8000f2e:	4b78      	ldr	r3, [pc, #480]	; (8001110 <SD_disk_ioctl+0x260>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	f003 0301 	and.w	r3, r3, #1
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e0e2      	b.n	8001106 <SD_disk_ioctl+0x256>

    SELECT();
 8000f40:	f7ff fc12 	bl	8000768 <SELECT>

    switch (ctrl)
 8000f44:	79bb      	ldrb	r3, [r7, #6]
 8000f46:	2b0d      	cmp	r3, #13
 8000f48:	f200 80cc 	bhi.w	80010e4 <SD_disk_ioctl+0x234>
 8000f4c:	a201      	add	r2, pc, #4	; (adr r2, 8000f54 <SD_disk_ioctl+0xa4>)
 8000f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f52:	bf00      	nop
 8000f54:	0800104f 	.word	0x0800104f
 8000f58:	08000f8d 	.word	0x08000f8d
 8000f5c:	0800103f 	.word	0x0800103f
 8000f60:	080010e5 	.word	0x080010e5
 8000f64:	080010e5 	.word	0x080010e5
 8000f68:	080010e5 	.word	0x080010e5
 8000f6c:	080010e5 	.word	0x080010e5
 8000f70:	080010e5 	.word	0x080010e5
 8000f74:	080010e5 	.word	0x080010e5
 8000f78:	080010e5 	.word	0x080010e5
 8000f7c:	080010e5 	.word	0x080010e5
 8000f80:	08001061 	.word	0x08001061
 8000f84:	08001085 	.word	0x08001085
 8000f88:	080010a9 	.word	0x080010a9
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	2049      	movs	r0, #73	; 0x49
 8000f90:	f7ff fd50 	bl	8000a34 <SD_SendCmd>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f040 80a8 	bne.w	80010ec <SD_disk_ioctl+0x23c>
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	2110      	movs	r1, #16
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fcbc 	bl	8000920 <SD_RxDataBlock>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f000 809e 	beq.w	80010ec <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8000fb0:	7b3b      	ldrb	r3, [r7, #12]
 8000fb2:	099b      	lsrs	r3, r3, #6
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d10e      	bne.n	8000fd8 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000fba:	7d7b      	ldrb	r3, [r7, #21]
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	7d3b      	ldrb	r3, [r7, #20]
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	021b      	lsls	r3, r3, #8
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	4413      	add	r3, r2
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	3301      	adds	r3, #1
 8000fcc:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000fce:	8bfb      	ldrh	r3, [r7, #30]
 8000fd0:	029a      	lsls	r2, r3, #10
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	e02e      	b.n	8001036 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000fd8:	7c7b      	ldrb	r3, [r7, #17]
 8000fda:	f003 030f 	and.w	r3, r3, #15
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	7dbb      	ldrb	r3, [r7, #22]
 8000fe2:	09db      	lsrs	r3, r3, #7
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	4413      	add	r3, r2
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	7d7b      	ldrb	r3, [r7, #21]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	f003 0306 	and.w	r3, r3, #6
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	4413      	add	r3, r2
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001000:	7d3b      	ldrb	r3, [r7, #20]
 8001002:	099b      	lsrs	r3, r3, #6
 8001004:	b2db      	uxtb	r3, r3
 8001006:	b29a      	uxth	r2, r3
 8001008:	7cfb      	ldrb	r3, [r7, #19]
 800100a:	b29b      	uxth	r3, r3
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	b29b      	uxth	r3, r3
 8001010:	4413      	add	r3, r2
 8001012:	b29a      	uxth	r2, r3
 8001014:	7cbb      	ldrb	r3, [r7, #18]
 8001016:	029b      	lsls	r3, r3, #10
 8001018:	b29b      	uxth	r3, r3
 800101a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800101e:	b29b      	uxth	r3, r3
 8001020:	4413      	add	r3, r2
 8001022:	b29b      	uxth	r3, r3
 8001024:	3301      	adds	r3, #1
 8001026:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001028:	8bfa      	ldrh	r2, [r7, #30]
 800102a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800102e:	3b09      	subs	r3, #9
 8001030:	409a      	lsls	r2, r3
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 800103c:	e056      	b.n	80010ec <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001044:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800104c:	e055      	b.n	80010fa <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800104e:	f7ff fbe9 	bl	8000824 <SD_ReadyWait>
 8001052:	4603      	mov	r3, r0
 8001054:	2bff      	cmp	r3, #255	; 0xff
 8001056:	d14b      	bne.n	80010f0 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800105e:	e047      	b.n	80010f0 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001060:	2100      	movs	r1, #0
 8001062:	2049      	movs	r0, #73	; 0x49
 8001064:	f7ff fce6 	bl	8000a34 <SD_SendCmd>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d142      	bne.n	80010f4 <SD_disk_ioctl+0x244>
 800106e:	2110      	movs	r1, #16
 8001070:	6a38      	ldr	r0, [r7, #32]
 8001072:	f7ff fc55 	bl	8000920 <SD_RxDataBlock>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d03b      	beq.n	80010f4 <SD_disk_ioctl+0x244>
        res = RES_OK;
 800107c:	2300      	movs	r3, #0
 800107e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001082:	e037      	b.n	80010f4 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001084:	2100      	movs	r1, #0
 8001086:	204a      	movs	r0, #74	; 0x4a
 8001088:	f7ff fcd4 	bl	8000a34 <SD_SendCmd>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d132      	bne.n	80010f8 <SD_disk_ioctl+0x248>
 8001092:	2110      	movs	r1, #16
 8001094:	6a38      	ldr	r0, [r7, #32]
 8001096:	f7ff fc43 	bl	8000920 <SD_RxDataBlock>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d02b      	beq.n	80010f8 <SD_disk_ioctl+0x248>
        res = RES_OK;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80010a6:	e027      	b.n	80010f8 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 80010a8:	2100      	movs	r1, #0
 80010aa:	207a      	movs	r0, #122	; 0x7a
 80010ac:	f7ff fcc2 	bl	8000a34 <SD_SendCmd>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d116      	bne.n	80010e4 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 80010b6:	2300      	movs	r3, #0
 80010b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80010bc:	e00b      	b.n	80010d6 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 80010be:	6a3c      	ldr	r4, [r7, #32]
 80010c0:	1c63      	adds	r3, r4, #1
 80010c2:	623b      	str	r3, [r7, #32]
 80010c4:	f7ff fb82 	bl	80007cc <SPI_RxByte>
 80010c8:	4603      	mov	r3, r0
 80010ca:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80010cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010d0:	3301      	adds	r3, #1
 80010d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80010d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010da:	2b03      	cmp	r3, #3
 80010dc:	d9ef      	bls.n	80010be <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 80010de:	2300      	movs	r3, #0
 80010e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 80010e4:	2304      	movs	r3, #4
 80010e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010ea:	e006      	b.n	80010fa <SD_disk_ioctl+0x24a>
      break;
 80010ec:	bf00      	nop
 80010ee:	e004      	b.n	80010fa <SD_disk_ioctl+0x24a>
      break;
 80010f0:	bf00      	nop
 80010f2:	e002      	b.n	80010fa <SD_disk_ioctl+0x24a>
      break;
 80010f4:	bf00      	nop
 80010f6:	e000      	b.n	80010fa <SD_disk_ioctl+0x24a>
      break;
 80010f8:	bf00      	nop
    }

    DESELECT();
 80010fa:	f7ff fb41 	bl	8000780 <DESELECT>
    SPI_RxByte();
 80010fe:	f7ff fb65 	bl	80007cc <SPI_RxByte>
  }

  return res;
 8001102:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001106:	4618      	mov	r0, r3
 8001108:	372c      	adds	r7, #44	; 0x2c
 800110a:	46bd      	mov	sp, r7
 800110c:	bd90      	pop	{r4, r7, pc}
 800110e:	bf00      	nop
 8001110:	20000000 	.word	0x20000000

08001114 <send_message>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void send_message (char* message)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 1000);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff f815 	bl	800014c <strlen>
 8001122:	4603      	mov	r3, r0
 8001124:	b29a      	uxth	r2, r3
 8001126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	4801      	ldr	r0, [pc, #4]	; (8001134 <send_message+0x20>)
 800112e:	f001 fede 	bl	8002eee <HAL_UART_Transmit>
	while(1)
 8001132:	e7fe      	b.n	8001132 <send_message+0x1e>
 8001134:	2000009c 	.word	0x2000009c

08001138 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800113e:	f000 fb07 	bl	8001750 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001142:	f000 f8b3 	bl	80012ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001146:	f000 f953 	bl	80013f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800114a:	f000 f927 	bl	800139c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 800114e:	f002 f839 	bl	80031c4 <MX_FATFS_Init>
  MX_SPI1_Init();
 8001152:	f000 f8ed 	bl	8001330 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  /* Mount SD Card */
   FRESULT fres = f_mount(&fs, "/", 0);
 8001156:	2200      	movs	r2, #0
 8001158:	4942      	ldr	r1, [pc, #264]	; (8001264 <main+0x12c>)
 800115a:	4843      	ldr	r0, [pc, #268]	; (8001268 <main+0x130>)
 800115c:	f004 fd02 	bl	8005b64 <f_mount>
 8001160:	4603      	mov	r3, r0
 8001162:	71fb      	strb	r3, [r7, #7]
     if(fres != FR_OK)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d002      	beq.n	8001170 <main+0x38>
       send_message("mount failed");
 800116a:	4840      	ldr	r0, [pc, #256]	; (800126c <main+0x134>)
 800116c:	f7ff ffd2 	bl	8001114 <send_message>

     /* Open file to write */
     fres = f_open(&fil, "first.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001170:	2213      	movs	r2, #19
 8001172:	493f      	ldr	r1, [pc, #252]	; (8001270 <main+0x138>)
 8001174:	483f      	ldr	r0, [pc, #252]	; (8001274 <main+0x13c>)
 8001176:	f004 fd3f 	bl	8005bf8 <f_open>
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
     HAL_Delay(2000);
 800117e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001182:	f000 fb47 	bl	8001814 <HAL_Delay>
     if(fres != FR_OK)
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d002      	beq.n	8001192 <main+0x5a>
     	send_message("file opening failed!\n");
 800118c:	483a      	ldr	r0, [pc, #232]	; (8001278 <main+0x140>)
 800118e:	f7ff ffc1 	bl	8001114 <send_message>

     /* Check free space */
     if(f_getfree("", &fre_clust, &pfs) != FR_OK)
 8001192:	4a3a      	ldr	r2, [pc, #232]	; (800127c <main+0x144>)
 8001194:	493a      	ldr	r1, [pc, #232]	; (8001280 <main+0x148>)
 8001196:	483b      	ldr	r0, [pc, #236]	; (8001284 <main+0x14c>)
 8001198:	f005 fb78 	bl	800688c <f_getfree>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d002      	beq.n	80011a8 <main+0x70>
     	send_message("checking free space failed");
 80011a2:	4839      	ldr	r0, [pc, #228]	; (8001288 <main+0x150>)
 80011a4:	f7ff ffb6 	bl	8001114 <send_message>

     total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80011a8:	4b34      	ldr	r3, [pc, #208]	; (800127c <main+0x144>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	3b02      	subs	r3, #2
 80011b4:	4a31      	ldr	r2, [pc, #196]	; (800127c <main+0x144>)
 80011b6:	6812      	ldr	r2, [r2, #0]
 80011b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80011bc:	7892      	ldrb	r2, [r2, #2]
 80011be:	fb02 f303 	mul.w	r3, r2, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff fa36 	bl	8000634 <__aeabi_ui2d>
 80011c8:	f04f 0200 	mov.w	r2, #0
 80011cc:	4b2f      	ldr	r3, [pc, #188]	; (800128c <main+0x154>)
 80011ce:	f7fe ffc5 	bl	800015c <__aeabi_dmul>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4610      	mov	r0, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	f7ff faa5 	bl	8000728 <__aeabi_d2uiz>
 80011de:	4603      	mov	r3, r0
 80011e0:	4a2b      	ldr	r2, [pc, #172]	; (8001290 <main+0x158>)
 80011e2:	6013      	str	r3, [r2, #0]
     free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80011e4:	4b25      	ldr	r3, [pc, #148]	; (800127c <main+0x144>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011ec:	789b      	ldrb	r3, [r3, #2]
 80011ee:	461a      	mov	r2, r3
 80011f0:	4b23      	ldr	r3, [pc, #140]	; (8001280 <main+0x148>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	fb02 f303 	mul.w	r3, r2, r3
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fa1b 	bl	8000634 <__aeabi_ui2d>
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	4b22      	ldr	r3, [pc, #136]	; (800128c <main+0x154>)
 8001204:	f7fe ffaa 	bl	800015c <__aeabi_dmul>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4610      	mov	r0, r2
 800120e:	4619      	mov	r1, r3
 8001210:	f7ff fa8a 	bl	8000728 <__aeabi_d2uiz>
 8001214:	4603      	mov	r3, r0
 8001216:	4a1f      	ldr	r2, [pc, #124]	; (8001294 <main+0x15c>)
 8001218:	6013      	str	r3, [r2, #0]

     /* Free space is less than 1kb */
     if(free_space < 1)
 800121a:	4b1e      	ldr	r3, [pc, #120]	; (8001294 <main+0x15c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d102      	bne.n	8001228 <main+0xf0>
     	send_message("free space less than 1kb");
 8001222:	481d      	ldr	r0, [pc, #116]	; (8001298 <main+0x160>)
 8001224:	f7ff ff76 	bl	8001114 <send_message>

     /* Writing text */
     f_puts("STM32 SD Card I/O Example via SPI\n", &fil);
 8001228:	4912      	ldr	r1, [pc, #72]	; (8001274 <main+0x13c>)
 800122a:	481c      	ldr	r0, [pc, #112]	; (800129c <main+0x164>)
 800122c:	f005 fc45 	bl	8006aba <f_puts>
     f_puts("Save the world!!!", &fil);
 8001230:	4910      	ldr	r1, [pc, #64]	; (8001274 <main+0x13c>)
 8001232:	481b      	ldr	r0, [pc, #108]	; (80012a0 <main+0x168>)
 8001234:	f005 fc41 	bl	8006aba <f_puts>

     /* Close file */
     if(f_close(&fil) != FR_OK)
 8001238:	480e      	ldr	r0, [pc, #56]	; (8001274 <main+0x13c>)
 800123a:	f005 fafc 	bl	8006836 <f_close>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d002      	beq.n	800124a <main+0x112>
     	send_message("closing file failed");
 8001244:	4817      	ldr	r0, [pc, #92]	; (80012a4 <main+0x16c>)
 8001246:	f7ff ff65 	bl	8001114 <send_message>

     /* Unmount SDCARD */
     if(f_mount(NULL, "", 1) != FR_OK)
 800124a:	2201      	movs	r2, #1
 800124c:	490d      	ldr	r1, [pc, #52]	; (8001284 <main+0x14c>)
 800124e:	2000      	movs	r0, #0
 8001250:	f004 fc88 	bl	8005b64 <f_mount>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d002      	beq.n	8001260 <main+0x128>
     	send_message("Unmounting failed");
 800125a:	4813      	ldr	r0, [pc, #76]	; (80012a8 <main+0x170>)
 800125c:	f7ff ff5a 	bl	8001114 <send_message>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001260:	e7fe      	b.n	8001260 <main+0x128>
 8001262:	bf00      	nop
 8001264:	08006d20 	.word	0x08006d20
 8001268:	200000e0 	.word	0x200000e0
 800126c:	08006d24 	.word	0x08006d24
 8001270:	08006d34 	.word	0x08006d34
 8001274:	20001114 	.word	0x20001114
 8001278:	08006d40 	.word	0x08006d40
 800127c:	20001110 	.word	0x20001110
 8001280:	20002140 	.word	0x20002140
 8001284:	08006d58 	.word	0x08006d58
 8001288:	08006d5c 	.word	0x08006d5c
 800128c:	3fe00000 	.word	0x3fe00000
 8001290:	20002144 	.word	0x20002144
 8001294:	20002148 	.word	0x20002148
 8001298:	08006d78 	.word	0x08006d78
 800129c:	08006d94 	.word	0x08006d94
 80012a0:	08006db8 	.word	0x08006db8
 80012a4:	08006dcc 	.word	0x08006dcc
 80012a8:	08006de0 	.word	0x08006de0

080012ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b090      	sub	sp, #64	; 0x40
 80012b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b2:	f107 0318 	add.w	r3, r7, #24
 80012b6:	2228      	movs	r2, #40	; 0x28
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f005 fd1c 	bl	8006cf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
 80012cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012ce:	2302      	movs	r3, #2
 80012d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012d2:	2301      	movs	r3, #1
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012d6:	2310      	movs	r3, #16
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012da:	2302      	movs	r3, #2
 80012dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80012de:	2300      	movs	r3, #0
 80012e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80012e2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80012e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e8:	f107 0318 	add.w	r3, r7, #24
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 fd81 	bl	8001df4 <HAL_RCC_OscConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80012f8:	f000 f8ea 	bl	80014d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012fc:	230f      	movs	r3, #15
 80012fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001300:	2302      	movs	r3, #2
 8001302:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800130c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	2102      	movs	r1, #2
 8001316:	4618      	mov	r0, r3
 8001318:	f000 ffee 	bl	80022f8 <HAL_RCC_ClockConfig>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001322:	f000 f8d5 	bl	80014d0 <Error_Handler>
  }
}
 8001326:	bf00      	nop
 8001328:	3740      	adds	r7, #64	; 0x40
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001334:	4b17      	ldr	r3, [pc, #92]	; (8001394 <MX_SPI1_Init+0x64>)
 8001336:	4a18      	ldr	r2, [pc, #96]	; (8001398 <MX_SPI1_Init+0x68>)
 8001338:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <MX_SPI1_Init+0x64>)
 800133c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001340:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <MX_SPI1_Init+0x64>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <MX_SPI1_Init+0x64>)
 800134a:	2200      	movs	r2, #0
 800134c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <MX_SPI1_Init+0x64>)
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <MX_SPI1_Init+0x64>)
 8001356:	2200      	movs	r2, #0
 8001358:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <MX_SPI1_Init+0x64>)
 800135c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001360:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <MX_SPI1_Init+0x64>)
 8001364:	2210      	movs	r2, #16
 8001366:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001368:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <MX_SPI1_Init+0x64>)
 800136a:	2200      	movs	r2, #0
 800136c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <MX_SPI1_Init+0x64>)
 8001370:	2200      	movs	r2, #0
 8001372:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001374:	4b07      	ldr	r3, [pc, #28]	; (8001394 <MX_SPI1_Init+0x64>)
 8001376:	2200      	movs	r2, #0
 8001378:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <MX_SPI1_Init+0x64>)
 800137c:	220a      	movs	r2, #10
 800137e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001380:	4804      	ldr	r0, [pc, #16]	; (8001394 <MX_SPI1_Init+0x64>)
 8001382:	f001 f951 	bl	8002628 <HAL_SPI_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800138c:	f000 f8a0 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000044 	.word	0x20000044
 8001398:	40013000 	.word	0x40013000

0800139c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013a2:	4a12      	ldr	r2, [pc, #72]	; (80013ec <MX_USART2_UART_Init+0x50>)
 80013a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013c2:	220c      	movs	r2, #12
 80013c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013d2:	4805      	ldr	r0, [pc, #20]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013d4:	f001 fd3e 	bl	8002e54 <HAL_UART_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013de:	f000 f877 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	2000009c 	.word	0x2000009c
 80013ec:	40004400 	.word	0x40004400

080013f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f6:	f107 0310 	add.w	r3, r7, #16
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001404:	4b2e      	ldr	r3, [pc, #184]	; (80014c0 <MX_GPIO_Init+0xd0>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	4a2d      	ldr	r2, [pc, #180]	; (80014c0 <MX_GPIO_Init+0xd0>)
 800140a:	f043 0310 	orr.w	r3, r3, #16
 800140e:	6193      	str	r3, [r2, #24]
 8001410:	4b2b      	ldr	r3, [pc, #172]	; (80014c0 <MX_GPIO_Init+0xd0>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	f003 0310 	and.w	r3, r3, #16
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800141c:	4b28      	ldr	r3, [pc, #160]	; (80014c0 <MX_GPIO_Init+0xd0>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	4a27      	ldr	r2, [pc, #156]	; (80014c0 <MX_GPIO_Init+0xd0>)
 8001422:	f043 0320 	orr.w	r3, r3, #32
 8001426:	6193      	str	r3, [r2, #24]
 8001428:	4b25      	ldr	r3, [pc, #148]	; (80014c0 <MX_GPIO_Init+0xd0>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	f003 0320 	and.w	r3, r3, #32
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001434:	4b22      	ldr	r3, [pc, #136]	; (80014c0 <MX_GPIO_Init+0xd0>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	4a21      	ldr	r2, [pc, #132]	; (80014c0 <MX_GPIO_Init+0xd0>)
 800143a:	f043 0304 	orr.w	r3, r3, #4
 800143e:	6193      	str	r3, [r2, #24]
 8001440:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <MX_GPIO_Init+0xd0>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144c:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <MX_GPIO_Init+0xd0>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	4a1b      	ldr	r2, [pc, #108]	; (80014c0 <MX_GPIO_Init+0xd0>)
 8001452:	f043 0308 	orr.w	r3, r3, #8
 8001456:	6193      	str	r3, [r2, #24]
 8001458:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <MX_GPIO_Init+0xd0>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	f003 0308 	and.w	r3, r3, #8
 8001460:	603b      	str	r3, [r7, #0]
 8001462:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001464:	2200      	movs	r2, #0
 8001466:	f44f 7180 	mov.w	r1, #256	; 0x100
 800146a:	4816      	ldr	r0, [pc, #88]	; (80014c4 <MX_GPIO_Init+0xd4>)
 800146c:	f000 fc88 	bl	8001d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001470:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001474:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001476:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <MX_GPIO_Init+0xd8>)
 8001478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800147e:	f107 0310 	add.w	r3, r7, #16
 8001482:	4619      	mov	r1, r3
 8001484:	4811      	ldr	r0, [pc, #68]	; (80014cc <MX_GPIO_Init+0xdc>)
 8001486:	f000 faf7 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800148a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800148e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001490:	2301      	movs	r3, #1
 8001492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001498:	2302      	movs	r3, #2
 800149a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800149c:	f107 0310 	add.w	r3, r7, #16
 80014a0:	4619      	mov	r1, r3
 80014a2:	4808      	ldr	r0, [pc, #32]	; (80014c4 <MX_GPIO_Init+0xd4>)
 80014a4:	f000 fae8 	bl	8001a78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2100      	movs	r1, #0
 80014ac:	2028      	movs	r0, #40	; 0x28
 80014ae:	f000 faac 	bl	8001a0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014b2:	2028      	movs	r0, #40	; 0x28
 80014b4:	f000 fac5 	bl	8001a42 <HAL_NVIC_EnableIRQ>

}
 80014b8:	bf00      	nop
 80014ba:	3720      	adds	r7, #32
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40010800 	.word	0x40010800
 80014c8:	10110000 	.word	0x10110000
 80014cc:	40011000 	.word	0x40011000

080014d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d4:	b672      	cpsid	i
}
 80014d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <Error_Handler+0x8>
	...

080014dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <HAL_MspInit+0x5c>)
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	4a14      	ldr	r2, [pc, #80]	; (8001538 <HAL_MspInit+0x5c>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6193      	str	r3, [r2, #24]
 80014ee:	4b12      	ldr	r3, [pc, #72]	; (8001538 <HAL_MspInit+0x5c>)
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fa:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <HAL_MspInit+0x5c>)
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	4a0e      	ldr	r2, [pc, #56]	; (8001538 <HAL_MspInit+0x5c>)
 8001500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001504:	61d3      	str	r3, [r2, #28]
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <HAL_MspInit+0x5c>)
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <HAL_MspInit+0x60>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	4a04      	ldr	r2, [pc, #16]	; (800153c <HAL_MspInit+0x60>)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152e:	bf00      	nop
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	40021000 	.word	0x40021000
 800153c:	40010000 	.word	0x40010000

08001540 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a1b      	ldr	r2, [pc, #108]	; (80015c8 <HAL_SPI_MspInit+0x88>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d12f      	bne.n	80015c0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001560:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <HAL_SPI_MspInit+0x8c>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	4a19      	ldr	r2, [pc, #100]	; (80015cc <HAL_SPI_MspInit+0x8c>)
 8001566:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800156a:	6193      	str	r3, [r2, #24]
 800156c:	4b17      	ldr	r3, [pc, #92]	; (80015cc <HAL_SPI_MspInit+0x8c>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001578:	4b14      	ldr	r3, [pc, #80]	; (80015cc <HAL_SPI_MspInit+0x8c>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	4a13      	ldr	r2, [pc, #76]	; (80015cc <HAL_SPI_MspInit+0x8c>)
 800157e:	f043 0304 	orr.w	r3, r3, #4
 8001582:	6193      	str	r3, [r2, #24]
 8001584:	4b11      	ldr	r3, [pc, #68]	; (80015cc <HAL_SPI_MspInit+0x8c>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001590:	23a0      	movs	r3, #160	; 0xa0
 8001592:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159c:	f107 0310 	add.w	r3, r7, #16
 80015a0:	4619      	mov	r1, r3
 80015a2:	480b      	ldr	r0, [pc, #44]	; (80015d0 <HAL_SPI_MspInit+0x90>)
 80015a4:	f000 fa68 	bl	8001a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015a8:	2340      	movs	r3, #64	; 0x40
 80015aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b4:	f107 0310 	add.w	r3, r7, #16
 80015b8:	4619      	mov	r1, r3
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <HAL_SPI_MspInit+0x90>)
 80015bc:	f000 fa5c 	bl	8001a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015c0:	bf00      	nop
 80015c2:	3720      	adds	r7, #32
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40013000 	.word	0x40013000
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40010800 	.word	0x40010800

080015d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0310 	add.w	r3, r7, #16
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a15      	ldr	r2, [pc, #84]	; (8001644 <HAL_UART_MspInit+0x70>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d123      	bne.n	800163c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <HAL_UART_MspInit+0x74>)
 80015f6:	69db      	ldr	r3, [r3, #28]
 80015f8:	4a13      	ldr	r2, [pc, #76]	; (8001648 <HAL_UART_MspInit+0x74>)
 80015fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015fe:	61d3      	str	r3, [r2, #28]
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <HAL_UART_MspInit+0x74>)
 8001602:	69db      	ldr	r3, [r3, #28]
 8001604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160c:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <HAL_UART_MspInit+0x74>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	4a0d      	ldr	r2, [pc, #52]	; (8001648 <HAL_UART_MspInit+0x74>)
 8001612:	f043 0304 	orr.w	r3, r3, #4
 8001616:	6193      	str	r3, [r2, #24]
 8001618:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <HAL_UART_MspInit+0x74>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001624:	230c      	movs	r3, #12
 8001626:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001628:	2302      	movs	r3, #2
 800162a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2302      	movs	r3, #2
 800162e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001630:	f107 0310 	add.w	r3, r7, #16
 8001634:	4619      	mov	r1, r3
 8001636:	4805      	ldr	r0, [pc, #20]	; (800164c <HAL_UART_MspInit+0x78>)
 8001638:	f000 fa1e 	bl	8001a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800163c:	bf00      	nop
 800163e:	3720      	adds	r7, #32
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40004400 	.word	0x40004400
 8001648:	40021000 	.word	0x40021000
 800164c:	40010800 	.word	0x40010800

08001650 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001654:	4b0d      	ldr	r3, [pc, #52]	; (800168c <SDTimer_Handler+0x3c>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d006      	beq.n	800166c <SDTimer_Handler+0x1c>
    Timer1--;
 800165e:	4b0b      	ldr	r3, [pc, #44]	; (800168c <SDTimer_Handler+0x3c>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	3b01      	subs	r3, #1
 8001666:	b2da      	uxtb	r2, r3
 8001668:	4b08      	ldr	r3, [pc, #32]	; (800168c <SDTimer_Handler+0x3c>)
 800166a:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <SDTimer_Handler+0x40>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d006      	beq.n	8001684 <SDTimer_Handler+0x34>
    Timer2--;
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <SDTimer_Handler+0x40>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	b2db      	uxtb	r3, r3
 800167c:	3b01      	subs	r3, #1
 800167e:	b2da      	uxtb	r2, r3
 8001680:	4b03      	ldr	r3, [pc, #12]	; (8001690 <SDTimer_Handler+0x40>)
 8001682:	701a      	strb	r2, [r3, #0]
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	2000214c 	.word	0x2000214c
 8001690:	2000214d 	.word	0x2000214d

08001694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <NMI_Handler+0x4>

0800169a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800169e:	e7fe      	b.n	800169e <HardFault_Handler+0x4>

080016a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <MemManage_Handler+0x4>

080016a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016aa:	e7fe      	b.n	80016aa <BusFault_Handler+0x4>

080016ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <UsageFault_Handler+0x4>

080016b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr

080016be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr

080016ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr

080016d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	SDTimer_Handler();
 80016da:	f7ff ffb9 	bl	8001650 <SDTimer_Handler>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016de:	f000 f87d 	bl	80017dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80016ea:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016ee:	f000 fb5f 	bl	8001db0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
	...

08001704 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001704:	480c      	ldr	r0, [pc, #48]	; (8001738 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001706:	490d      	ldr	r1, [pc, #52]	; (800173c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001708:	4a0d      	ldr	r2, [pc, #52]	; (8001740 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800170c:	e002      	b.n	8001714 <LoopCopyDataInit>

0800170e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001712:	3304      	adds	r3, #4

08001714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001718:	d3f9      	bcc.n	800170e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800171a:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800171c:	4c0a      	ldr	r4, [pc, #40]	; (8001748 <LoopFillZerobss+0x22>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001720:	e001      	b.n	8001726 <LoopFillZerobss>

08001722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001724:	3204      	adds	r2, #4

08001726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001728:	d3fb      	bcc.n	8001722 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800172a:	f7ff ffe4 	bl	80016f6 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800172e:	f005 fabf 	bl	8006cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001732:	f7ff fd01 	bl	8001138 <main>
  bx lr
 8001736:	4770      	bx	lr
  ldr r0, =_sdata
 8001738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800173c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001740:	080073bc 	.word	0x080073bc
  ldr r2, =_sbss
 8001744:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001748:	20002388 	.word	0x20002388

0800174c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800174c:	e7fe      	b.n	800174c <ADC1_2_IRQHandler>
	...

08001750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <HAL_Init+0x28>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a07      	ldr	r2, [pc, #28]	; (8001778 <HAL_Init+0x28>)
 800175a:	f043 0310 	orr.w	r3, r3, #16
 800175e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001760:	2003      	movs	r0, #3
 8001762:	f000 f947 	bl	80019f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001766:	2000      	movs	r0, #0
 8001768:	f000 f808 	bl	800177c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800176c:	f7ff feb6 	bl	80014dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40022000 	.word	0x40022000

0800177c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <HAL_InitTick+0x54>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_InitTick+0x58>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	4619      	mov	r1, r3
 800178e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001792:	fbb3 f3f1 	udiv	r3, r3, r1
 8001796:	fbb2 f3f3 	udiv	r3, r2, r3
 800179a:	4618      	mov	r0, r3
 800179c:	f000 f95f 	bl	8001a5e <HAL_SYSTICK_Config>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e00e      	b.n	80017c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b0f      	cmp	r3, #15
 80017ae:	d80a      	bhi.n	80017c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b0:	2200      	movs	r2, #0
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017b8:	f000 f927 	bl	8001a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017bc:	4a06      	ldr	r2, [pc, #24]	; (80017d8 <HAL_InitTick+0x5c>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e000      	b.n	80017c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000004 	.word	0x20000004
 80017d4:	2000000c 	.word	0x2000000c
 80017d8:	20000008 	.word	0x20000008

080017dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <HAL_IncTick+0x1c>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	461a      	mov	r2, r3
 80017e6:	4b05      	ldr	r3, [pc, #20]	; (80017fc <HAL_IncTick+0x20>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4413      	add	r3, r2
 80017ec:	4a03      	ldr	r2, [pc, #12]	; (80017fc <HAL_IncTick+0x20>)
 80017ee:	6013      	str	r3, [r2, #0]
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr
 80017f8:	2000000c 	.word	0x2000000c
 80017fc:	20002150 	.word	0x20002150

08001800 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return uwTick;
 8001804:	4b02      	ldr	r3, [pc, #8]	; (8001810 <HAL_GetTick+0x10>)
 8001806:	681b      	ldr	r3, [r3, #0]
}
 8001808:	4618      	mov	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr
 8001810:	20002150 	.word	0x20002150

08001814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800181c:	f7ff fff0 	bl	8001800 <HAL_GetTick>
 8001820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800182c:	d005      	beq.n	800183a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800182e:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <HAL_Delay+0x44>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	461a      	mov	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4413      	add	r3, r2
 8001838:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800183a:	bf00      	nop
 800183c:	f7ff ffe0 	bl	8001800 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	429a      	cmp	r2, r3
 800184a:	d8f7      	bhi.n	800183c <HAL_Delay+0x28>
  {
  }
}
 800184c:	bf00      	nop
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	2000000c 	.word	0x2000000c

0800185c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <__NVIC_SetPriorityGrouping+0x44>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001878:	4013      	ands	r3, r2
 800187a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001884:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800188c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188e:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	60d3      	str	r3, [r2, #12]
}
 8001894:	bf00      	nop
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a8:	4b04      	ldr	r3, [pc, #16]	; (80018bc <__NVIC_GetPriorityGrouping+0x18>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	f003 0307 	and.w	r3, r3, #7
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	db0b      	blt.n	80018ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	f003 021f 	and.w	r2, r3, #31
 80018d8:	4906      	ldr	r1, [pc, #24]	; (80018f4 <__NVIC_EnableIRQ+0x34>)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	095b      	lsrs	r3, r3, #5
 80018e0:	2001      	movs	r0, #1
 80018e2:	fa00 f202 	lsl.w	r2, r0, r2
 80018e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	e000e100 	.word	0xe000e100

080018f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	6039      	str	r1, [r7, #0]
 8001902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001908:	2b00      	cmp	r3, #0
 800190a:	db0a      	blt.n	8001922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	b2da      	uxtb	r2, r3
 8001910:	490c      	ldr	r1, [pc, #48]	; (8001944 <__NVIC_SetPriority+0x4c>)
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	0112      	lsls	r2, r2, #4
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	440b      	add	r3, r1
 800191c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001920:	e00a      	b.n	8001938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4908      	ldr	r1, [pc, #32]	; (8001948 <__NVIC_SetPriority+0x50>)
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	3b04      	subs	r3, #4
 8001930:	0112      	lsls	r2, r2, #4
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	440b      	add	r3, r1
 8001936:	761a      	strb	r2, [r3, #24]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000e100 	.word	0xe000e100
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800194c:	b480      	push	{r7}
 800194e:	b089      	sub	sp, #36	; 0x24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f1c3 0307 	rsb	r3, r3, #7
 8001966:	2b04      	cmp	r3, #4
 8001968:	bf28      	it	cs
 800196a:	2304      	movcs	r3, #4
 800196c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3304      	adds	r3, #4
 8001972:	2b06      	cmp	r3, #6
 8001974:	d902      	bls.n	800197c <NVIC_EncodePriority+0x30>
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3b03      	subs	r3, #3
 800197a:	e000      	b.n	800197e <NVIC_EncodePriority+0x32>
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001980:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43da      	mvns	r2, r3
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	401a      	ands	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001994:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	fa01 f303 	lsl.w	r3, r1, r3
 800199e:	43d9      	mvns	r1, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a4:	4313      	orrs	r3, r2
         );
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3724      	adds	r7, #36	; 0x24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr

080019b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019c0:	d301      	bcc.n	80019c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019c2:	2301      	movs	r3, #1
 80019c4:	e00f      	b.n	80019e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c6:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <SysTick_Config+0x40>)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ce:	210f      	movs	r1, #15
 80019d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019d4:	f7ff ff90 	bl	80018f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <SysTick_Config+0x40>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019de:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <SysTick_Config+0x40>)
 80019e0:	2207      	movs	r2, #7
 80019e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	e000e010 	.word	0xe000e010

080019f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ff2d 	bl	800185c <__NVIC_SetPriorityGrouping>
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b086      	sub	sp, #24
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4603      	mov	r3, r0
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
 8001a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a1c:	f7ff ff42 	bl	80018a4 <__NVIC_GetPriorityGrouping>
 8001a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	6978      	ldr	r0, [r7, #20]
 8001a28:	f7ff ff90 	bl	800194c <NVIC_EncodePriority>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff5f 	bl	80018f8 <__NVIC_SetPriority>
}
 8001a3a:	bf00      	nop
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff35 	bl	80018c0 <__NVIC_EnableIRQ>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ffa2 	bl	80019b0 <SysTick_Config>
 8001a6c:	4603      	mov	r3, r0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b08b      	sub	sp, #44	; 0x2c
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a82:	2300      	movs	r3, #0
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a86:	2300      	movs	r3, #0
 8001a88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a8a:	e169      	b.n	8001d60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	69fa      	ldr	r2, [r7, #28]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	f040 8158 	bne.w	8001d5a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	4a9a      	ldr	r2, [pc, #616]	; (8001d18 <HAL_GPIO_Init+0x2a0>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d05e      	beq.n	8001b72 <HAL_GPIO_Init+0xfa>
 8001ab4:	4a98      	ldr	r2, [pc, #608]	; (8001d18 <HAL_GPIO_Init+0x2a0>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d875      	bhi.n	8001ba6 <HAL_GPIO_Init+0x12e>
 8001aba:	4a98      	ldr	r2, [pc, #608]	; (8001d1c <HAL_GPIO_Init+0x2a4>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d058      	beq.n	8001b72 <HAL_GPIO_Init+0xfa>
 8001ac0:	4a96      	ldr	r2, [pc, #600]	; (8001d1c <HAL_GPIO_Init+0x2a4>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d86f      	bhi.n	8001ba6 <HAL_GPIO_Init+0x12e>
 8001ac6:	4a96      	ldr	r2, [pc, #600]	; (8001d20 <HAL_GPIO_Init+0x2a8>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d052      	beq.n	8001b72 <HAL_GPIO_Init+0xfa>
 8001acc:	4a94      	ldr	r2, [pc, #592]	; (8001d20 <HAL_GPIO_Init+0x2a8>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d869      	bhi.n	8001ba6 <HAL_GPIO_Init+0x12e>
 8001ad2:	4a94      	ldr	r2, [pc, #592]	; (8001d24 <HAL_GPIO_Init+0x2ac>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d04c      	beq.n	8001b72 <HAL_GPIO_Init+0xfa>
 8001ad8:	4a92      	ldr	r2, [pc, #584]	; (8001d24 <HAL_GPIO_Init+0x2ac>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d863      	bhi.n	8001ba6 <HAL_GPIO_Init+0x12e>
 8001ade:	4a92      	ldr	r2, [pc, #584]	; (8001d28 <HAL_GPIO_Init+0x2b0>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d046      	beq.n	8001b72 <HAL_GPIO_Init+0xfa>
 8001ae4:	4a90      	ldr	r2, [pc, #576]	; (8001d28 <HAL_GPIO_Init+0x2b0>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d85d      	bhi.n	8001ba6 <HAL_GPIO_Init+0x12e>
 8001aea:	2b12      	cmp	r3, #18
 8001aec:	d82a      	bhi.n	8001b44 <HAL_GPIO_Init+0xcc>
 8001aee:	2b12      	cmp	r3, #18
 8001af0:	d859      	bhi.n	8001ba6 <HAL_GPIO_Init+0x12e>
 8001af2:	a201      	add	r2, pc, #4	; (adr r2, 8001af8 <HAL_GPIO_Init+0x80>)
 8001af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af8:	08001b73 	.word	0x08001b73
 8001afc:	08001b4d 	.word	0x08001b4d
 8001b00:	08001b5f 	.word	0x08001b5f
 8001b04:	08001ba1 	.word	0x08001ba1
 8001b08:	08001ba7 	.word	0x08001ba7
 8001b0c:	08001ba7 	.word	0x08001ba7
 8001b10:	08001ba7 	.word	0x08001ba7
 8001b14:	08001ba7 	.word	0x08001ba7
 8001b18:	08001ba7 	.word	0x08001ba7
 8001b1c:	08001ba7 	.word	0x08001ba7
 8001b20:	08001ba7 	.word	0x08001ba7
 8001b24:	08001ba7 	.word	0x08001ba7
 8001b28:	08001ba7 	.word	0x08001ba7
 8001b2c:	08001ba7 	.word	0x08001ba7
 8001b30:	08001ba7 	.word	0x08001ba7
 8001b34:	08001ba7 	.word	0x08001ba7
 8001b38:	08001ba7 	.word	0x08001ba7
 8001b3c:	08001b55 	.word	0x08001b55
 8001b40:	08001b69 	.word	0x08001b69
 8001b44:	4a79      	ldr	r2, [pc, #484]	; (8001d2c <HAL_GPIO_Init+0x2b4>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d013      	beq.n	8001b72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b4a:	e02c      	b.n	8001ba6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	623b      	str	r3, [r7, #32]
          break;
 8001b52:	e029      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	623b      	str	r3, [r7, #32]
          break;
 8001b5c:	e024      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	3308      	adds	r3, #8
 8001b64:	623b      	str	r3, [r7, #32]
          break;
 8001b66:	e01f      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	330c      	adds	r3, #12
 8001b6e:	623b      	str	r3, [r7, #32]
          break;
 8001b70:	e01a      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d102      	bne.n	8001b80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b7a:	2304      	movs	r3, #4
 8001b7c:	623b      	str	r3, [r7, #32]
          break;
 8001b7e:	e013      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d105      	bne.n	8001b94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b88:	2308      	movs	r3, #8
 8001b8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69fa      	ldr	r2, [r7, #28]
 8001b90:	611a      	str	r2, [r3, #16]
          break;
 8001b92:	e009      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b94:	2308      	movs	r3, #8
 8001b96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69fa      	ldr	r2, [r7, #28]
 8001b9c:	615a      	str	r2, [r3, #20]
          break;
 8001b9e:	e003      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	623b      	str	r3, [r7, #32]
          break;
 8001ba4:	e000      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
          break;
 8001ba6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	2bff      	cmp	r3, #255	; 0xff
 8001bac:	d801      	bhi.n	8001bb2 <HAL_GPIO_Init+0x13a>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	e001      	b.n	8001bb6 <HAL_GPIO_Init+0x13e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	2bff      	cmp	r3, #255	; 0xff
 8001bbc:	d802      	bhi.n	8001bc4 <HAL_GPIO_Init+0x14c>
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	e002      	b.n	8001bca <HAL_GPIO_Init+0x152>
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	3b08      	subs	r3, #8
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	210f      	movs	r1, #15
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	401a      	ands	r2, r3
 8001bdc:	6a39      	ldr	r1, [r7, #32]
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	fa01 f303 	lsl.w	r3, r1, r3
 8001be4:	431a      	orrs	r2, r3
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 80b1 	beq.w	8001d5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bf8:	4b4d      	ldr	r3, [pc, #308]	; (8001d30 <HAL_GPIO_Init+0x2b8>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	4a4c      	ldr	r2, [pc, #304]	; (8001d30 <HAL_GPIO_Init+0x2b8>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	6193      	str	r3, [r2, #24]
 8001c04:	4b4a      	ldr	r3, [pc, #296]	; (8001d30 <HAL_GPIO_Init+0x2b8>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c10:	4a48      	ldr	r2, [pc, #288]	; (8001d34 <HAL_GPIO_Init+0x2bc>)
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	089b      	lsrs	r3, r3, #2
 8001c16:	3302      	adds	r3, #2
 8001c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	220f      	movs	r2, #15
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	4013      	ands	r3, r2
 8001c32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a40      	ldr	r2, [pc, #256]	; (8001d38 <HAL_GPIO_Init+0x2c0>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d013      	beq.n	8001c64 <HAL_GPIO_Init+0x1ec>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a3f      	ldr	r2, [pc, #252]	; (8001d3c <HAL_GPIO_Init+0x2c4>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d00d      	beq.n	8001c60 <HAL_GPIO_Init+0x1e8>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a3e      	ldr	r2, [pc, #248]	; (8001d40 <HAL_GPIO_Init+0x2c8>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d007      	beq.n	8001c5c <HAL_GPIO_Init+0x1e4>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a3d      	ldr	r2, [pc, #244]	; (8001d44 <HAL_GPIO_Init+0x2cc>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d101      	bne.n	8001c58 <HAL_GPIO_Init+0x1e0>
 8001c54:	2303      	movs	r3, #3
 8001c56:	e006      	b.n	8001c66 <HAL_GPIO_Init+0x1ee>
 8001c58:	2304      	movs	r3, #4
 8001c5a:	e004      	b.n	8001c66 <HAL_GPIO_Init+0x1ee>
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	e002      	b.n	8001c66 <HAL_GPIO_Init+0x1ee>
 8001c60:	2301      	movs	r3, #1
 8001c62:	e000      	b.n	8001c66 <HAL_GPIO_Init+0x1ee>
 8001c64:	2300      	movs	r3, #0
 8001c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c68:	f002 0203 	and.w	r2, r2, #3
 8001c6c:	0092      	lsls	r2, r2, #2
 8001c6e:	4093      	lsls	r3, r2
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c76:	492f      	ldr	r1, [pc, #188]	; (8001d34 <HAL_GPIO_Init+0x2bc>)
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	089b      	lsrs	r3, r3, #2
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d006      	beq.n	8001c9e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c90:	4b2d      	ldr	r3, [pc, #180]	; (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	492c      	ldr	r1, [pc, #176]	; (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	600b      	str	r3, [r1, #0]
 8001c9c:	e006      	b.n	8001cac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c9e:	4b2a      	ldr	r3, [pc, #168]	; (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	4928      	ldr	r1, [pc, #160]	; (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001ca8:	4013      	ands	r3, r2
 8001caa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d006      	beq.n	8001cc6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cb8:	4b23      	ldr	r3, [pc, #140]	; (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	4922      	ldr	r1, [pc, #136]	; (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	604b      	str	r3, [r1, #4]
 8001cc4:	e006      	b.n	8001cd4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cc6:	4b20      	ldr	r3, [pc, #128]	; (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	491e      	ldr	r1, [pc, #120]	; (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d006      	beq.n	8001cee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ce0:	4b19      	ldr	r3, [pc, #100]	; (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	4918      	ldr	r1, [pc, #96]	; (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	608b      	str	r3, [r1, #8]
 8001cec:	e006      	b.n	8001cfc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cee:	4b16      	ldr	r3, [pc, #88]	; (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	4914      	ldr	r1, [pc, #80]	; (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d021      	beq.n	8001d4c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d08:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001d0a:	68da      	ldr	r2, [r3, #12]
 8001d0c:	490e      	ldr	r1, [pc, #56]	; (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	60cb      	str	r3, [r1, #12]
 8001d14:	e021      	b.n	8001d5a <HAL_GPIO_Init+0x2e2>
 8001d16:	bf00      	nop
 8001d18:	10320000 	.word	0x10320000
 8001d1c:	10310000 	.word	0x10310000
 8001d20:	10220000 	.word	0x10220000
 8001d24:	10210000 	.word	0x10210000
 8001d28:	10120000 	.word	0x10120000
 8001d2c:	10110000 	.word	0x10110000
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40010000 	.word	0x40010000
 8001d38:	40010800 	.word	0x40010800
 8001d3c:	40010c00 	.word	0x40010c00
 8001d40:	40011000 	.word	0x40011000
 8001d44:	40011400 	.word	0x40011400
 8001d48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_GPIO_Init+0x304>)
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	4909      	ldr	r1, [pc, #36]	; (8001d7c <HAL_GPIO_Init+0x304>)
 8001d56:	4013      	ands	r3, r2
 8001d58:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	fa22 f303 	lsr.w	r3, r2, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f47f ae8e 	bne.w	8001a8c <HAL_GPIO_Init+0x14>
  }
}
 8001d70:	bf00      	nop
 8001d72:	bf00      	nop
 8001d74:	372c      	adds	r7, #44	; 0x2c
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr
 8001d7c:	40010400 	.word	0x40010400

08001d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	807b      	strh	r3, [r7, #2]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d90:	787b      	ldrb	r3, [r7, #1]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d96:	887a      	ldrh	r2, [r7, #2]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d9c:	e003      	b.n	8001da6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d9e:	887b      	ldrh	r3, [r7, #2]
 8001da0:	041a      	lsls	r2, r3, #16
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	611a      	str	r2, [r3, #16]
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001dba:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dbc:	695a      	ldr	r2, [r3, #20]
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d006      	beq.n	8001dd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dc6:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dc8:	88fb      	ldrh	r3, [r7, #6]
 8001dca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dcc:	88fb      	ldrh	r3, [r7, #6]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 f806 	bl	8001de0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40010400 	.word	0x40010400

08001de0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr

08001df4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e272      	b.n	80022ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 8087 	beq.w	8001f22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e14:	4b92      	ldr	r3, [pc, #584]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 030c 	and.w	r3, r3, #12
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	d00c      	beq.n	8001e3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e20:	4b8f      	ldr	r3, [pc, #572]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 030c 	and.w	r3, r3, #12
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d112      	bne.n	8001e52 <HAL_RCC_OscConfig+0x5e>
 8001e2c:	4b8c      	ldr	r3, [pc, #560]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e38:	d10b      	bne.n	8001e52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3a:	4b89      	ldr	r3, [pc, #548]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d06c      	beq.n	8001f20 <HAL_RCC_OscConfig+0x12c>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d168      	bne.n	8001f20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e24c      	b.n	80022ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e5a:	d106      	bne.n	8001e6a <HAL_RCC_OscConfig+0x76>
 8001e5c:	4b80      	ldr	r3, [pc, #512]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a7f      	ldr	r2, [pc, #508]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	e02e      	b.n	8001ec8 <HAL_RCC_OscConfig+0xd4>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10c      	bne.n	8001e8c <HAL_RCC_OscConfig+0x98>
 8001e72:	4b7b      	ldr	r3, [pc, #492]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a7a      	ldr	r2, [pc, #488]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	4b78      	ldr	r3, [pc, #480]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a77      	ldr	r2, [pc, #476]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	e01d      	b.n	8001ec8 <HAL_RCC_OscConfig+0xd4>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e94:	d10c      	bne.n	8001eb0 <HAL_RCC_OscConfig+0xbc>
 8001e96:	4b72      	ldr	r3, [pc, #456]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a71      	ldr	r2, [pc, #452]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	4b6f      	ldr	r3, [pc, #444]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a6e      	ldr	r2, [pc, #440]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	e00b      	b.n	8001ec8 <HAL_RCC_OscConfig+0xd4>
 8001eb0:	4b6b      	ldr	r3, [pc, #428]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a6a      	ldr	r2, [pc, #424]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eba:	6013      	str	r3, [r2, #0]
 8001ebc:	4b68      	ldr	r3, [pc, #416]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a67      	ldr	r2, [pc, #412]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ec6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d013      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed0:	f7ff fc96 	bl	8001800 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed8:	f7ff fc92 	bl	8001800 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b64      	cmp	r3, #100	; 0x64
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e200      	b.n	80022ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eea:	4b5d      	ldr	r3, [pc, #372]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0f0      	beq.n	8001ed8 <HAL_RCC_OscConfig+0xe4>
 8001ef6:	e014      	b.n	8001f22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7ff fc82 	bl	8001800 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f00:	f7ff fc7e 	bl	8001800 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b64      	cmp	r3, #100	; 0x64
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e1ec      	b.n	80022ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f12:	4b53      	ldr	r3, [pc, #332]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x10c>
 8001f1e:	e000      	b.n	8001f22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d063      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f2e:	4b4c      	ldr	r3, [pc, #304]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 030c 	and.w	r3, r3, #12
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00b      	beq.n	8001f52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f3a:	4b49      	ldr	r3, [pc, #292]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
 8001f42:	2b08      	cmp	r3, #8
 8001f44:	d11c      	bne.n	8001f80 <HAL_RCC_OscConfig+0x18c>
 8001f46:	4b46      	ldr	r3, [pc, #280]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d116      	bne.n	8001f80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f52:	4b43      	ldr	r3, [pc, #268]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d005      	beq.n	8001f6a <HAL_RCC_OscConfig+0x176>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d001      	beq.n	8001f6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e1c0      	b.n	80022ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6a:	4b3d      	ldr	r3, [pc, #244]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4939      	ldr	r1, [pc, #228]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7e:	e03a      	b.n	8001ff6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d020      	beq.n	8001fca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f88:	4b36      	ldr	r3, [pc, #216]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8e:	f7ff fc37 	bl	8001800 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f96:	f7ff fc33 	bl	8001800 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e1a1      	b.n	80022ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa8:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0f0      	beq.n	8001f96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb4:	4b2a      	ldr	r3, [pc, #168]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	4927      	ldr	r1, [pc, #156]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	600b      	str	r3, [r1, #0]
 8001fc8:	e015      	b.n	8001ff6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fca:	4b26      	ldr	r3, [pc, #152]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd0:	f7ff fc16 	bl	8001800 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd8:	f7ff fc12 	bl	8001800 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e180      	b.n	80022ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fea:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f0      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d03a      	beq.n	8002078 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d019      	beq.n	800203e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800200a:	4b17      	ldr	r3, [pc, #92]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 800200c:	2201      	movs	r2, #1
 800200e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002010:	f7ff fbf6 	bl	8001800 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002018:	f7ff fbf2 	bl	8001800 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e160      	b.n	80022ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800202a:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f0      	beq.n	8002018 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002036:	2001      	movs	r0, #1
 8002038:	f000 fad8 	bl	80025ec <RCC_Delay>
 800203c:	e01c      	b.n	8002078 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800203e:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002044:	f7ff fbdc 	bl	8001800 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800204a:	e00f      	b.n	800206c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800204c:	f7ff fbd8 	bl	8001800 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d908      	bls.n	800206c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e146      	b.n	80022ec <HAL_RCC_OscConfig+0x4f8>
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000
 8002064:	42420000 	.word	0x42420000
 8002068:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800206c:	4b92      	ldr	r3, [pc, #584]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1e9      	bne.n	800204c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 80a6 	beq.w	80021d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002086:	2300      	movs	r3, #0
 8002088:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800208a:	4b8b      	ldr	r3, [pc, #556]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10d      	bne.n	80020b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002096:	4b88      	ldr	r3, [pc, #544]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	4a87      	ldr	r2, [pc, #540]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 800209c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a0:	61d3      	str	r3, [r2, #28]
 80020a2:	4b85      	ldr	r3, [pc, #532]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ae:	2301      	movs	r3, #1
 80020b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b2:	4b82      	ldr	r3, [pc, #520]	; (80022bc <HAL_RCC_OscConfig+0x4c8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d118      	bne.n	80020f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020be:	4b7f      	ldr	r3, [pc, #508]	; (80022bc <HAL_RCC_OscConfig+0x4c8>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a7e      	ldr	r2, [pc, #504]	; (80022bc <HAL_RCC_OscConfig+0x4c8>)
 80020c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ca:	f7ff fb99 	bl	8001800 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d2:	f7ff fb95 	bl	8001800 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b64      	cmp	r3, #100	; 0x64
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e103      	b.n	80022ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e4:	4b75      	ldr	r3, [pc, #468]	; (80022bc <HAL_RCC_OscConfig+0x4c8>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0f0      	beq.n	80020d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d106      	bne.n	8002106 <HAL_RCC_OscConfig+0x312>
 80020f8:	4b6f      	ldr	r3, [pc, #444]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	4a6e      	ldr	r2, [pc, #440]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	6213      	str	r3, [r2, #32]
 8002104:	e02d      	b.n	8002162 <HAL_RCC_OscConfig+0x36e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10c      	bne.n	8002128 <HAL_RCC_OscConfig+0x334>
 800210e:	4b6a      	ldr	r3, [pc, #424]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	4a69      	ldr	r2, [pc, #420]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 8002114:	f023 0301 	bic.w	r3, r3, #1
 8002118:	6213      	str	r3, [r2, #32]
 800211a:	4b67      	ldr	r3, [pc, #412]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	4a66      	ldr	r2, [pc, #408]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 8002120:	f023 0304 	bic.w	r3, r3, #4
 8002124:	6213      	str	r3, [r2, #32]
 8002126:	e01c      	b.n	8002162 <HAL_RCC_OscConfig+0x36e>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	2b05      	cmp	r3, #5
 800212e:	d10c      	bne.n	800214a <HAL_RCC_OscConfig+0x356>
 8002130:	4b61      	ldr	r3, [pc, #388]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	4a60      	ldr	r2, [pc, #384]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 8002136:	f043 0304 	orr.w	r3, r3, #4
 800213a:	6213      	str	r3, [r2, #32]
 800213c:	4b5e      	ldr	r3, [pc, #376]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	4a5d      	ldr	r2, [pc, #372]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6213      	str	r3, [r2, #32]
 8002148:	e00b      	b.n	8002162 <HAL_RCC_OscConfig+0x36e>
 800214a:	4b5b      	ldr	r3, [pc, #364]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	4a5a      	ldr	r2, [pc, #360]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 8002150:	f023 0301 	bic.w	r3, r3, #1
 8002154:	6213      	str	r3, [r2, #32]
 8002156:	4b58      	ldr	r3, [pc, #352]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	4a57      	ldr	r2, [pc, #348]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 800215c:	f023 0304 	bic.w	r3, r3, #4
 8002160:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d015      	beq.n	8002196 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216a:	f7ff fb49 	bl	8001800 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002170:	e00a      	b.n	8002188 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002172:	f7ff fb45 	bl	8001800 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002180:	4293      	cmp	r3, r2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e0b1      	b.n	80022ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002188:	4b4b      	ldr	r3, [pc, #300]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0ee      	beq.n	8002172 <HAL_RCC_OscConfig+0x37e>
 8002194:	e014      	b.n	80021c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002196:	f7ff fb33 	bl	8001800 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219c:	e00a      	b.n	80021b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219e:	f7ff fb2f 	bl	8001800 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e09b      	b.n	80022ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b4:	4b40      	ldr	r3, [pc, #256]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1ee      	bne.n	800219e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021c0:	7dfb      	ldrb	r3, [r7, #23]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d105      	bne.n	80021d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c6:	4b3c      	ldr	r3, [pc, #240]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	4a3b      	ldr	r2, [pc, #236]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 80021cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 8087 	beq.w	80022ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021dc:	4b36      	ldr	r3, [pc, #216]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 030c 	and.w	r3, r3, #12
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d061      	beq.n	80022ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d146      	bne.n	800227e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f0:	4b33      	ldr	r3, [pc, #204]	; (80022c0 <HAL_RCC_OscConfig+0x4cc>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f6:	f7ff fb03 	bl	8001800 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fe:	f7ff faff 	bl	8001800 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e06d      	b.n	80022ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002210:	4b29      	ldr	r3, [pc, #164]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1f0      	bne.n	80021fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002224:	d108      	bne.n	8002238 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002226:	4b24      	ldr	r3, [pc, #144]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	4921      	ldr	r1, [pc, #132]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 8002234:	4313      	orrs	r3, r2
 8002236:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002238:	4b1f      	ldr	r3, [pc, #124]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a19      	ldr	r1, [r3, #32]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	430b      	orrs	r3, r1
 800224a:	491b      	ldr	r1, [pc, #108]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 800224c:	4313      	orrs	r3, r2
 800224e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002250:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <HAL_RCC_OscConfig+0x4cc>)
 8002252:	2201      	movs	r2, #1
 8002254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002256:	f7ff fad3 	bl	8001800 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225e:	f7ff facf 	bl	8001800 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e03d      	b.n	80022ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002270:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0f0      	beq.n	800225e <HAL_RCC_OscConfig+0x46a>
 800227c:	e035      	b.n	80022ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800227e:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <HAL_RCC_OscConfig+0x4cc>)
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002284:	f7ff fabc 	bl	8001800 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800228c:	f7ff fab8 	bl	8001800 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e026      	b.n	80022ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800229e:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0x498>
 80022aa:	e01e      	b.n	80022ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d107      	bne.n	80022c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e019      	b.n	80022ec <HAL_RCC_OscConfig+0x4f8>
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40007000 	.word	0x40007000
 80022c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_RCC_OscConfig+0x500>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d106      	bne.n	80022e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d001      	beq.n	80022ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000

080022f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0d0      	b.n	80024ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800230c:	4b6a      	ldr	r3, [pc, #424]	; (80024b8 <HAL_RCC_ClockConfig+0x1c0>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d910      	bls.n	800233c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231a:	4b67      	ldr	r3, [pc, #412]	; (80024b8 <HAL_RCC_ClockConfig+0x1c0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f023 0207 	bic.w	r2, r3, #7
 8002322:	4965      	ldr	r1, [pc, #404]	; (80024b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	4313      	orrs	r3, r2
 8002328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800232a:	4b63      	ldr	r3, [pc, #396]	; (80024b8 <HAL_RCC_ClockConfig+0x1c0>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d001      	beq.n	800233c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0b8      	b.n	80024ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d020      	beq.n	800238a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002354:	4b59      	ldr	r3, [pc, #356]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	4a58      	ldr	r2, [pc, #352]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 800235a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800235e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0308 	and.w	r3, r3, #8
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800236c:	4b53      	ldr	r3, [pc, #332]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	4a52      	ldr	r2, [pc, #328]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002372:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002376:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002378:	4b50      	ldr	r3, [pc, #320]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	494d      	ldr	r1, [pc, #308]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002386:	4313      	orrs	r3, r2
 8002388:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d040      	beq.n	8002418 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d107      	bne.n	80023ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239e:	4b47      	ldr	r3, [pc, #284]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d115      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e07f      	b.n	80024ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d107      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b6:	4b41      	ldr	r3, [pc, #260]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d109      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e073      	b.n	80024ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c6:	4b3d      	ldr	r3, [pc, #244]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e06b      	b.n	80024ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023d6:	4b39      	ldr	r3, [pc, #228]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f023 0203 	bic.w	r2, r3, #3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	4936      	ldr	r1, [pc, #216]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023e8:	f7ff fa0a 	bl	8001800 <HAL_GetTick>
 80023ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ee:	e00a      	b.n	8002406 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f0:	f7ff fa06 	bl	8001800 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fe:	4293      	cmp	r3, r2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e053      	b.n	80024ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002406:	4b2d      	ldr	r3, [pc, #180]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 020c 	and.w	r2, r3, #12
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	429a      	cmp	r2, r3
 8002416:	d1eb      	bne.n	80023f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002418:	4b27      	ldr	r3, [pc, #156]	; (80024b8 <HAL_RCC_ClockConfig+0x1c0>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	d210      	bcs.n	8002448 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002426:	4b24      	ldr	r3, [pc, #144]	; (80024b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 0207 	bic.w	r2, r3, #7
 800242e:	4922      	ldr	r1, [pc, #136]	; (80024b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	4313      	orrs	r3, r2
 8002434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002436:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d001      	beq.n	8002448 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e032      	b.n	80024ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002454:	4b19      	ldr	r3, [pc, #100]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	4916      	ldr	r1, [pc, #88]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002462:	4313      	orrs	r3, r2
 8002464:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d009      	beq.n	8002486 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002472:	4b12      	ldr	r3, [pc, #72]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	490e      	ldr	r1, [pc, #56]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002482:	4313      	orrs	r3, r2
 8002484:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002486:	f000 f821 	bl	80024cc <HAL_RCC_GetSysClockFreq>
 800248a:	4602      	mov	r2, r0
 800248c:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	091b      	lsrs	r3, r3, #4
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	490a      	ldr	r1, [pc, #40]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002498:	5ccb      	ldrb	r3, [r1, r3]
 800249a:	fa22 f303 	lsr.w	r3, r2, r3
 800249e:	4a09      	ldr	r2, [pc, #36]	; (80024c4 <HAL_RCC_ClockConfig+0x1cc>)
 80024a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024a2:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <HAL_RCC_ClockConfig+0x1d0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff f968 	bl	800177c <HAL_InitTick>

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40022000 	.word	0x40022000
 80024bc:	40021000 	.word	0x40021000
 80024c0:	08006e4c 	.word	0x08006e4c
 80024c4:	20000004 	.word	0x20000004
 80024c8:	20000008 	.word	0x20000008

080024cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024cc:	b490      	push	{r4, r7}
 80024ce:	b08a      	sub	sp, #40	; 0x28
 80024d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80024d2:	4b29      	ldr	r3, [pc, #164]	; (8002578 <HAL_RCC_GetSysClockFreq+0xac>)
 80024d4:	1d3c      	adds	r4, r7, #4
 80024d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80024dc:	f240 2301 	movw	r3, #513	; 0x201
 80024e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
 80024e6:	2300      	movs	r3, #0
 80024e8:	61bb      	str	r3, [r7, #24]
 80024ea:	2300      	movs	r3, #0
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024f6:	4b21      	ldr	r3, [pc, #132]	; (800257c <HAL_RCC_GetSysClockFreq+0xb0>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f003 030c 	and.w	r3, r3, #12
 8002502:	2b04      	cmp	r3, #4
 8002504:	d002      	beq.n	800250c <HAL_RCC_GetSysClockFreq+0x40>
 8002506:	2b08      	cmp	r3, #8
 8002508:	d003      	beq.n	8002512 <HAL_RCC_GetSysClockFreq+0x46>
 800250a:	e02b      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800250c:	4b1c      	ldr	r3, [pc, #112]	; (8002580 <HAL_RCC_GetSysClockFreq+0xb4>)
 800250e:	623b      	str	r3, [r7, #32]
      break;
 8002510:	e02b      	b.n	800256a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	0c9b      	lsrs	r3, r3, #18
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	3328      	adds	r3, #40	; 0x28
 800251c:	443b      	add	r3, r7
 800251e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002522:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d012      	beq.n	8002554 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800252e:	4b13      	ldr	r3, [pc, #76]	; (800257c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	0c5b      	lsrs	r3, r3, #17
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	3328      	adds	r3, #40	; 0x28
 800253a:	443b      	add	r3, r7
 800253c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002540:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	4a0e      	ldr	r2, [pc, #56]	; (8002580 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002546:	fb03 f202 	mul.w	r2, r3, r2
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
 8002552:	e004      	b.n	800255e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	4a0b      	ldr	r2, [pc, #44]	; (8002584 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002558:	fb02 f303 	mul.w	r3, r2, r3
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	623b      	str	r3, [r7, #32]
      break;
 8002562:	e002      	b.n	800256a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002564:	4b06      	ldr	r3, [pc, #24]	; (8002580 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002566:	623b      	str	r3, [r7, #32]
      break;
 8002568:	bf00      	nop
    }
  }
  return sysclockfreq;
 800256a:	6a3b      	ldr	r3, [r7, #32]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3728      	adds	r7, #40	; 0x28
 8002570:	46bd      	mov	sp, r7
 8002572:	bc90      	pop	{r4, r7}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	08006df4 	.word	0x08006df4
 800257c:	40021000 	.word	0x40021000
 8002580:	007a1200 	.word	0x007a1200
 8002584:	003d0900 	.word	0x003d0900

08002588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800258c:	4b02      	ldr	r3, [pc, #8]	; (8002598 <HAL_RCC_GetHCLKFreq+0x10>)
 800258e:	681b      	ldr	r3, [r3, #0]
}
 8002590:	4618      	mov	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr
 8002598:	20000004 	.word	0x20000004

0800259c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025a0:	f7ff fff2 	bl	8002588 <HAL_RCC_GetHCLKFreq>
 80025a4:	4602      	mov	r2, r0
 80025a6:	4b05      	ldr	r3, [pc, #20]	; (80025bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	0a1b      	lsrs	r3, r3, #8
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	4903      	ldr	r1, [pc, #12]	; (80025c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025b2:	5ccb      	ldrb	r3, [r1, r3]
 80025b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40021000 	.word	0x40021000
 80025c0:	08006e5c 	.word	0x08006e5c

080025c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025c8:	f7ff ffde 	bl	8002588 <HAL_RCC_GetHCLKFreq>
 80025cc:	4602      	mov	r2, r0
 80025ce:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	0adb      	lsrs	r3, r3, #11
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	4903      	ldr	r1, [pc, #12]	; (80025e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025da:	5ccb      	ldrb	r3, [r1, r3]
 80025dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40021000 	.word	0x40021000
 80025e8:	08006e5c 	.word	0x08006e5c

080025ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025f4:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <RCC_Delay+0x34>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a0a      	ldr	r2, [pc, #40]	; (8002624 <RCC_Delay+0x38>)
 80025fa:	fba2 2303 	umull	r2, r3, r2, r3
 80025fe:	0a5b      	lsrs	r3, r3, #9
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	fb02 f303 	mul.w	r3, r2, r3
 8002606:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002608:	bf00      	nop
  }
  while (Delay --);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1e5a      	subs	r2, r3, #1
 800260e:	60fa      	str	r2, [r7, #12]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1f9      	bne.n	8002608 <RCC_Delay+0x1c>
}
 8002614:	bf00      	nop
 8002616:	bf00      	nop
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr
 8002620:	20000004 	.word	0x20000004
 8002624:	10624dd3 	.word	0x10624dd3

08002628 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e076      	b.n	8002728 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	2b00      	cmp	r3, #0
 8002640:	d108      	bne.n	8002654 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800264a:	d009      	beq.n	8002660 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	61da      	str	r2, [r3, #28]
 8002652:	e005      	b.n	8002660 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d106      	bne.n	8002680 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7fe ff60 	bl	8001540 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2202      	movs	r2, #2
 8002684:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002696:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	431a      	orrs	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026d0:	431a      	orrs	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e4:	ea42 0103 	orr.w	r1, r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	0c1a      	lsrs	r2, r3, #16
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f002 0204 	and.w	r2, r2, #4
 8002706:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	69da      	ldr	r2, [r3, #28]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002716:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b088      	sub	sp, #32
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	603b      	str	r3, [r7, #0]
 800273c:	4613      	mov	r3, r2
 800273e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800274a:	2b01      	cmp	r3, #1
 800274c:	d101      	bne.n	8002752 <HAL_SPI_Transmit+0x22>
 800274e:	2302      	movs	r3, #2
 8002750:	e126      	b.n	80029a0 <HAL_SPI_Transmit+0x270>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800275a:	f7ff f851 	bl	8001800 <HAL_GetTick>
 800275e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002760:	88fb      	ldrh	r3, [r7, #6]
 8002762:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b01      	cmp	r3, #1
 800276e:	d002      	beq.n	8002776 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002770:	2302      	movs	r3, #2
 8002772:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002774:	e10b      	b.n	800298e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <HAL_SPI_Transmit+0x52>
 800277c:	88fb      	ldrh	r3, [r7, #6]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d102      	bne.n	8002788 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002786:	e102      	b.n	800298e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2203      	movs	r2, #3
 800278c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	88fa      	ldrh	r2, [r7, #6]
 80027a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	88fa      	ldrh	r2, [r7, #6]
 80027a6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027ce:	d10f      	bne.n	80027f0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fa:	2b40      	cmp	r3, #64	; 0x40
 80027fc:	d007      	beq.n	800280e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800280c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002816:	d14b      	bne.n	80028b0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d002      	beq.n	8002826 <HAL_SPI_Transmit+0xf6>
 8002820:	8afb      	ldrh	r3, [r7, #22]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d13e      	bne.n	80028a4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	881a      	ldrh	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	1c9a      	adds	r2, r3, #2
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002840:	b29b      	uxth	r3, r3
 8002842:	3b01      	subs	r3, #1
 8002844:	b29a      	uxth	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800284a:	e02b      	b.n	80028a4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b02      	cmp	r3, #2
 8002858:	d112      	bne.n	8002880 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	881a      	ldrh	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	1c9a      	adds	r2, r3, #2
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002874:	b29b      	uxth	r3, r3
 8002876:	3b01      	subs	r3, #1
 8002878:	b29a      	uxth	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	86da      	strh	r2, [r3, #54]	; 0x36
 800287e:	e011      	b.n	80028a4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002880:	f7fe ffbe 	bl	8001800 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	429a      	cmp	r2, r3
 800288e:	d803      	bhi.n	8002898 <HAL_SPI_Transmit+0x168>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002896:	d102      	bne.n	800289e <HAL_SPI_Transmit+0x16e>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d102      	bne.n	80028a4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80028a2:	e074      	b.n	800298e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1ce      	bne.n	800284c <HAL_SPI_Transmit+0x11c>
 80028ae:	e04c      	b.n	800294a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d002      	beq.n	80028be <HAL_SPI_Transmit+0x18e>
 80028b8:	8afb      	ldrh	r3, [r7, #22]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d140      	bne.n	8002940 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	330c      	adds	r3, #12
 80028c8:	7812      	ldrb	r2, [r2, #0]
 80028ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d0:	1c5a      	adds	r2, r3, #1
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028da:	b29b      	uxth	r3, r3
 80028dc:	3b01      	subs	r3, #1
 80028de:	b29a      	uxth	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80028e4:	e02c      	b.n	8002940 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d113      	bne.n	800291c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	330c      	adds	r3, #12
 80028fe:	7812      	ldrb	r2, [r2, #0]
 8002900:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	1c5a      	adds	r2, r3, #1
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002910:	b29b      	uxth	r3, r3
 8002912:	3b01      	subs	r3, #1
 8002914:	b29a      	uxth	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	86da      	strh	r2, [r3, #54]	; 0x36
 800291a:	e011      	b.n	8002940 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800291c:	f7fe ff70 	bl	8001800 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	429a      	cmp	r2, r3
 800292a:	d803      	bhi.n	8002934 <HAL_SPI_Transmit+0x204>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002932:	d102      	bne.n	800293a <HAL_SPI_Transmit+0x20a>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d102      	bne.n	8002940 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800293e:	e026      	b.n	800298e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002944:	b29b      	uxth	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1cd      	bne.n	80028e6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	6839      	ldr	r1, [r7, #0]
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 fa62 	bl	8002e18 <SPI_EndRxTxTransaction>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d002      	beq.n	8002960 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2220      	movs	r2, #32
 800295e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10a      	bne.n	800297e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002968:	2300      	movs	r3, #0
 800296a:	613b      	str	r3, [r7, #16]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	613b      	str	r3, [r7, #16]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	613b      	str	r3, [r7, #16]
 800297c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002982:	2b00      	cmp	r3, #0
 8002984:	d002      	beq.n	800298c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	77fb      	strb	r3, [r7, #31]
 800298a:	e000      	b.n	800298e <HAL_SPI_Transmit+0x25e>
  }

error:
 800298c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800299e:	7ffb      	ldrb	r3, [r7, #31]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3720      	adds	r7, #32
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08c      	sub	sp, #48	; 0x30
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
 80029b4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80029b6:	2301      	movs	r3, #1
 80029b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80029ba:	2300      	movs	r3, #0
 80029bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d101      	bne.n	80029ce <HAL_SPI_TransmitReceive+0x26>
 80029ca:	2302      	movs	r3, #2
 80029cc:	e18a      	b.n	8002ce4 <HAL_SPI_TransmitReceive+0x33c>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029d6:	f7fe ff13 	bl	8001800 <HAL_GetTick>
 80029da:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80029ec:	887b      	ldrh	r3, [r7, #2]
 80029ee:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80029f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d00f      	beq.n	8002a18 <HAL_SPI_TransmitReceive+0x70>
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029fe:	d107      	bne.n	8002a10 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d103      	bne.n	8002a10 <HAL_SPI_TransmitReceive+0x68>
 8002a08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a0c:	2b04      	cmp	r3, #4
 8002a0e:	d003      	beq.n	8002a18 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002a10:	2302      	movs	r3, #2
 8002a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a16:	e15b      	b.n	8002cd0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d005      	beq.n	8002a2a <HAL_SPI_TransmitReceive+0x82>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d002      	beq.n	8002a2a <HAL_SPI_TransmitReceive+0x82>
 8002a24:	887b      	ldrh	r3, [r7, #2]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d103      	bne.n	8002a32 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a30:	e14e      	b.n	8002cd0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d003      	beq.n	8002a46 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2205      	movs	r2, #5
 8002a42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	887a      	ldrh	r2, [r7, #2]
 8002a56:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	887a      	ldrh	r2, [r7, #2]
 8002a5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	887a      	ldrh	r2, [r7, #2]
 8002a68:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	887a      	ldrh	r2, [r7, #2]
 8002a6e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a86:	2b40      	cmp	r3, #64	; 0x40
 8002a88:	d007      	beq.n	8002a9a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aa2:	d178      	bne.n	8002b96 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d002      	beq.n	8002ab2 <HAL_SPI_TransmitReceive+0x10a>
 8002aac:	8b7b      	ldrh	r3, [r7, #26]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d166      	bne.n	8002b80 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	881a      	ldrh	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	1c9a      	adds	r2, r3, #2
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ad6:	e053      	b.n	8002b80 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d11b      	bne.n	8002b1e <HAL_SPI_TransmitReceive+0x176>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d016      	beq.n	8002b1e <HAL_SPI_TransmitReceive+0x176>
 8002af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d113      	bne.n	8002b1e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	881a      	ldrh	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	1c9a      	adds	r2, r3, #2
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	3b01      	subs	r3, #1
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d119      	bne.n	8002b60 <HAL_SPI_TransmitReceive+0x1b8>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d014      	beq.n	8002b60 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b40:	b292      	uxth	r2, r2
 8002b42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b48:	1c9a      	adds	r2, r3, #2
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	3b01      	subs	r3, #1
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b60:	f7fe fe4e 	bl	8001800 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d807      	bhi.n	8002b80 <HAL_SPI_TransmitReceive+0x1d8>
 8002b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b76:	d003      	beq.n	8002b80 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002b7e:	e0a7      	b.n	8002cd0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1a6      	bne.n	8002ad8 <HAL_SPI_TransmitReceive+0x130>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1a1      	bne.n	8002ad8 <HAL_SPI_TransmitReceive+0x130>
 8002b94:	e07c      	b.n	8002c90 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d002      	beq.n	8002ba4 <HAL_SPI_TransmitReceive+0x1fc>
 8002b9e:	8b7b      	ldrh	r3, [r7, #26]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d16b      	bne.n	8002c7c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	330c      	adds	r3, #12
 8002bae:	7812      	ldrb	r2, [r2, #0]
 8002bb0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bca:	e057      	b.n	8002c7c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d11c      	bne.n	8002c14 <HAL_SPI_TransmitReceive+0x26c>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d017      	beq.n	8002c14 <HAL_SPI_TransmitReceive+0x26c>
 8002be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d114      	bne.n	8002c14 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	330c      	adds	r3, #12
 8002bf4:	7812      	ldrb	r2, [r2, #0]
 8002bf6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfc:	1c5a      	adds	r2, r3, #1
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d119      	bne.n	8002c56 <HAL_SPI_TransmitReceive+0x2ae>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d014      	beq.n	8002c56 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68da      	ldr	r2, [r3, #12]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3e:	1c5a      	adds	r2, r3, #1
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c52:	2301      	movs	r3, #1
 8002c54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c56:	f7fe fdd3 	bl	8001800 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d803      	bhi.n	8002c6e <HAL_SPI_TransmitReceive+0x2c6>
 8002c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c6c:	d102      	bne.n	8002c74 <HAL_SPI_TransmitReceive+0x2cc>
 8002c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d103      	bne.n	8002c7c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002c7a:	e029      	b.n	8002cd0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1a2      	bne.n	8002bcc <HAL_SPI_TransmitReceive+0x224>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d19d      	bne.n	8002bcc <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 f8bf 	bl	8002e18 <SPI_EndRxTxTransaction>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d006      	beq.n	8002cae <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002cac:	e010      	b.n	8002cd0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10b      	bne.n	8002cce <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	617b      	str	r3, [r7, #20]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	617b      	str	r3, [r7, #20]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	e000      	b.n	8002cd0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002cce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ce0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3730      	adds	r7, #48	; 0x30
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cfa:	b2db      	uxtb	r3, r3
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr
	...

08002d08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	603b      	str	r3, [r7, #0]
 8002d14:	4613      	mov	r3, r2
 8002d16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d18:	f7fe fd72 	bl	8001800 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d20:	1a9b      	subs	r3, r3, r2
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	4413      	add	r3, r2
 8002d26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d28:	f7fe fd6a 	bl	8001800 <HAL_GetTick>
 8002d2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d2e:	4b39      	ldr	r3, [pc, #228]	; (8002e14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	015b      	lsls	r3, r3, #5
 8002d34:	0d1b      	lsrs	r3, r3, #20
 8002d36:	69fa      	ldr	r2, [r7, #28]
 8002d38:	fb02 f303 	mul.w	r3, r2, r3
 8002d3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d3e:	e054      	b.n	8002dea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d46:	d050      	beq.n	8002dea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d48:	f7fe fd5a 	bl	8001800 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	69fa      	ldr	r2, [r7, #28]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d902      	bls.n	8002d5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d13d      	bne.n	8002dda <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d76:	d111      	bne.n	8002d9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d80:	d004      	beq.n	8002d8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d8a:	d107      	bne.n	8002d9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002da4:	d10f      	bne.n	8002dc6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e017      	b.n	8002e0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	4013      	ands	r3, r2
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	bf0c      	ite	eq
 8002dfa:	2301      	moveq	r3, #1
 8002dfc:	2300      	movne	r3, #0
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	461a      	mov	r2, r3
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d19b      	bne.n	8002d40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3720      	adds	r7, #32
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20000004 	.word	0x20000004

08002e18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af02      	add	r7, sp, #8
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2180      	movs	r1, #128	; 0x80
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f7ff ff6a 	bl	8002d08 <SPI_WaitFlagStateUntilTimeout>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d007      	beq.n	8002e4a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3e:	f043 0220 	orr.w	r2, r3, #32
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e000      	b.n	8002e4c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e03f      	b.n	8002ee6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d106      	bne.n	8002e80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7fe fbaa 	bl	80015d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2224      	movs	r2, #36	; 0x24
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f905 	bl	80030a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	691a      	ldr	r2, [r3, #16]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002eac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695a      	ldr	r2, [r3, #20]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ebc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68da      	ldr	r2, [r3, #12]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ecc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b08a      	sub	sp, #40	; 0x28
 8002ef2:	af02      	add	r7, sp, #8
 8002ef4:	60f8      	str	r0, [r7, #12]
 8002ef6:	60b9      	str	r1, [r7, #8]
 8002ef8:	603b      	str	r3, [r7, #0]
 8002efa:	4613      	mov	r3, r2
 8002efc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b20      	cmp	r3, #32
 8002f0c:	d17c      	bne.n	8003008 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d002      	beq.n	8002f1a <HAL_UART_Transmit+0x2c>
 8002f14:	88fb      	ldrh	r3, [r7, #6]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e075      	b.n	800300a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <HAL_UART_Transmit+0x3e>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e06e      	b.n	800300a <HAL_UART_Transmit+0x11c>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2221      	movs	r2, #33	; 0x21
 8002f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f42:	f7fe fc5d 	bl	8001800 <HAL_GetTick>
 8002f46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	88fa      	ldrh	r2, [r7, #6]
 8002f4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	88fa      	ldrh	r2, [r7, #6]
 8002f52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f5c:	d108      	bne.n	8002f70 <HAL_UART_Transmit+0x82>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d104      	bne.n	8002f70 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	61bb      	str	r3, [r7, #24]
 8002f6e:	e003      	b.n	8002f78 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f74:	2300      	movs	r3, #0
 8002f76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f80:	e02a      	b.n	8002fd8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2180      	movs	r1, #128	; 0x80
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 f840 	bl	8003012 <UART_WaitOnFlagUntilTimeout>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e036      	b.n	800300a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10b      	bne.n	8002fba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	881b      	ldrh	r3, [r3, #0]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	3302      	adds	r3, #2
 8002fb6:	61bb      	str	r3, [r7, #24]
 8002fb8:	e007      	b.n	8002fca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	781a      	ldrb	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1cf      	bne.n	8002f82 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	2140      	movs	r1, #64	; 0x40
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 f810 	bl	8003012 <UART_WaitOnFlagUntilTimeout>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e006      	b.n	800300a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003004:	2300      	movs	r3, #0
 8003006:	e000      	b.n	800300a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003008:	2302      	movs	r3, #2
  }
}
 800300a:	4618      	mov	r0, r3
 800300c:	3720      	adds	r7, #32
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b084      	sub	sp, #16
 8003016:	af00      	add	r7, sp, #0
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	603b      	str	r3, [r7, #0]
 800301e:	4613      	mov	r3, r2
 8003020:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003022:	e02c      	b.n	800307e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800302a:	d028      	beq.n	800307e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d007      	beq.n	8003042 <UART_WaitOnFlagUntilTimeout+0x30>
 8003032:	f7fe fbe5 	bl	8001800 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	429a      	cmp	r2, r3
 8003040:	d21d      	bcs.n	800307e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003050:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695a      	ldr	r2, [r3, #20]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0201 	bic.w	r2, r2, #1
 8003060:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2220      	movs	r2, #32
 8003066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2220      	movs	r2, #32
 800306e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e00f      	b.n	800309e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	4013      	ands	r3, r2
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	429a      	cmp	r2, r3
 800308c:	bf0c      	ite	eq
 800308e:	2301      	moveq	r3, #1
 8003090:	2300      	movne	r3, #0
 8003092:	b2db      	uxtb	r3, r3
 8003094:	461a      	mov	r2, r3
 8003096:	79fb      	ldrb	r3, [r7, #7]
 8003098:	429a      	cmp	r2, r3
 800309a:	d0c3      	beq.n	8003024 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80030e2:	f023 030c 	bic.w	r3, r3, #12
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6812      	ldr	r2, [r2, #0]
 80030ea:	68b9      	ldr	r1, [r7, #8]
 80030ec:	430b      	orrs	r3, r1
 80030ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	699a      	ldr	r2, [r3, #24]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a2c      	ldr	r2, [pc, #176]	; (80031bc <UART_SetConfig+0x114>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d103      	bne.n	8003118 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003110:	f7ff fa58 	bl	80025c4 <HAL_RCC_GetPCLK2Freq>
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	e002      	b.n	800311e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003118:	f7ff fa40 	bl	800259c <HAL_RCC_GetPCLK1Freq>
 800311c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	009a      	lsls	r2, r3, #2
 8003128:	441a      	add	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	fbb2 f3f3 	udiv	r3, r2, r3
 8003134:	4a22      	ldr	r2, [pc, #136]	; (80031c0 <UART_SetConfig+0x118>)
 8003136:	fba2 2303 	umull	r2, r3, r2, r3
 800313a:	095b      	lsrs	r3, r3, #5
 800313c:	0119      	lsls	r1, r3, #4
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	4613      	mov	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	009a      	lsls	r2, r3, #2
 8003148:	441a      	add	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	fbb2 f2f3 	udiv	r2, r2, r3
 8003154:	4b1a      	ldr	r3, [pc, #104]	; (80031c0 <UART_SetConfig+0x118>)
 8003156:	fba3 0302 	umull	r0, r3, r3, r2
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	2064      	movs	r0, #100	; 0x64
 800315e:	fb00 f303 	mul.w	r3, r0, r3
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	3332      	adds	r3, #50	; 0x32
 8003168:	4a15      	ldr	r2, [pc, #84]	; (80031c0 <UART_SetConfig+0x118>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003174:	4419      	add	r1, r3
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	009a      	lsls	r2, r3, #2
 8003180:	441a      	add	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	fbb2 f2f3 	udiv	r2, r2, r3
 800318c:	4b0c      	ldr	r3, [pc, #48]	; (80031c0 <UART_SetConfig+0x118>)
 800318e:	fba3 0302 	umull	r0, r3, r3, r2
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	2064      	movs	r0, #100	; 0x64
 8003196:	fb00 f303 	mul.w	r3, r0, r3
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	3332      	adds	r3, #50	; 0x32
 80031a0:	4a07      	ldr	r2, [pc, #28]	; (80031c0 <UART_SetConfig+0x118>)
 80031a2:	fba2 2303 	umull	r2, r3, r2, r3
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	f003 020f 	and.w	r2, r3, #15
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	440a      	add	r2, r1
 80031b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80031b4:	bf00      	nop
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40013800 	.word	0x40013800
 80031c0:	51eb851f 	.word	0x51eb851f

080031c4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80031c8:	4904      	ldr	r1, [pc, #16]	; (80031dc <MX_FATFS_Init+0x18>)
 80031ca:	4805      	ldr	r0, [pc, #20]	; (80031e0 <MX_FATFS_Init+0x1c>)
 80031cc:	f003 fcf8 	bl	8006bc0 <FATFS_LinkDriver>
 80031d0:	4603      	mov	r3, r0
 80031d2:	461a      	mov	r2, r3
 80031d4:	4b03      	ldr	r3, [pc, #12]	; (80031e4 <MX_FATFS_Init+0x20>)
 80031d6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80031d8:	bf00      	nop
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	20002158 	.word	0x20002158
 80031e0:	20000010 	.word	0x20000010
 80031e4:	20002154 	.word	0x20002154

080031e8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80031ec:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr

080031f6 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b082      	sub	sp, #8
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	4603      	mov	r3, r0
 80031fe:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	4618      	mov	r0, r3
 8003204:	f7fd fc68 	bl	8000ad8 <SD_disk_initialize>
 8003208:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b082      	sub	sp, #8
 8003216:	af00      	add	r7, sp, #0
 8003218:	4603      	mov	r3, r0
 800321a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800321c:	79fb      	ldrb	r3, [r7, #7]
 800321e:	4618      	mov	r0, r3
 8003220:	f7fd fd44 	bl	8000cac <SD_disk_status>
 8003224:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b084      	sub	sp, #16
 8003232:	af00      	add	r7, sp, #0
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
 8003238:	603b      	str	r3, [r7, #0]
 800323a:	4603      	mov	r3, r0
 800323c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800323e:	7bf8      	ldrb	r0, [r7, #15]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	68b9      	ldr	r1, [r7, #8]
 8003246:	f7fd fd45 	bl	8000cd4 <SD_disk_read>
 800324a:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	607a      	str	r2, [r7, #4]
 800325e:	603b      	str	r3, [r7, #0]
 8003260:	4603      	mov	r3, r0
 8003262:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8003264:	7bf8      	ldrb	r0, [r7, #15]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	68b9      	ldr	r1, [r7, #8]
 800326c:	f7fd fd9c 	bl	8000da8 <SD_disk_write>
 8003270:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	4603      	mov	r3, r0
 8003282:	603a      	str	r2, [r7, #0]
 8003284:	71fb      	strb	r3, [r7, #7]
 8003286:	460b      	mov	r3, r1
 8003288:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800328a:	79b9      	ldrb	r1, [r7, #6]
 800328c:	79fb      	ldrb	r3, [r7, #7]
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f7fd fe0d 	bl	8000eb0 <SD_disk_ioctl>
 8003296:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003298:	4618      	mov	r0, r3
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	4a08      	ldr	r2, [pc, #32]	; (80032d0 <disk_status+0x30>)
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	79fa      	ldrb	r2, [r7, #7]
 80032b8:	4905      	ldr	r1, [pc, #20]	; (80032d0 <disk_status+0x30>)
 80032ba:	440a      	add	r2, r1
 80032bc:	7a12      	ldrb	r2, [r2, #8]
 80032be:	4610      	mov	r0, r2
 80032c0:	4798      	blx	r3
 80032c2:	4603      	mov	r3, r0
 80032c4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	2000237c 	.word	0x2000237c

080032d4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80032de:	2300      	movs	r3, #0
 80032e0:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80032e2:	79fb      	ldrb	r3, [r7, #7]
 80032e4:	4a0d      	ldr	r2, [pc, #52]	; (800331c <disk_initialize+0x48>)
 80032e6:	5cd3      	ldrb	r3, [r2, r3]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d111      	bne.n	8003310 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80032ec:	79fb      	ldrb	r3, [r7, #7]
 80032ee:	4a0b      	ldr	r2, [pc, #44]	; (800331c <disk_initialize+0x48>)
 80032f0:	2101      	movs	r1, #1
 80032f2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80032f4:	79fb      	ldrb	r3, [r7, #7]
 80032f6:	4a09      	ldr	r2, [pc, #36]	; (800331c <disk_initialize+0x48>)
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	79fa      	ldrb	r2, [r7, #7]
 8003302:	4906      	ldr	r1, [pc, #24]	; (800331c <disk_initialize+0x48>)
 8003304:	440a      	add	r2, r1
 8003306:	7a12      	ldrb	r2, [r2, #8]
 8003308:	4610      	mov	r0, r2
 800330a:	4798      	blx	r3
 800330c:	4603      	mov	r3, r0
 800330e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003310:	7bfb      	ldrb	r3, [r7, #15]
}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	2000237c 	.word	0x2000237c

08003320 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003320:	b590      	push	{r4, r7, lr}
 8003322:	b087      	sub	sp, #28
 8003324:	af00      	add	r7, sp, #0
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	607a      	str	r2, [r7, #4]
 800332a:	603b      	str	r3, [r7, #0]
 800332c:	4603      	mov	r3, r0
 800332e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	4a0a      	ldr	r2, [pc, #40]	; (800335c <disk_read+0x3c>)
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	689c      	ldr	r4, [r3, #8]
 800333c:	7bfb      	ldrb	r3, [r7, #15]
 800333e:	4a07      	ldr	r2, [pc, #28]	; (800335c <disk_read+0x3c>)
 8003340:	4413      	add	r3, r2
 8003342:	7a18      	ldrb	r0, [r3, #8]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	68b9      	ldr	r1, [r7, #8]
 800334a:	47a0      	blx	r4
 800334c:	4603      	mov	r3, r0
 800334e:	75fb      	strb	r3, [r7, #23]
  return res;
 8003350:	7dfb      	ldrb	r3, [r7, #23]
}
 8003352:	4618      	mov	r0, r3
 8003354:	371c      	adds	r7, #28
 8003356:	46bd      	mov	sp, r7
 8003358:	bd90      	pop	{r4, r7, pc}
 800335a:	bf00      	nop
 800335c:	2000237c 	.word	0x2000237c

08003360 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003360:	b590      	push	{r4, r7, lr}
 8003362:	b087      	sub	sp, #28
 8003364:	af00      	add	r7, sp, #0
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	607a      	str	r2, [r7, #4]
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	4603      	mov	r3, r0
 800336e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003370:	7bfb      	ldrb	r3, [r7, #15]
 8003372:	4a0a      	ldr	r2, [pc, #40]	; (800339c <disk_write+0x3c>)
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	68dc      	ldr	r4, [r3, #12]
 800337c:	7bfb      	ldrb	r3, [r7, #15]
 800337e:	4a07      	ldr	r2, [pc, #28]	; (800339c <disk_write+0x3c>)
 8003380:	4413      	add	r3, r2
 8003382:	7a18      	ldrb	r0, [r3, #8]
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	68b9      	ldr	r1, [r7, #8]
 800338a:	47a0      	blx	r4
 800338c:	4603      	mov	r3, r0
 800338e:	75fb      	strb	r3, [r7, #23]
  return res;
 8003390:	7dfb      	ldrb	r3, [r7, #23]
}
 8003392:	4618      	mov	r0, r3
 8003394:	371c      	adds	r7, #28
 8003396:	46bd      	mov	sp, r7
 8003398:	bd90      	pop	{r4, r7, pc}
 800339a:	bf00      	nop
 800339c:	2000237c 	.word	0x2000237c

080033a0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	603a      	str	r2, [r7, #0]
 80033aa:	71fb      	strb	r3, [r7, #7]
 80033ac:	460b      	mov	r3, r1
 80033ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80033b0:	79fb      	ldrb	r3, [r7, #7]
 80033b2:	4a09      	ldr	r2, [pc, #36]	; (80033d8 <disk_ioctl+0x38>)
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	79fa      	ldrb	r2, [r7, #7]
 80033be:	4906      	ldr	r1, [pc, #24]	; (80033d8 <disk_ioctl+0x38>)
 80033c0:	440a      	add	r2, r1
 80033c2:	7a10      	ldrb	r0, [r2, #8]
 80033c4:	79b9      	ldrb	r1, [r7, #6]
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	4798      	blx	r3
 80033ca:	4603      	mov	r3, r0
 80033cc:	73fb      	strb	r3, [r7, #15]
  return res;
 80033ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	2000237c 	.word	0x2000237c

080033dc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80033dc:	b480      	push	{r7}
 80033de:	b087      	sub	sp, #28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80033f0:	e007      	b.n	8003402 <mem_cpy+0x26>
		*d++ = *s++;
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	1c53      	adds	r3, r2, #1
 80033f6:	613b      	str	r3, [r7, #16]
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	1c59      	adds	r1, r3, #1
 80033fc:	6179      	str	r1, [r7, #20]
 80033fe:	7812      	ldrb	r2, [r2, #0]
 8003400:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	1e5a      	subs	r2, r3, #1
 8003406:	607a      	str	r2, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1f2      	bne.n	80033f2 <mem_cpy+0x16>
}
 800340c:	bf00      	nop
 800340e:	bf00      	nop
 8003410:	371c      	adds	r7, #28
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr

08003418 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8003428:	e005      	b.n	8003436 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	1c5a      	adds	r2, r3, #1
 800342e:	617a      	str	r2, [r7, #20]
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	1e5a      	subs	r2, r3, #1
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1f4      	bne.n	800342a <mem_set+0x12>
}
 8003440:	bf00      	nop
 8003442:	bf00      	nop
 8003444:	371c      	adds	r7, #28
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr

0800344c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800344c:	b480      	push	{r7}
 800344e:	b089      	sub	sp, #36	; 0x24
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	61fb      	str	r3, [r7, #28]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003460:	2300      	movs	r3, #0
 8003462:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8003464:	bf00      	nop
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	1e5a      	subs	r2, r3, #1
 800346a:	607a      	str	r2, [r7, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00d      	beq.n	800348c <mem_cmp+0x40>
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	1c5a      	adds	r2, r3, #1
 8003474:	61fa      	str	r2, [r7, #28]
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	4619      	mov	r1, r3
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	61ba      	str	r2, [r7, #24]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	1acb      	subs	r3, r1, r3
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0ec      	beq.n	8003466 <mem_cmp+0x1a>
	return r;
 800348c:	697b      	ldr	r3, [r7, #20]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3724      	adds	r7, #36	; 0x24
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr

08003498 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80034a2:	e002      	b.n	80034aa <chk_chr+0x12>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3301      	adds	r3, #1
 80034a8:	607b      	str	r3, [r7, #4]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d005      	beq.n	80034be <chk_chr+0x26>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	461a      	mov	r2, r3
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d1f2      	bne.n	80034a4 <chk_chr+0xc>
	return *str;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	781b      	ldrb	r3, [r3, #0]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bc80      	pop	{r7}
 80034ca:	4770      	bx	lr

080034cc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80034d6:	2300      	movs	r3, #0
 80034d8:	60bb      	str	r3, [r7, #8]
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	e03b      	b.n	8003558 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 80034e0:	4931      	ldr	r1, [pc, #196]	; (80035a8 <chk_lock+0xdc>)
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	4613      	mov	r3, r2
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	4413      	add	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d02c      	beq.n	800354e <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80034f4:	492c      	ldr	r1, [pc, #176]	; (80035a8 <chk_lock+0xdc>)
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	4613      	mov	r3, r2
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	4413      	add	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d120      	bne.n	8003552 <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8003510:	4925      	ldr	r1, [pc, #148]	; (80035a8 <chk_lock+0xdc>)
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	4613      	mov	r3, r2
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	4413      	add	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	3304      	adds	r3, #4
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003528:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800352a:	429a      	cmp	r2, r3
 800352c:	d111      	bne.n	8003552 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800352e:	491e      	ldr	r1, [pc, #120]	; (80035a8 <chk_lock+0xdc>)
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	4613      	mov	r3, r2
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	4413      	add	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	3308      	adds	r3, #8
 800353e:	881a      	ldrh	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003546:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8003548:	429a      	cmp	r2, r3
 800354a:	d102      	bne.n	8003552 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800354c:	e007      	b.n	800355e <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 800354e:	2301      	movs	r3, #1
 8003550:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	3301      	adds	r3, #1
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d9c0      	bls.n	80034e0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2b02      	cmp	r3, #2
 8003562:	d109      	bne.n	8003578 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d102      	bne.n	8003570 <chk_lock+0xa4>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	2b02      	cmp	r3, #2
 800356e:	d101      	bne.n	8003574 <chk_lock+0xa8>
 8003570:	2300      	movs	r3, #0
 8003572:	e013      	b.n	800359c <chk_lock+0xd0>
 8003574:	2312      	movs	r3, #18
 8003576:	e011      	b.n	800359c <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10b      	bne.n	8003596 <chk_lock+0xca>
 800357e:	490a      	ldr	r1, [pc, #40]	; (80035a8 <chk_lock+0xdc>)
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4613      	mov	r3, r2
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	4413      	add	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	440b      	add	r3, r1
 800358c:	330a      	adds	r3, #10
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003594:	d101      	bne.n	800359a <chk_lock+0xce>
 8003596:	2310      	movs	r3, #16
 8003598:	e000      	b.n	800359c <chk_lock+0xd0>
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bc80      	pop	{r7}
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	20002164 	.word	0x20002164

080035ac <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80035b2:	2300      	movs	r3, #0
 80035b4:	607b      	str	r3, [r7, #4]
 80035b6:	e002      	b.n	80035be <enq_lock+0x12>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3301      	adds	r3, #1
 80035bc:	607b      	str	r3, [r7, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d809      	bhi.n	80035d8 <enq_lock+0x2c>
 80035c4:	490a      	ldr	r1, [pc, #40]	; (80035f0 <enq_lock+0x44>)
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	4613      	mov	r3, r2
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	4413      	add	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1ef      	bne.n	80035b8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b02      	cmp	r3, #2
 80035dc:	bf14      	ite	ne
 80035de:	2301      	movne	r3, #1
 80035e0:	2300      	moveq	r3, #0
 80035e2:	b2db      	uxtb	r3, r3
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bc80      	pop	{r7}
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	20002164 	.word	0x20002164

080035f4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80035fe:	2300      	movs	r3, #0
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	e02e      	b.n	8003662 <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8003604:	4958      	ldr	r1, [pc, #352]	; (8003768 <inc_lock+0x174>)
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4613      	mov	r3, r2
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	4413      	add	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d11d      	bne.n	800365c <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8003620:	4951      	ldr	r1, [pc, #324]	; (8003768 <inc_lock+0x174>)
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	4613      	mov	r3, r2
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	4413      	add	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	3304      	adds	r3, #4
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003638:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 800363a:	429a      	cmp	r2, r3
 800363c:	d10e      	bne.n	800365c <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 800363e:	494a      	ldr	r1, [pc, #296]	; (8003768 <inc_lock+0x174>)
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	4613      	mov	r3, r2
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	4413      	add	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	440b      	add	r3, r1
 800364c:	3308      	adds	r3, #8
 800364e:	881a      	ldrh	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003656:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8003658:	429a      	cmp	r2, r3
 800365a:	d006      	beq.n	800366a <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	3301      	adds	r3, #1
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d9cd      	bls.n	8003604 <inc_lock+0x10>
 8003668:	e000      	b.n	800366c <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 800366a:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2b02      	cmp	r3, #2
 8003670:	d148      	bne.n	8003704 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003672:	2300      	movs	r3, #0
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	e002      	b.n	800367e <inc_lock+0x8a>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	3301      	adds	r3, #1
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d809      	bhi.n	8003698 <inc_lock+0xa4>
 8003684:	4938      	ldr	r1, [pc, #224]	; (8003768 <inc_lock+0x174>)
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	4613      	mov	r3, r2
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1ef      	bne.n	8003678 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2b02      	cmp	r3, #2
 800369c:	d101      	bne.n	80036a2 <inc_lock+0xae>
 800369e:	2300      	movs	r3, #0
 80036a0:	e05d      	b.n	800375e <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036a8:	6819      	ldr	r1, [r3, #0]
 80036aa:	482f      	ldr	r0, [pc, #188]	; (8003768 <inc_lock+0x174>)
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4613      	mov	r3, r2
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	4413      	add	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4403      	add	r3, r0
 80036b8:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036c0:	6899      	ldr	r1, [r3, #8]
 80036c2:	4829      	ldr	r0, [pc, #164]	; (8003768 <inc_lock+0x174>)
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	4613      	mov	r3, r2
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	4413      	add	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4403      	add	r3, r0
 80036d0:	3304      	adds	r3, #4
 80036d2:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036da:	88d8      	ldrh	r0, [r3, #6]
 80036dc:	4922      	ldr	r1, [pc, #136]	; (8003768 <inc_lock+0x174>)
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	4613      	mov	r3, r2
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	4413      	add	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	3308      	adds	r3, #8
 80036ec:	4602      	mov	r2, r0
 80036ee:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80036f0:	491d      	ldr	r1, [pc, #116]	; (8003768 <inc_lock+0x174>)
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	4613      	mov	r3, r2
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	4413      	add	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	330a      	adds	r3, #10
 8003700:	2200      	movs	r2, #0
 8003702:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00c      	beq.n	8003724 <inc_lock+0x130>
 800370a:	4917      	ldr	r1, [pc, #92]	; (8003768 <inc_lock+0x174>)
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	4613      	mov	r3, r2
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	4413      	add	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	330a      	adds	r3, #10
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <inc_lock+0x130>
 8003720:	2300      	movs	r3, #0
 8003722:	e01c      	b.n	800375e <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10b      	bne.n	8003742 <inc_lock+0x14e>
 800372a:	490f      	ldr	r1, [pc, #60]	; (8003768 <inc_lock+0x174>)
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4613      	mov	r3, r2
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	4413      	add	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	440b      	add	r3, r1
 8003738:	330a      	adds	r3, #10
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	3301      	adds	r3, #1
 800373e:	b299      	uxth	r1, r3
 8003740:	e001      	b.n	8003746 <inc_lock+0x152>
 8003742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003746:	4808      	ldr	r0, [pc, #32]	; (8003768 <inc_lock+0x174>)
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	4613      	mov	r3, r2
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	4413      	add	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4403      	add	r3, r0
 8003754:	330a      	adds	r3, #10
 8003756:	460a      	mov	r2, r1
 8003758:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	3301      	adds	r3, #1
}
 800375e:	4618      	mov	r0, r3
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr
 8003768:	20002164 	.word	0x20002164

0800376c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	3b01      	subs	r3, #1
 8003778:	607b      	str	r3, [r7, #4]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d82e      	bhi.n	80037de <dec_lock+0x72>
		n = Files[i].ctr;
 8003780:	491b      	ldr	r1, [pc, #108]	; (80037f0 <dec_lock+0x84>)
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	4613      	mov	r3, r2
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	4413      	add	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	330a      	adds	r3, #10
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003794:	89fb      	ldrh	r3, [r7, #14]
 8003796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800379a:	d101      	bne.n	80037a0 <dec_lock+0x34>
 800379c:	2300      	movs	r3, #0
 800379e:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80037a0:	89fb      	ldrh	r3, [r7, #14]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <dec_lock+0x40>
 80037a6:	89fb      	ldrh	r3, [r7, #14]
 80037a8:	3b01      	subs	r3, #1
 80037aa:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80037ac:	4910      	ldr	r1, [pc, #64]	; (80037f0 <dec_lock+0x84>)
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	4613      	mov	r3, r2
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	4413      	add	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	330a      	adds	r3, #10
 80037bc:	89fa      	ldrh	r2, [r7, #14]
 80037be:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80037c0:	89fb      	ldrh	r3, [r7, #14]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d108      	bne.n	80037d8 <dec_lock+0x6c>
 80037c6:	490a      	ldr	r1, [pc, #40]	; (80037f0 <dec_lock+0x84>)
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	4613      	mov	r3, r2
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	4413      	add	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	440b      	add	r3, r1
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	737b      	strb	r3, [r7, #13]
 80037dc:	e001      	b.n	80037e2 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80037de:	2302      	movs	r3, #2
 80037e0:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80037e2:	7b7b      	ldrb	r3, [r7, #13]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bc80      	pop	{r7}
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	20002164 	.word	0x20002164

080037f4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80037fc:	2300      	movs	r3, #0
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	e016      	b.n	8003830 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003802:	4910      	ldr	r1, [pc, #64]	; (8003844 <clear_lock+0x50>)
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	4613      	mov	r3, r2
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	4413      	add	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	429a      	cmp	r2, r3
 8003816:	d108      	bne.n	800382a <clear_lock+0x36>
 8003818:	490a      	ldr	r1, [pc, #40]	; (8003844 <clear_lock+0x50>)
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	4613      	mov	r3, r2
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	3301      	adds	r3, #1
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d9e5      	bls.n	8003802 <clear_lock+0xe>
	}
}
 8003836:	bf00      	nop
 8003838:	bf00      	nop
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	bc80      	pop	{r7}
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	20002164 	.word	0x20002164

08003848 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003850:	2300      	movs	r3, #0
 8003852:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800385a:	791b      	ldrb	r3, [r3, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d040      	beq.n	80038e2 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003868:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003870:	7858      	ldrb	r0, [r3, #1]
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	2301      	movs	r3, #1
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	f7ff fd72 	bl	8003360 <disk_write>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <sync_window+0x40>
			res = FR_DISK_ERR;
 8003882:	2301      	movs	r3, #1
 8003884:	73fb      	strb	r3, [r7, #15]
 8003886:	e02c      	b.n	80038e2 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800388e:	2200      	movs	r2, #0
 8003890:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	1ad2      	subs	r2, r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d21b      	bcs.n	80038e2 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038b0:	78db      	ldrb	r3, [r3, #3]
 80038b2:	613b      	str	r3, [r7, #16]
 80038b4:	e012      	b.n	80038dc <sync_window+0x94>
					wsect += fs->fsize;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	4413      	add	r3, r2
 80038c2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ca:	7858      	ldrb	r0, [r3, #1]
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	2301      	movs	r3, #1
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	f7ff fd45 	bl	8003360 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	3b01      	subs	r3, #1
 80038da:	613b      	str	r3, [r7, #16]
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d8e9      	bhi.n	80038b6 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 80038e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80038f6:	2300      	movs	r3, #0
 80038f8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	429a      	cmp	r2, r3
 8003906:	d01e      	beq.n	8003946 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7ff ff9d 	bl	8003848 <sync_window>
 800390e:	4603      	mov	r3, r0
 8003910:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003912:	7bfb      	ldrb	r3, [r7, #15]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d116      	bne.n	8003946 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800391e:	7858      	ldrb	r0, [r3, #1]
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	2301      	movs	r3, #1
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	f7ff fcfb 	bl	8003320 <disk_read>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d004      	beq.n	800393a <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003930:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003934:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003936:	2301      	movs	r3, #1
 8003938:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003940:	461a      	mov	r2, r3
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 8003946:	7bfb      	ldrb	r3, [r7, #15]
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f7ff ff75 	bl	8003848 <sync_window>
 800395e:	4603      	mov	r3, r0
 8003960:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003962:	7bfb      	ldrb	r3, [r7, #15]
 8003964:	2b00      	cmp	r3, #0
 8003966:	f040 80ad 	bne.w	8003ac4 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	2b03      	cmp	r3, #3
 8003974:	f040 8098 	bne.w	8003aa8 <sync_fs+0x158>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800397e:	795b      	ldrb	r3, [r3, #5]
 8003980:	2b01      	cmp	r3, #1
 8003982:	f040 8091 	bne.w	8003aa8 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800398e:	895b      	ldrh	r3, [r3, #10]
 8003990:	461a      	mov	r2, r3
 8003992:	2100      	movs	r1, #0
 8003994:	f7ff fd40 	bl	8003418 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2255      	movs	r2, #85	; 0x55
 800399c:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	22aa      	movs	r2, #170	; 0xaa
 80039a4:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2252      	movs	r2, #82	; 0x52
 80039ac:	701a      	strb	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2252      	movs	r2, #82	; 0x52
 80039b2:	705a      	strb	r2, [r3, #1]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2261      	movs	r2, #97	; 0x61
 80039b8:	709a      	strb	r2, [r3, #2]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2241      	movs	r2, #65	; 0x41
 80039be:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2272      	movs	r2, #114	; 0x72
 80039c4:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2272      	movs	r2, #114	; 0x72
 80039cc:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2241      	movs	r2, #65	; 0x41
 80039d4:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2261      	movs	r2, #97	; 0x61
 80039dc:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	0a1b      	lsrs	r3, r3, #8
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	b2da      	uxtb	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	0c1b      	lsrs	r3, r3, #16
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	0e1b      	lsrs	r3, r3, #24
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	0a1b      	lsrs	r3, r3, #8
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	0c1b      	lsrs	r3, r3, #16
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	0e1b      	lsrs	r3, r3, #24
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a84:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a8c:	7858      	ldrb	r0, [r3, #1]
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a98:	2301      	movs	r3, #1
 8003a9a:	f7ff fc61 	bl	8003360 <disk_write>
			fs->fsi_flag = 0;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aae:	785b      	ldrb	r3, [r3, #1]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff fc73 	bl	80033a0 <disk_ioctl>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <sync_fs+0x174>
			res = FR_DISK_ERR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
 8003ad6:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	3b02      	subs	r3, #2
 8003adc:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	3b02      	subs	r3, #2
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d301      	bcc.n	8003af2 <clust2sect+0x24>
 8003aee:	2300      	movs	r3, #0
 8003af0:	e00c      	b.n	8003b0c <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003af8:	789b      	ldrb	r3, [r3, #2]
 8003afa:	461a      	mov	r2, r3
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	fb03 f202 	mul.w	r2, r3, r2
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0a:	4413      	add	r3, r2
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bc80      	pop	{r7}
 8003b14:	4770      	bx	lr

08003b16 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b086      	sub	sp, #24
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d906      	bls.n	8003b34 <get_fat+0x1e>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d302      	bcc.n	8003b3a <get_fat+0x24>
		val = 1;	/* Internal error */
 8003b34:	2301      	movs	r3, #1
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	e0e4      	b.n	8003d04 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003b3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b3e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b03      	cmp	r3, #3
 8003b4a:	f000 8098 	beq.w	8003c7e <get_fat+0x168>
 8003b4e:	2b03      	cmp	r3, #3
 8003b50:	f300 80ce 	bgt.w	8003cf0 <get_fat+0x1da>
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d002      	beq.n	8003b5e <get_fat+0x48>
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d05f      	beq.n	8003c1c <get_fat+0x106>
 8003b5c:	e0c8      	b.n	8003cf0 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	085b      	lsrs	r3, r3, #1
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	4413      	add	r3, r2
 8003b6a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b72:	6a1a      	ldr	r2, [r3, #32]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b7a:	895b      	ldrh	r3, [r3, #10]
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b84:	4413      	add	r3, r2
 8003b86:	4619      	mov	r1, r3
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7ff feaf 	bl	80038ec <move_window>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f040 80b0 	bne.w	8003cf6 <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	60fa      	str	r2, [r7, #12]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ba2:	8952      	ldrh	r2, [r2, #10]
 8003ba4:	fbb3 f1f2 	udiv	r1, r3, r2
 8003ba8:	fb01 f202 	mul.w	r2, r1, r2
 8003bac:	1a9b      	subs	r3, r3, r2
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	5cd3      	ldrb	r3, [r2, r3]
 8003bb2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bba:	6a1a      	ldr	r2, [r3, #32]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bc2:	895b      	ldrh	r3, [r3, #10]
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bcc:	4413      	add	r3, r2
 8003bce:	4619      	mov	r1, r3
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7ff fe8b 	bl	80038ec <move_window>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f040 808e 	bne.w	8003cfa <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003be4:	895b      	ldrh	r3, [r3, #10]
 8003be6:	461a      	mov	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	fbb3 f1f2 	udiv	r1, r3, r2
 8003bee:	fb01 f202 	mul.w	r2, r1, r2
 8003bf2:	1a9b      	subs	r3, r3, r2
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	5cd3      	ldrb	r3, [r2, r3]
 8003bf8:	021b      	lsls	r3, r3, #8
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d002      	beq.n	8003c12 <get_fat+0xfc>
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	091b      	lsrs	r3, r3, #4
 8003c10:	e002      	b.n	8003c18 <get_fat+0x102>
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c18:	617b      	str	r3, [r7, #20]
			break;
 8003c1a:	e073      	b.n	8003d04 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c22:	6a1a      	ldr	r2, [r3, #32]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c2a:	895b      	ldrh	r3, [r3, #10]
 8003c2c:	085b      	lsrs	r3, r3, #1
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	4619      	mov	r1, r3
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c38:	4413      	add	r3, r2
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7ff fe55 	bl	80038ec <move_window>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d15a      	bne.n	8003cfe <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003c52:	8952      	ldrh	r2, [r2, #10]
 8003c54:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c58:	fb01 f202 	mul.w	r2, r1, r2
 8003c5c:	1a9b      	subs	r3, r3, r2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	4413      	add	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	3301      	adds	r3, #1
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	021b      	lsls	r3, r3, #8
 8003c6c:	b21a      	sxth	r2, r3
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	b21b      	sxth	r3, r3
 8003c74:	4313      	orrs	r3, r2
 8003c76:	b21b      	sxth	r3, r3
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	617b      	str	r3, [r7, #20]
			break;
 8003c7c:	e042      	b.n	8003d04 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c84:	6a1a      	ldr	r2, [r3, #32]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c8c:	895b      	ldrh	r3, [r3, #10]
 8003c8e:	089b      	lsrs	r3, r3, #2
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	4619      	mov	r1, r3
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c9a:	4413      	add	r3, r2
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7ff fe24 	bl	80038ec <move_window>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d12b      	bne.n	8003d02 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003cb4:	8952      	ldrh	r2, [r2, #10]
 8003cb6:	fbb3 f1f2 	udiv	r1, r3, r2
 8003cba:	fb01 f202 	mul.w	r2, r1, r2
 8003cbe:	1a9b      	subs	r3, r3, r2
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	3303      	adds	r3, #3
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	061a      	lsls	r2, r3, #24
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	3302      	adds	r3, #2
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	041b      	lsls	r3, r3, #16
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	3201      	adds	r2, #1
 8003cdc:	7812      	ldrb	r2, [r2, #0]
 8003cde:	0212      	lsls	r2, r2, #8
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	7812      	ldrb	r2, [r2, #0]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003cec:	617b      	str	r3, [r7, #20]
			break;
 8003cee:	e009      	b.n	8003d04 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	e006      	b.n	8003d04 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003cf6:	bf00      	nop
 8003cf8:	e004      	b.n	8003d04 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003cfa:	bf00      	nop
 8003cfc:	e002      	b.n	8003d04 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003cfe:	bf00      	nop
 8003d00:	e000      	b.n	8003d04 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003d02:	bf00      	nop
		}
	}

	return val;
 8003d04:	697b      	ldr	r3, [r7, #20]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b088      	sub	sp, #32
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d906      	bls.n	8003d2e <put_fat+0x20>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d302      	bcc.n	8003d34 <put_fat+0x26>
		res = FR_INT_ERR;
 8003d2e:	2302      	movs	r3, #2
 8003d30:	77fb      	strb	r3, [r7, #31]
 8003d32:	e13a      	b.n	8003faa <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2b03      	cmp	r3, #3
 8003d3e:	f000 80d0 	beq.w	8003ee2 <put_fat+0x1d4>
 8003d42:	2b03      	cmp	r3, #3
 8003d44:	f300 8127 	bgt.w	8003f96 <put_fat+0x288>
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d003      	beq.n	8003d54 <put_fat+0x46>
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	f000 808f 	beq.w	8003e70 <put_fat+0x162>
 8003d52:	e120      	b.n	8003f96 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	085b      	lsrs	r3, r3, #1
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	4413      	add	r3, r2
 8003d60:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d68:	6a1a      	ldr	r2, [r3, #32]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d70:	895b      	ldrh	r3, [r3, #10]
 8003d72:	4619      	mov	r1, r3
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d7a:	4413      	add	r3, r2
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f7ff fdb4 	bl	80038ec <move_window>
 8003d84:	4603      	mov	r3, r0
 8003d86:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003d88:	7ffb      	ldrb	r3, [r7, #31]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f040 8106 	bne.w	8003f9c <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	617a      	str	r2, [r7, #20]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d9c:	8952      	ldrh	r2, [r2, #10]
 8003d9e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003da2:	fb01 f202 	mul.w	r2, r1, r2
 8003da6:	1a9b      	subs	r3, r3, r2
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	4413      	add	r3, r2
 8003dac:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00d      	beq.n	8003dd4 <put_fat+0xc6>
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	b25b      	sxtb	r3, r3
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	b25a      	sxtb	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	011b      	lsls	r3, r3, #4
 8003dca:	b25b      	sxtb	r3, r3
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	b25b      	sxtb	r3, r3
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	e001      	b.n	8003dd8 <put_fat+0xca>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003de2:	2201      	movs	r2, #1
 8003de4:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dec:	6a1a      	ldr	r2, [r3, #32]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003df4:	895b      	ldrh	r3, [r3, #10]
 8003df6:	4619      	mov	r1, r3
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dfe:	4413      	add	r3, r2
 8003e00:	4619      	mov	r1, r3
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f7ff fd72 	bl	80038ec <move_window>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003e0c:	7ffb      	ldrb	r3, [r7, #31]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f040 80c6 	bne.w	8003fa0 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e1a:	895b      	ldrh	r3, [r3, #10]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e24:	fb01 f202 	mul.w	r2, r1, r2
 8003e28:	1a9b      	subs	r3, r3, r2
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <put_fat+0x134>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	091b      	lsrs	r3, r3, #4
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	e00e      	b.n	8003e60 <put_fat+0x152>
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	b25b      	sxtb	r3, r3
 8003e48:	f023 030f 	bic.w	r3, r3, #15
 8003e4c:	b25a      	sxtb	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	0a1b      	lsrs	r3, r3, #8
 8003e52:	b25b      	sxtb	r3, r3
 8003e54:	f003 030f 	and.w	r3, r3, #15
 8003e58:	b25b      	sxtb	r3, r3
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	b25b      	sxtb	r3, r3
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	711a      	strb	r2, [r3, #4]
			break;
 8003e6e:	e09c      	b.n	8003faa <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e76:	6a1a      	ldr	r2, [r3, #32]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e7e:	895b      	ldrh	r3, [r3, #10]
 8003e80:	085b      	lsrs	r3, r3, #1
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	4619      	mov	r1, r3
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e8c:	4413      	add	r3, r2
 8003e8e:	4619      	mov	r1, r3
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f7ff fd2b 	bl	80038ec <move_window>
 8003e96:	4603      	mov	r3, r0
 8003e98:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003e9a:	7ffb      	ldrb	r3, [r7, #31]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f040 8081 	bne.w	8003fa4 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003eac:	8952      	ldrh	r2, [r2, #10]
 8003eae:	fbb3 f1f2 	udiv	r1, r3, r2
 8003eb2:	fb01 f202 	mul.w	r2, r1, r2
 8003eb6:	1a9b      	subs	r3, r3, r2
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	4413      	add	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	701a      	strb	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	0a1b      	lsrs	r3, r3, #8
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	b2d2      	uxtb	r2, r2
 8003ed4:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003edc:	2201      	movs	r2, #1
 8003ede:	711a      	strb	r2, [r3, #4]
			break;
 8003ee0:	e063      	b.n	8003faa <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ee8:	6a1a      	ldr	r2, [r3, #32]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ef0:	895b      	ldrh	r3, [r3, #10]
 8003ef2:	089b      	lsrs	r3, r3, #2
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8003efe:	4413      	add	r3, r2
 8003f00:	4619      	mov	r1, r3
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f7ff fcf2 	bl	80038ec <move_window>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003f0c:	7ffb      	ldrb	r3, [r7, #31]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d14a      	bne.n	8003fa8 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f1c:	8952      	ldrh	r2, [r2, #10]
 8003f1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f22:	fb01 f202 	mul.w	r2, r1, r2
 8003f26:	1a9b      	subs	r3, r3, r2
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	3303      	adds	r3, #3
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	061a      	lsls	r2, r3, #24
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	3302      	adds	r3, #2
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	041b      	lsls	r3, r3, #16
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	3201      	adds	r2, #1
 8003f44:	7812      	ldrb	r2, [r2, #0]
 8003f46:	0212      	lsls	r2, r2, #8
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	7812      	ldrb	r2, [r2, #0]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	701a      	strb	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	0a1b      	lsrs	r3, r3, #8
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	701a      	strb	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	0c1a      	lsrs	r2, r3, #16
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	3302      	adds	r3, #2
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	701a      	strb	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	0e1a      	lsrs	r2, r3, #24
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	3303      	adds	r3, #3
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f90:	2201      	movs	r2, #1
 8003f92:	711a      	strb	r2, [r3, #4]
			break;
 8003f94:	e009      	b.n	8003faa <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8003f96:	2302      	movs	r3, #2
 8003f98:	77fb      	strb	r3, [r7, #31]
 8003f9a:	e006      	b.n	8003faa <put_fat+0x29c>
			if (res != FR_OK) break;
 8003f9c:	bf00      	nop
 8003f9e:	e004      	b.n	8003faa <put_fat+0x29c>
			if (res != FR_OK) break;
 8003fa0:	bf00      	nop
 8003fa2:	e002      	b.n	8003faa <put_fat+0x29c>
			if (res != FR_OK) break;
 8003fa4:	bf00      	nop
 8003fa6:	e000      	b.n	8003faa <put_fat+0x29c>
			if (res != FR_OK) break;
 8003fa8:	bf00      	nop
		}
	}

	return res;
 8003faa:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3720      	adds	r7, #32
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d906      	bls.n	8003fd2 <remove_chain+0x1e>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d302      	bcc.n	8003fd8 <remove_chain+0x24>
		res = FR_INT_ERR;
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	73fb      	strb	r3, [r7, #15]
 8003fd6:	e049      	b.n	800406c <remove_chain+0xb8>

	} else {
		res = FR_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003fdc:	e03b      	b.n	8004056 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8003fde:	6839      	ldr	r1, [r7, #0]
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f7ff fd98 	bl	8003b16 <get_fat>
 8003fe6:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d03b      	beq.n	8004066 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d102      	bne.n	8003ffa <remove_chain+0x46>
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	73fb      	strb	r3, [r7, #15]
 8003ff8:	e038      	b.n	800406c <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004000:	d102      	bne.n	8004008 <remove_chain+0x54>
 8004002:	2301      	movs	r3, #1
 8004004:	73fb      	strb	r3, [r7, #15]
 8004006:	e031      	b.n	800406c <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8004008:	2200      	movs	r2, #0
 800400a:	6839      	ldr	r1, [r7, #0]
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7ff fe7e 	bl	8003d0e <put_fat>
 8004012:	4603      	mov	r3, r0
 8004014:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004016:	7bfb      	ldrb	r3, [r7, #15]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d126      	bne.n	800406a <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004028:	d013      	beq.n	8004052 <remove_chain+0x9e>
				fs->free_clust++;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	3301      	adds	r3, #1
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800403a:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004042:	795b      	ldrb	r3, [r3, #5]
 8004044:	f043 0301 	orr.w	r3, r3, #1
 8004048:	b2da      	uxtb	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004050:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	429a      	cmp	r2, r3
 8004062:	d3bc      	bcc.n	8003fde <remove_chain+0x2a>
 8004064:	e002      	b.n	800406c <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8004066:	bf00      	nop
 8004068:	e000      	b.n	800406c <remove_chain+0xb8>
			if (res != FR_OK) break;
 800406a:	bf00      	nop
		}
	}

	return res;
 800406c:	7bfb      	ldrb	r3, [r7, #15]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b086      	sub	sp, #24
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
 800407e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d111      	bne.n	80040aa <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d006      	beq.n	80040a4 <create_chain+0x2e>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d31d      	bcc.n	80040e0 <create_chain+0x6a>
 80040a4:	2301      	movs	r3, #1
 80040a6:	613b      	str	r3, [r7, #16]
 80040a8:	e01a      	b.n	80040e0 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80040aa:	6839      	ldr	r1, [r7, #0]
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7ff fd32 	bl	8003b16 <get_fat>
 80040b2:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d801      	bhi.n	80040be <create_chain+0x48>
 80040ba:	2301      	movs	r3, #1
 80040bc:	e07f      	b.n	80041be <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040c4:	d101      	bne.n	80040ca <create_chain+0x54>
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	e079      	b.n	80041be <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d201      	bcs.n	80040dc <create_chain+0x66>
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	e070      	b.n	80041be <create_chain+0x148>
		scl = clst;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	3301      	adds	r3, #1
 80040e8:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d307      	bcc.n	8004108 <create_chain+0x92>
			ncl = 2;
 80040f8:	2302      	movs	r3, #2
 80040fa:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	429a      	cmp	r2, r3
 8004102:	d901      	bls.n	8004108 <create_chain+0x92>
 8004104:	2300      	movs	r3, #0
 8004106:	e05a      	b.n	80041be <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8004108:	6979      	ldr	r1, [r7, #20]
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7ff fd03 	bl	8003b16 <get_fat>
 8004110:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00e      	beq.n	8004136 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800411e:	d002      	beq.n	8004126 <create_chain+0xb0>
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d101      	bne.n	800412a <create_chain+0xb4>
			return cs;
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	e049      	b.n	80041be <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	429a      	cmp	r2, r3
 8004130:	d1d8      	bne.n	80040e4 <create_chain+0x6e>
 8004132:	2300      	movs	r3, #0
 8004134:	e043      	b.n	80041be <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8004136:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8004138:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800413c:	6979      	ldr	r1, [r7, #20]
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7ff fde5 	bl	8003d0e <put_fat>
 8004144:	4603      	mov	r3, r0
 8004146:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d109      	bne.n	8004162 <create_chain+0xec>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d006      	beq.n	8004162 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	6839      	ldr	r1, [r7, #0]
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7ff fdd8 	bl	8003d0e <put_fat>
 800415e:	4603      	mov	r3, r0
 8004160:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8004162:	7bfb      	ldrb	r3, [r7, #15]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d121      	bne.n	80041ac <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800416e:	461a      	mov	r2, r3
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004180:	d01c      	beq.n	80041bc <create_chain+0x146>
			fs->free_clust--;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	3b01      	subs	r3, #1
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004192:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800419a:	795b      	ldrb	r3, [r3, #5]
 800419c:	f043 0301 	orr.w	r3, r3, #1
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041a8:	715a      	strb	r2, [r3, #5]
 80041aa:	e007      	b.n	80041bc <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d102      	bne.n	80041b8 <create_chain+0x142>
 80041b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041b6:	e000      	b.n	80041ba <create_chain+0x144>
 80041b8:	2301      	movs	r3, #1
 80041ba:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80041bc:	697b      	ldr	r3, [r7, #20]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3718      	adds	r7, #24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b087      	sub	sp, #28
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d8:	3304      	adds	r3, #4
 80041da:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041e8:	895b      	ldrh	r3, [r3, #10]
 80041ea:	461a      	mov	r2, r3
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041f8:	6812      	ldr	r2, [r2, #0]
 80041fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041fe:	7892      	ldrb	r2, [r2, #2]
 8004200:	fbb3 f3f2 	udiv	r3, r3, r2
 8004204:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1d1a      	adds	r2, r3, #4
 800420a:	613a      	str	r2, [r7, #16]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <clmt_clust+0x54>
 8004216:	2300      	movs	r3, #0
 8004218:	e010      	b.n	800423c <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	429a      	cmp	r2, r3
 8004220:	d307      	bcc.n	8004232 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	3304      	adds	r3, #4
 800422e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004230:	e7e9      	b.n	8004206 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8004232:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	4413      	add	r3, r2
}
 800423c:	4618      	mov	r0, r3
 800423e:	371c      	adds	r7, #28
 8004240:	46bd      	mov	sp, r7
 8004242:	bc80      	pop	{r7}
 8004244:	4770      	bx	lr

08004246 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b086      	sub	sp, #24
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
 800424e:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	b29a      	uxth	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800425a:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d009      	beq.n	8004280 <dir_sdi+0x3a>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	429a      	cmp	r2, r3
 800427e:	d301      	bcc.n	8004284 <dir_sdi+0x3e>
		return FR_INT_ERR;
 8004280:	2302      	movs	r3, #2
 8004282:	e0aa      	b.n	80043da <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d110      	bne.n	80042ac <dir_sdi+0x66>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	2b03      	cmp	r3, #3
 800429a:	d107      	bne.n	80042ac <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042aa:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d115      	bne.n	80042de <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042be:	891b      	ldrh	r3, [r3, #8]
 80042c0:	461a      	mov	r2, r3
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d301      	bcc.n	80042cc <dir_sdi+0x86>
			return FR_INT_ERR;
 80042c8:	2302      	movs	r3, #2
 80042ca:	e086      	b.n	80043da <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	613b      	str	r3, [r7, #16]
 80042dc:	e043      	b.n	8004366 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ea:	895b      	ldrh	r3, [r3, #10]
 80042ec:	095b      	lsrs	r3, r3, #5
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	461a      	mov	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042fe:	789b      	ldrb	r3, [r3, #2]
 8004300:	fb02 f303 	mul.w	r3, r2, r3
 8004304:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8004306:	e021      	b.n	800434c <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6979      	ldr	r1, [r7, #20]
 8004312:	4618      	mov	r0, r3
 8004314:	f7ff fbff 	bl	8003b16 <get_fat>
 8004318:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004320:	d101      	bne.n	8004326 <dir_sdi+0xe0>
 8004322:	2301      	movs	r3, #1
 8004324:	e059      	b.n	80043da <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d909      	bls.n	8004340 <dir_sdi+0xfa>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	429a      	cmp	r2, r3
 800433e:	d301      	bcc.n	8004344 <dir_sdi+0xfe>
				return FR_INT_ERR;
 8004340:	2302      	movs	r3, #2
 8004342:	e04a      	b.n	80043da <dir_sdi+0x194>
			idx -= ic;
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	429a      	cmp	r2, r3
 8004352:	d2d9      	bcs.n	8004308 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6979      	ldr	r1, [r7, #20]
 800435e:	4618      	mov	r0, r3
 8004360:	f7ff fbb5 	bl	8003ace <clust2sect>
 8004364:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800436c:	461a      	mov	r2, r3
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <dir_sdi+0x136>
 8004378:	2302      	movs	r3, #2
 800437a:	e02e      	b.n	80043da <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004388:	895b      	ldrh	r3, [r3, #10]
 800438a:	095b      	lsrs	r3, r3, #5
 800438c:	b29b      	uxth	r3, r3
 800438e:	461a      	mov	r2, r3
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	fbb3 f2f2 	udiv	r2, r3, r2
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	4413      	add	r3, r2
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043a0:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043b8:	895b      	ldrh	r3, [r3, #10]
 80043ba:	095b      	lsrs	r3, r3, #5
 80043bc:	b29b      	uxth	r3, r3
 80043be:	461a      	mov	r2, r3
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80043c6:	fb01 f202 	mul.w	r2, r1, r2
 80043ca:	1a9b      	subs	r3, r3, r2
 80043cc:	015b      	lsls	r3, r3, #5
 80043ce:	4403      	add	r3, r0
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043d6:	6153      	str	r3, [r2, #20]

	return FR_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80043e2:	b590      	push	{r4, r7, lr}
 80043e4:	b087      	sub	sp, #28
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043f2:	88db      	ldrh	r3, [r3, #6]
 80043f4:	3301      	adds	r3, #1
 80043f6:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d005      	beq.n	800440c <dir_next+0x2a>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <dir_next+0x2e>
		return FR_NO_FILE;
 800440c:	2304      	movs	r3, #4
 800440e:	e12e      	b.n	800466e <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800441c:	895b      	ldrh	r3, [r3, #10]
 800441e:	095b      	lsrs	r3, r3, #5
 8004420:	b29b      	uxth	r3, r3
 8004422:	461a      	mov	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	fbb3 f1f2 	udiv	r1, r3, r2
 800442a:	fb01 f202 	mul.w	r2, r1, r2
 800442e:	1a9b      	subs	r3, r3, r2
 8004430:	2b00      	cmp	r3, #0
 8004432:	f040 80fa 	bne.w	800462a <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	3301      	adds	r3, #1
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004446:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10d      	bne.n	8004470 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004460:	891b      	ldrh	r3, [r3, #8]
 8004462:	461a      	mov	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4293      	cmp	r3, r2
 8004468:	f0c0 80df 	bcc.w	800462a <dir_next+0x248>
				return FR_NO_FILE;
 800446c:	2304      	movs	r3, #4
 800446e:	e0fe      	b.n	800466e <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800447c:	895b      	ldrh	r3, [r3, #10]
 800447e:	095b      	lsrs	r3, r3, #5
 8004480:	b29b      	uxth	r3, r3
 8004482:	461a      	mov	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	fbb3 f3f2 	udiv	r3, r3, r2
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004490:	6812      	ldr	r2, [r2, #0]
 8004492:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004496:	7892      	ldrb	r2, [r2, #2]
 8004498:	3a01      	subs	r2, #1
 800449a:	4013      	ands	r3, r2
 800449c:	2b00      	cmp	r3, #0
 800449e:	f040 80c4 	bne.w	800462a <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	4619      	mov	r1, r3
 80044b4:	4610      	mov	r0, r2
 80044b6:	f7ff fb2e 	bl	8003b16 <get_fat>
 80044ba:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d801      	bhi.n	80044c6 <dir_next+0xe4>
 80044c2:	2302      	movs	r3, #2
 80044c4:	e0d3      	b.n	800466e <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044cc:	d101      	bne.n	80044d2 <dir_next+0xf0>
 80044ce:	2301      	movs	r3, #1
 80044d0:	e0cd      	b.n	800466e <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	f0c0 808e 	bcc.w	8004604 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <dir_next+0x110>
 80044ee:	2304      	movs	r3, #4
 80044f0:	e0bd      	b.n	800466e <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	4619      	mov	r1, r3
 8004504:	4610      	mov	r0, r2
 8004506:	f7ff fdb6 	bl	8004076 <create_chain>
 800450a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <dir_next+0x134>
 8004512:	2307      	movs	r3, #7
 8004514:	e0ab      	b.n	800466e <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d101      	bne.n	8004520 <dir_next+0x13e>
 800451c:	2302      	movs	r3, #2
 800451e:	e0a6      	b.n	800466e <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004526:	d101      	bne.n	800452c <dir_next+0x14a>
 8004528:	2301      	movs	r3, #1
 800452a:	e0a0      	b.n	800466e <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff f987 	bl	8003848 <sync_window>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <dir_next+0x162>
 8004540:	2301      	movs	r3, #1
 8004542:	e094      	b.n	800466e <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4618      	mov	r0, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800455a:	895b      	ldrh	r3, [r3, #10]
 800455c:	461a      	mov	r2, r3
 800455e:	2100      	movs	r1, #0
 8004560:	f7fe ff5a 	bl	8003418 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004572:	681c      	ldr	r4, [r3, #0]
 8004574:	6979      	ldr	r1, [r7, #20]
 8004576:	4610      	mov	r0, r2
 8004578:	f7ff faa9 	bl	8003ace <clust2sect>
 800457c:	4603      	mov	r3, r0
 800457e:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 8004582:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004584:	2300      	movs	r3, #0
 8004586:	613b      	str	r3, [r7, #16]
 8004588:	e021      	b.n	80045ce <dir_next+0x1ec>
						dp->fs->wflag = 1;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004596:	2201      	movs	r2, #1
 8004598:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7ff f950 	bl	8003848 <sync_window>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <dir_next+0x1d0>
 80045ae:	2301      	movs	r3, #1
 80045b0:	e05d      	b.n	800466e <dir_next+0x28c>
						dp->fs->winsect++;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80045be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80045c0:	3201      	adds	r2, #1
 80045c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045c6:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	3301      	adds	r3, #1
 80045cc:	613b      	str	r3, [r7, #16]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045da:	789b      	ldrb	r3, [r3, #2]
 80045dc:	461a      	mov	r2, r3
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d3d2      	bcc.n	800458a <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1acb      	subs	r3, r1, r3
 80045fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004602:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800460a:	461a      	mov	r2, r3
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6979      	ldr	r1, [r7, #20]
 800461a:	4618      	mov	r0, r3
 800461c:	f7ff fa57 	bl	8003ace <clust2sect>
 8004620:	4602      	mov	r2, r0
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004628:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	b29a      	uxth	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004634:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4618      	mov	r0, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800464c:	895b      	ldrh	r3, [r3, #10]
 800464e:	095b      	lsrs	r3, r3, #5
 8004650:	b29b      	uxth	r3, r3
 8004652:	461a      	mov	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	fbb3 f1f2 	udiv	r1, r3, r2
 800465a:	fb01 f202 	mul.w	r2, r1, r2
 800465e:	1a9b      	subs	r3, r3, r2
 8004660:	015b      	lsls	r3, r3, #5
 8004662:	4403      	add	r3, r0
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800466a:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	371c      	adds	r7, #28
 8004672:	46bd      	mov	sp, r7
 8004674:	bd90      	pop	{r4, r7, pc}

08004676 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b084      	sub	sp, #16
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8004680:	2100      	movs	r1, #0
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7ff fddf 	bl	8004246 <dir_sdi>
 8004688:	4603      	mov	r3, r0
 800468a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800468c:	7bfb      	ldrb	r3, [r7, #15]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d135      	bne.n	80046fe <dir_alloc+0x88>
		n = 0;
 8004692:	2300      	movs	r3, #0
 8004694:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	4619      	mov	r1, r3
 80046a8:	4610      	mov	r0, r2
 80046aa:	f7ff f91f 	bl	80038ec <move_window>
 80046ae:	4603      	mov	r3, r0
 80046b0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d121      	bne.n	80046fc <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	2be5      	cmp	r3, #229	; 0xe5
 80046c4:	d006      	beq.n	80046d4 <dir_alloc+0x5e>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d107      	bne.n	80046e4 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	3301      	adds	r3, #1
 80046d8:	60bb      	str	r3, [r7, #8]
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d102      	bne.n	80046e8 <dir_alloc+0x72>
 80046e2:	e00c      	b.n	80046fe <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80046e4:	2300      	movs	r3, #0
 80046e6:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80046e8:	2101      	movs	r1, #1
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7ff fe79 	bl	80043e2 <dir_next>
 80046f0:	4603      	mov	r3, r0
 80046f2:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80046f4:	7bfb      	ldrb	r3, [r7, #15]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0cd      	beq.n	8004696 <dir_alloc+0x20>
 80046fa:	e000      	b.n	80046fe <dir_alloc+0x88>
			if (res != FR_OK) break;
 80046fc:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
 8004700:	2b04      	cmp	r3, #4
 8004702:	d101      	bne.n	8004708 <dir_alloc+0x92>
 8004704:	2307      	movs	r3, #7
 8004706:	73fb      	strb	r3, [r7, #15]
	return res;
 8004708:	7bfb      	ldrb	r3, [r7, #15]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8004712:	b480      	push	{r7}
 8004714:	b085      	sub	sp, #20
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	331b      	adds	r3, #27
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	021b      	lsls	r3, r3, #8
 8004724:	b21a      	sxth	r2, r3
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	331a      	adds	r3, #26
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	b21b      	sxth	r3, r3
 800472e:	4313      	orrs	r3, r2
 8004730:	b21b      	sxth	r3, r3
 8004732:	b29b      	uxth	r3, r3
 8004734:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	2b03      	cmp	r3, #3
 8004740:	d10f      	bne.n	8004762 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	3315      	adds	r3, #21
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	021b      	lsls	r3, r3, #8
 800474a:	b21a      	sxth	r2, r3
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	3314      	adds	r3, #20
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	b21b      	sxth	r3, r3
 8004754:	4313      	orrs	r3, r2
 8004756:	b21b      	sxth	r3, r3
 8004758:	b29b      	uxth	r3, r3
 800475a:	041b      	lsls	r3, r3, #16
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	4313      	orrs	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]

	return cl;
 8004762:	68fb      	ldr	r3, [r7, #12]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	bc80      	pop	{r7}
 800476c:	4770      	bx	lr

0800476e <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800476e:	b480      	push	{r7}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
 8004776:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	331a      	adds	r3, #26
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	701a      	strb	r2, [r3, #0]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	b29b      	uxth	r3, r3
 8004786:	0a1b      	lsrs	r3, r3, #8
 8004788:	b29a      	uxth	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	331b      	adds	r3, #27
 800478e:	b2d2      	uxtb	r2, r2
 8004790:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	0c1a      	lsrs	r2, r3, #16
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	3314      	adds	r3, #20
 800479a:	b2d2      	uxtb	r2, r2
 800479c:	701a      	strb	r2, [r3, #0]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	0c1b      	lsrs	r3, r3, #16
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	0a1b      	lsrs	r3, r3, #8
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	3315      	adds	r3, #21
 80047ac:	b2d2      	uxtb	r2, r2
 80047ae:	701a      	strb	r2, [r3, #0]
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bc80      	pop	{r7}
 80047b8:	4770      	bx	lr
	...

080047bc <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ce:	1e5a      	subs	r2, r3, #1
 80047d0:	4613      	mov	r3, r2
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	4413      	add	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 80047dc:	2300      	movs	r3, #0
 80047de:	613b      	str	r3, [r7, #16]
 80047e0:	2301      	movs	r3, #1
 80047e2:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 80047e4:	4a2b      	ldr	r2, [pc, #172]	; (8004894 <cmp_lfn+0xd8>)
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	4413      	add	r3, r2
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	3301      	adds	r3, #1
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	4413      	add	r3, r2
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	021b      	lsls	r3, r3, #8
 80047f6:	b21a      	sxth	r2, r3
 80047f8:	4926      	ldr	r1, [pc, #152]	; (8004894 <cmp_lfn+0xd8>)
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	440b      	add	r3, r1
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	4619      	mov	r1, r3
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	440b      	add	r3, r1
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	b21b      	sxth	r3, r3
 800480a:	4313      	orrs	r3, r2
 800480c:	b21b      	sxth	r3, r3
 800480e:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8004810:	89fb      	ldrh	r3, [r7, #14]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d019      	beq.n	800484a <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8004816:	89bb      	ldrh	r3, [r7, #12]
 8004818:	4618      	mov	r0, r3
 800481a:	f002 fa1b 	bl	8006c54 <ff_wtoupper>
 800481e:	4603      	mov	r3, r0
 8004820:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2bfe      	cmp	r3, #254	; 0xfe
 8004826:	d80e      	bhi.n	8004846 <cmp_lfn+0x8a>
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	1c5a      	adds	r2, r3, #1
 800482c:	617a      	str	r2, [r7, #20]
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	4413      	add	r3, r2
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	4618      	mov	r0, r3
 8004838:	f002 fa0c 	bl	8006c54 <ff_wtoupper>
 800483c:	4603      	mov	r3, r0
 800483e:	461a      	mov	r2, r3
 8004840:	89fb      	ldrh	r3, [r7, #14]
 8004842:	4293      	cmp	r3, r2
 8004844:	d008      	beq.n	8004858 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8004846:	2300      	movs	r3, #0
 8004848:	e01f      	b.n	800488a <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800484a:	89bb      	ldrh	r3, [r7, #12]
 800484c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004850:	4293      	cmp	r3, r2
 8004852:	d001      	beq.n	8004858 <cmp_lfn+0x9c>
 8004854:	2300      	movs	r3, #0
 8004856:	e018      	b.n	800488a <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	3301      	adds	r3, #1
 800485c:	613b      	str	r3, [r7, #16]
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	2b0c      	cmp	r3, #12
 8004862:	d9bf      	bls.n	80047e4 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00b      	beq.n	8004888 <cmp_lfn+0xcc>
 8004870:	89fb      	ldrh	r3, [r7, #14]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d008      	beq.n	8004888 <cmp_lfn+0xcc>
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	4413      	add	r3, r2
 800487e:	881b      	ldrh	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <cmp_lfn+0xcc>
		return 0;
 8004884:	2300      	movs	r3, #0
 8004886:	e000      	b.n	800488a <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8004888:	2301      	movs	r3, #1
}
 800488a:	4618      	mov	r0, r3
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	08006ee4 	.word	0x08006ee4

08004898 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8004898:	b480      	push	{r7}
 800489a:	b089      	sub	sp, #36	; 0x24
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	4611      	mov	r1, r2
 80048a4:	461a      	mov	r2, r3
 80048a6:	460b      	mov	r3, r1
 80048a8:	71fb      	strb	r3, [r7, #7]
 80048aa:	4613      	mov	r3, r2
 80048ac:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	330d      	adds	r3, #13
 80048b2:	79ba      	ldrb	r2, [r7, #6]
 80048b4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	330b      	adds	r3, #11
 80048ba:	220f      	movs	r2, #15
 80048bc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	330c      	adds	r3, #12
 80048c2:	2200      	movs	r2, #0
 80048c4:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	331a      	adds	r3, #26
 80048ca:	2200      	movs	r2, #0
 80048cc:	701a      	strb	r2, [r3, #0]
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	331b      	adds	r3, #27
 80048d2:	2200      	movs	r2, #0
 80048d4:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80048d6:	79fb      	ldrb	r3, [r7, #7]
 80048d8:	1e5a      	subs	r2, r3, #1
 80048da:	4613      	mov	r3, r2
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	4413      	add	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80048e6:	2300      	movs	r3, #0
 80048e8:	82fb      	strh	r3, [r7, #22]
 80048ea:	2300      	movs	r3, #0
 80048ec:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 80048ee:	8afb      	ldrh	r3, [r7, #22]
 80048f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d007      	beq.n	8004908 <fit_lfn+0x70>
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	61fa      	str	r2, [r7, #28]
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	4413      	add	r3, r2
 8004904:	881b      	ldrh	r3, [r3, #0]
 8004906:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8004908:	4a1c      	ldr	r2, [pc, #112]	; (800497c <fit_lfn+0xe4>)
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	4413      	add	r3, r2
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	461a      	mov	r2, r3
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	4413      	add	r3, r2
 8004916:	8afa      	ldrh	r2, [r7, #22]
 8004918:	b2d2      	uxtb	r2, r2
 800491a:	701a      	strb	r2, [r3, #0]
 800491c:	8afb      	ldrh	r3, [r7, #22]
 800491e:	0a1b      	lsrs	r3, r3, #8
 8004920:	b299      	uxth	r1, r3
 8004922:	4a16      	ldr	r2, [pc, #88]	; (800497c <fit_lfn+0xe4>)
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	4413      	add	r3, r2
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	3301      	adds	r3, #1
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	4413      	add	r3, r2
 8004930:	b2ca      	uxtb	r2, r1
 8004932:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8004934:	8afb      	ldrh	r3, [r7, #22]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d102      	bne.n	8004940 <fit_lfn+0xa8>
 800493a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800493e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	3301      	adds	r3, #1
 8004944:	61bb      	str	r3, [r7, #24]
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	2b0c      	cmp	r3, #12
 800494a:	d9d0      	bls.n	80048ee <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800494c:	8afb      	ldrh	r3, [r7, #22]
 800494e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004952:	4293      	cmp	r3, r2
 8004954:	d006      	beq.n	8004964 <fit_lfn+0xcc>
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	4413      	add	r3, r2
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d103      	bne.n	800496c <fit_lfn+0xd4>
 8004964:	79fb      	ldrb	r3, [r7, #7]
 8004966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800496a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	79fa      	ldrb	r2, [r7, #7]
 8004970:	701a      	strb	r2, [r3, #0]
}
 8004972:	bf00      	nop
 8004974:	3724      	adds	r7, #36	; 0x24
 8004976:	46bd      	mov	sp, r7
 8004978:	bc80      	pop	{r7}
 800497a:	4770      	bx	lr
 800497c:	08006ee4 	.word	0x08006ee4

08004980 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b08c      	sub	sp, #48	; 0x30
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
 800498c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800498e:	220b      	movs	r2, #11
 8004990:	68b9      	ldr	r1, [r7, #8]
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f7fe fd22 	bl	80033dc <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2b05      	cmp	r3, #5
 800499c:	d92b      	bls.n	80049f6 <gen_numname+0x76>
		sr = seq;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80049a2:	e022      	b.n	80049ea <gen_numname+0x6a>
			wc = *lfn++;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	1c9a      	adds	r2, r3, #2
 80049a8:	607a      	str	r2, [r7, #4]
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80049ae:	2300      	movs	r3, #0
 80049b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80049b2:	e017      	b.n	80049e4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	005a      	lsls	r2, r3, #1
 80049b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	4413      	add	r3, r2
 80049c0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80049c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049c4:	085b      	lsrs	r3, r3, #1
 80049c6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d005      	beq.n	80049de <gen_numname+0x5e>
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80049d8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80049dc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80049de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e0:	3301      	adds	r3, #1
 80049e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80049e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e6:	2b0f      	cmp	r3, #15
 80049e8:	d9e4      	bls.n	80049b4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	881b      	ldrh	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1d8      	bne.n	80049a4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80049f6:	2307      	movs	r3, #7
 80049f8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	f003 030f 	and.w	r3, r3, #15
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	3330      	adds	r3, #48	; 0x30
 8004a06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8004a0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a0e:	2b39      	cmp	r3, #57	; 0x39
 8004a10:	d904      	bls.n	8004a1c <gen_numname+0x9c>
 8004a12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a16:	3307      	adds	r3, #7
 8004a18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8004a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1e:	1e5a      	subs	r2, r3, #1
 8004a20:	62ba      	str	r2, [r7, #40]	; 0x28
 8004a22:	3330      	adds	r3, #48	; 0x30
 8004a24:	443b      	add	r3, r7
 8004a26:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004a2a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	091b      	lsrs	r3, r3, #4
 8004a32:	603b      	str	r3, [r7, #0]
	} while (seq);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1df      	bne.n	80049fa <gen_numname+0x7a>
	ns[i] = '~';
 8004a3a:	f107 0214 	add.w	r2, r7, #20
 8004a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a40:	4413      	add	r3, r2
 8004a42:	227e      	movs	r2, #126	; 0x7e
 8004a44:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004a46:	2300      	movs	r3, #0
 8004a48:	627b      	str	r3, [r7, #36]	; 0x24
 8004a4a:	e002      	b.n	8004a52 <gen_numname+0xd2>
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	3301      	adds	r3, #1
 8004a50:	627b      	str	r3, [r7, #36]	; 0x24
 8004a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d205      	bcs.n	8004a66 <gen_numname+0xe6>
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	4413      	add	r3, r2
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	2b20      	cmp	r3, #32
 8004a64:	d1f2      	bne.n	8004a4c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a68:	2b07      	cmp	r3, #7
 8004a6a:	d807      	bhi.n	8004a7c <gen_numname+0xfc>
 8004a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6e:	1c5a      	adds	r2, r3, #1
 8004a70:	62ba      	str	r2, [r7, #40]	; 0x28
 8004a72:	3330      	adds	r3, #48	; 0x30
 8004a74:	443b      	add	r3, r7
 8004a76:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8004a7a:	e000      	b.n	8004a7e <gen_numname+0xfe>
 8004a7c:	2120      	movs	r1, #32
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	1c5a      	adds	r2, r3, #1
 8004a82:	627a      	str	r2, [r7, #36]	; 0x24
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	4413      	add	r3, r2
 8004a88:	460a      	mov	r2, r1
 8004a8a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	2b07      	cmp	r3, #7
 8004a90:	d9e9      	bls.n	8004a66 <gen_numname+0xe6>
}
 8004a92:	bf00      	nop
 8004a94:	bf00      	nop
 8004a96:	3730      	adds	r7, #48	; 0x30
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8004aa8:	230b      	movs	r3, #11
 8004aaa:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	0852      	lsrs	r2, r2, #1
 8004ab2:	01db      	lsls	r3, r3, #7
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	1c59      	adds	r1, r3, #1
 8004abc:	6079      	str	r1, [r7, #4]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	73fb      	strb	r3, [r7, #15]
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	60bb      	str	r3, [r7, #8]
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1ed      	bne.n	8004aac <sum_sfn+0x10>
	return sum;
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr

08004adc <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7ff fbad 	bl	8004246 <dir_sdi>
 8004aec:	4603      	mov	r3, r0
 8004aee:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004af0:	7dfb      	ldrb	r3, [r7, #23]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <dir_find+0x1e>
 8004af6:	7dfb      	ldrb	r3, [r7, #23]
 8004af8:	e0b8      	b.n	8004c6c <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004afa:	23ff      	movs	r3, #255	; 0xff
 8004afc:	753b      	strb	r3, [r7, #20]
 8004afe:	7d3b      	ldrb	r3, [r7, #20]
 8004b00:	757b      	strb	r3, [r7, #21]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b0c:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	4619      	mov	r1, r3
 8004b20:	4610      	mov	r0, r2
 8004b22:	f7fe fee3 	bl	80038ec <move_window>
 8004b26:	4603      	mov	r3, r0
 8004b28:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004b2a:	7dfb      	ldrb	r3, [r7, #23]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f040 8097 	bne.w	8004c60 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004b42:	7dbb      	ldrb	r3, [r7, #22]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d102      	bne.n	8004b4e <dir_find+0x72>
 8004b48:	2304      	movs	r3, #4
 8004b4a:	75fb      	strb	r3, [r7, #23]
 8004b4c:	e08d      	b.n	8004c6a <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	330b      	adds	r3, #11
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b58:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8004b5a:	7dbb      	ldrb	r3, [r7, #22]
 8004b5c:	2be5      	cmp	r3, #229	; 0xe5
 8004b5e:	d007      	beq.n	8004b70 <dir_find+0x94>
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
 8004b62:	f003 0308 	and.w	r3, r3, #8
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00b      	beq.n	8004b82 <dir_find+0xa6>
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
 8004b6c:	2b0f      	cmp	r3, #15
 8004b6e:	d008      	beq.n	8004b82 <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004b70:	23ff      	movs	r3, #255	; 0xff
 8004b72:	757b      	strb	r3, [r7, #21]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b7e:	849a      	strh	r2, [r3, #36]	; 0x24
 8004b80:	e063      	b.n	8004c4a <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8004b82:	7bfb      	ldrb	r3, [r7, #15]
 8004b84:	2b0f      	cmp	r3, #15
 8004b86:	d137      	bne.n	8004bf8 <dir_find+0x11c>
				if (dp->lfn) {
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d05a      	beq.n	8004c4a <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8004b94:	7dbb      	ldrb	r3, [r7, #22]
 8004b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d010      	beq.n	8004bc0 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	7b5b      	ldrb	r3, [r3, #13]
 8004ba2:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8004ba4:	7dbb      	ldrb	r3, [r7, #22]
 8004ba6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004baa:	75bb      	strb	r3, [r7, #22]
 8004bac:	7dbb      	ldrb	r3, [r7, #22]
 8004bae:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bb6:	88da      	ldrh	r2, [r3, #6]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bbe:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8004bc0:	7dba      	ldrb	r2, [r7, #22]
 8004bc2:	7d7b      	ldrb	r3, [r7, #21]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d114      	bne.n	8004bf2 <dir_find+0x116>
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	330d      	adds	r3, #13
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	7d3a      	ldrb	r2, [r7, #20]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d10e      	bne.n	8004bf2 <dir_find+0x116>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	6939      	ldr	r1, [r7, #16]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7ff fdec 	bl	80047bc <cmp_lfn>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <dir_find+0x116>
 8004bea:	7d7b      	ldrb	r3, [r7, #21]
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	e000      	b.n	8004bf4 <dir_find+0x118>
 8004bf2:	23ff      	movs	r3, #255	; 0xff
 8004bf4:	757b      	strb	r3, [r7, #21]
 8004bf6:	e028      	b.n	8004c4a <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8004bf8:	7d7b      	ldrb	r3, [r7, #21]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d107      	bne.n	8004c0e <dir_find+0x132>
 8004bfe:	6938      	ldr	r0, [r7, #16]
 8004c00:	f7ff ff4c 	bl	8004a9c <sum_sfn>
 8004c04:	4603      	mov	r3, r0
 8004c06:	461a      	mov	r2, r3
 8004c08:	7d3b      	ldrb	r3, [r7, #20]
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d02a      	beq.n	8004c64 <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	330b      	adds	r3, #11
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10b      	bne.n	8004c3a <dir_find+0x15e>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	220b      	movs	r2, #11
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	6938      	ldr	r0, [r7, #16]
 8004c30:	f7fe fc0c 	bl	800344c <mem_cmp>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d016      	beq.n	8004c68 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004c3a:	23ff      	movs	r3, #255	; 0xff
 8004c3c:	757b      	strb	r3, [r7, #21]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c48:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7ff fbc8 	bl	80043e2 <dir_next>
 8004c52:	4603      	mov	r3, r0
 8004c54:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004c56:	7dfb      	ldrb	r3, [r7, #23]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f43f af58 	beq.w	8004b0e <dir_find+0x32>
 8004c5e:	e004      	b.n	8004c6a <dir_find+0x18e>
		if (res != FR_OK) break;
 8004c60:	bf00      	nop
 8004c62:	e002      	b.n	8004c6a <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8004c64:	bf00      	nop
 8004c66:	e000      	b.n	8004c6a <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8004c68:	bf00      	nop

	return res;
 8004c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b08c      	sub	sp, #48	; 0x30
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	623b      	str	r3, [r7, #32]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8004c90:	f107 030c 	add.w	r3, r7, #12
 8004c94:	220c      	movs	r2, #12
 8004c96:	6a39      	ldr	r1, [r7, #32]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7fe fb9f 	bl	80033dc <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8004c9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d03b      	beq.n	8004d20 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	330b      	adds	r3, #11
 8004cac:	2200      	movs	r2, #0
 8004cae:	701a      	strb	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	2300      	movs	r3, #0
 8004cba:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cc0:	e013      	b.n	8004cea <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8004cc2:	f107 010c 	add.w	r1, r7, #12
 8004cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc8:	69fa      	ldr	r2, [r7, #28]
 8004cca:	6a38      	ldr	r0, [r7, #32]
 8004ccc:	f7ff fe58 	bl	8004980 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7ff ff03 	bl	8004adc <dir_find>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8004cdc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d106      	bne.n	8004cf2 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8004ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cec:	2b63      	cmp	r3, #99	; 0x63
 8004cee:	d9e8      	bls.n	8004cc2 <dir_register+0x4e>
 8004cf0:	e000      	b.n	8004cf4 <dir_register+0x80>
			if (res != FR_OK) break;
 8004cf2:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8004cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf6:	2b64      	cmp	r3, #100	; 0x64
 8004cf8:	d101      	bne.n	8004cfe <dir_register+0x8a>
 8004cfa:	2307      	movs	r3, #7
 8004cfc:	e0d8      	b.n	8004eb0 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8004cfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	d002      	beq.n	8004d0c <dir_register+0x98>
 8004d06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d0a:	e0d1      	b.n	8004eb0 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	330b      	adds	r3, #11
 8004d10:	7dfa      	ldrb	r2, [r7, #23]
 8004d12:	701a      	strb	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8004d20:	7dfb      	ldrb	r3, [r7, #23]
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d014      	beq.n	8004d54 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d2e:	e002      	b.n	8004d36 <dir_register+0xc2>
 8004d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d32:	3301      	adds	r3, #1
 8004d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	69fa      	ldr	r2, [r7, #28]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	881b      	ldrh	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1f5      	bne.n	8004d30 <dir_register+0xbc>
		nent = (n + 25) / 13;
 8004d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d46:	3319      	adds	r3, #25
 8004d48:	4a5b      	ldr	r2, [pc, #364]	; (8004eb8 <dir_register+0x244>)
 8004d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4e:	089b      	lsrs	r3, r3, #2
 8004d50:	627b      	str	r3, [r7, #36]	; 0x24
 8004d52:	e001      	b.n	8004d58 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8004d54:	2301      	movs	r3, #1
 8004d56:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8004d58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7ff fc8b 	bl	8004676 <dir_alloc>
 8004d60:	4603      	mov	r3, r0
 8004d62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8004d66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d15b      	bne.n	8004e26 <dir_register+0x1b2>
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	3b01      	subs	r3, #1
 8004d72:	627b      	str	r3, [r7, #36]	; 0x24
 8004d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d055      	beq.n	8004e26 <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d80:	88db      	ldrh	r3, [r3, #6]
 8004d82:	461a      	mov	r2, r3
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	4619      	mov	r1, r3
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7ff fa5b 	bl	8004246 <dir_sdi>
 8004d90:	4603      	mov	r3, r0
 8004d92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004d96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d143      	bne.n	8004e26 <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7ff fe78 	bl	8004a9c <sum_sfn>
 8004dac:	4603      	mov	r3, r0
 8004dae:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4610      	mov	r0, r2
 8004dc4:	f7fe fd92 	bl	80038ec <move_window>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8004dce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d126      	bne.n	8004e24 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ddc:	6a18      	ldr	r0, [r3, #32]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004de4:	6959      	ldr	r1, [r3, #20]
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	7efb      	ldrb	r3, [r7, #27]
 8004dec:	f7ff fd54 	bl	8004898 <fit_lfn>
				dp->fs->wflag = 1;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8004e00:	2100      	movs	r1, #0
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7ff faed 	bl	80043e2 <dir_next>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8004e0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d107      	bne.n	8004e26 <dir_register+0x1b2>
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1c6      	bne.n	8004db0 <dir_register+0x13c>
 8004e22:	e000      	b.n	8004e26 <dir_register+0x1b2>
				if (res != FR_OK) break;
 8004e24:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8004e26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d13e      	bne.n	8004eac <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	4619      	mov	r1, r3
 8004e40:	4610      	mov	r0, r2
 8004e42:	f7fe fd53 	bl	80038ec <move_window>
 8004e46:	4603      	mov	r3, r0
 8004e48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004e4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d12b      	bne.n	8004eac <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	2100      	movs	r1, #0
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7fe fad9 	bl	8003418 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e6c:	6958      	ldr	r0, [r3, #20]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	220b      	movs	r2, #11
 8004e78:	4619      	mov	r1, r3
 8004e7a:	f7fe faaf 	bl	80033dc <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	330b      	adds	r3, #11
 8004e88:	781a      	ldrb	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	330c      	adds	r3, #12
 8004e94:	f002 0218 	and.w	r2, r2, #24
 8004e98:	b2d2      	uxtb	r2, r2
 8004e9a:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8004eac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3730      	adds	r7, #48	; 0x30
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	4ec4ec4f 	.word	0x4ec4ec4f

08004ebc <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b08a      	sub	sp, #40	; 0x28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	613b      	str	r3, [r7, #16]
 8004ecc:	e002      	b.n	8004ed4 <create_name+0x18>
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	613b      	str	r3, [r7, #16]
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	2b2f      	cmp	r3, #47	; 0x2f
 8004eda:	d0f8      	beq.n	8004ece <create_name+0x12>
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	2b5c      	cmp	r3, #92	; 0x5c
 8004ee2:	d0f4      	beq.n	8004ece <create_name+0x12>
	lfn = dp->lfn;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	617b      	str	r3, [r7, #20]
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	1c5a      	adds	r2, r3, #1
 8004efa:	61ba      	str	r2, [r7, #24]
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	4413      	add	r3, r2
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8004f04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f06:	2b1f      	cmp	r3, #31
 8004f08:	d92f      	bls.n	8004f6a <create_name+0xae>
 8004f0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f0c:	2b2f      	cmp	r3, #47	; 0x2f
 8004f0e:	d02c      	beq.n	8004f6a <create_name+0xae>
 8004f10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f12:	2b5c      	cmp	r3, #92	; 0x5c
 8004f14:	d029      	beq.n	8004f6a <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2bfe      	cmp	r3, #254	; 0xfe
 8004f1a:	d901      	bls.n	8004f20 <create_name+0x64>
			return FR_INVALID_NAME;
 8004f1c:	2306      	movs	r3, #6
 8004f1e:	e186      	b.n	800522e <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 8004f20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8004f26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f28:	2101      	movs	r1, #1
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f001 fe58 	bl	8006be0 <ff_convert>
 8004f30:	4603      	mov	r3, r0
 8004f32:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8004f34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <create_name+0x82>
 8004f3a:	2306      	movs	r3, #6
 8004f3c:	e177      	b.n	800522e <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8004f3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f40:	2b7f      	cmp	r3, #127	; 0x7f
 8004f42:	d809      	bhi.n	8004f58 <create_name+0x9c>
 8004f44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f46:	4619      	mov	r1, r3
 8004f48:	488e      	ldr	r0, [pc, #568]	; (8005184 <create_name+0x2c8>)
 8004f4a:	f7fe faa5 	bl	8003498 <chk_chr>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <create_name+0x9c>
			return FR_INVALID_NAME;
 8004f54:	2306      	movs	r3, #6
 8004f56:	e16a      	b.n	800522e <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	1c5a      	adds	r2, r3, #1
 8004f5c:	617a      	str	r2, [r7, #20]
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	4413      	add	r3, r2
 8004f64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f66:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8004f68:	e7c5      	b.n	8004ef6 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	441a      	add	r2, r3
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8004f74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f76:	2b1f      	cmp	r3, #31
 8004f78:	d801      	bhi.n	8004f7e <create_name+0xc2>
 8004f7a:	2304      	movs	r3, #4
 8004f7c:	e000      	b.n	8004f80 <create_name+0xc4>
 8004f7e:	2300      	movs	r3, #0
 8004f80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8004f84:	e011      	b.n	8004faa <create_name+0xee>
		w = lfn[di - 1];
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	4413      	add	r3, r2
 8004f94:	881b      	ldrh	r3, [r3, #0]
 8004f96:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8004f98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f9a:	2b20      	cmp	r3, #32
 8004f9c:	d002      	beq.n	8004fa4 <create_name+0xe8>
 8004f9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fa0:	2b2e      	cmp	r3, #46	; 0x2e
 8004fa2:	d106      	bne.n	8004fb2 <create_name+0xf6>
		di--;
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1ea      	bne.n	8004f86 <create_name+0xca>
 8004fb0:	e000      	b.n	8004fb4 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8004fb2:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <create_name+0x102>
 8004fba:	2306      	movs	r3, #6
 8004fbc:	e137      	b.n	800522e <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	220b      	movs	r2, #11
 8004fd4:	2120      	movs	r1, #32
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7fe fa1e 	bl	8003418 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8004fdc:	2300      	movs	r3, #0
 8004fde:	61bb      	str	r3, [r7, #24]
 8004fe0:	e002      	b.n	8004fe8 <create_name+0x12c>
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	61bb      	str	r3, [r7, #24]
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	4413      	add	r3, r2
 8004ff0:	881b      	ldrh	r3, [r3, #0]
 8004ff2:	2b20      	cmp	r3, #32
 8004ff4:	d0f5      	beq.n	8004fe2 <create_name+0x126>
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	2b2e      	cmp	r3, #46	; 0x2e
 8005002:	d0ee      	beq.n	8004fe2 <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d009      	beq.n	800501e <create_name+0x162>
 800500a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800500e:	f043 0303 	orr.w	r3, r3, #3
 8005012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005016:	e002      	b.n	800501e <create_name+0x162>
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	3b01      	subs	r3, #1
 800501c:	617b      	str	r3, [r7, #20]
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d009      	beq.n	8005038 <create_name+0x17c>
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800502a:	3b01      	subs	r3, #1
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	4413      	add	r3, r2
 8005032:	881b      	ldrh	r3, [r3, #0]
 8005034:	2b2e      	cmp	r3, #46	; 0x2e
 8005036:	d1ef      	bne.n	8005018 <create_name+0x15c>

	b = i = 0; ni = 8;
 8005038:	2300      	movs	r3, #0
 800503a:	623b      	str	r3, [r7, #32]
 800503c:	2300      	movs	r3, #0
 800503e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005042:	2308      	movs	r3, #8
 8005044:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	61ba      	str	r2, [r7, #24]
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	4413      	add	r3, r2
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005056:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 8091 	beq.w	8005180 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800505e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005060:	2b20      	cmp	r3, #32
 8005062:	d006      	beq.n	8005072 <create_name+0x1b6>
 8005064:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005066:	2b2e      	cmp	r3, #46	; 0x2e
 8005068:	d10a      	bne.n	8005080 <create_name+0x1c4>
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	429a      	cmp	r2, r3
 8005070:	d006      	beq.n	8005080 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 8005072:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005076:	f043 0303 	orr.w	r3, r3, #3
 800507a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800507e:	e07e      	b.n	800517e <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005080:	6a3a      	ldr	r2, [r7, #32]
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	429a      	cmp	r2, r3
 8005086:	d203      	bcs.n	8005090 <create_name+0x1d4>
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	429a      	cmp	r2, r3
 800508e:	d123      	bne.n	80050d8 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	2b0b      	cmp	r3, #11
 8005094:	d106      	bne.n	80050a4 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 8005096:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800509a:	f043 0303 	orr.w	r3, r3, #3
 800509e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80050a2:	e076      	b.n	8005192 <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d005      	beq.n	80050b8 <create_name+0x1fc>
 80050ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050b0:	f043 0303 	orr.w	r3, r3, #3
 80050b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d867      	bhi.n	8005190 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	61bb      	str	r3, [r7, #24]
 80050c4:	2308      	movs	r3, #8
 80050c6:	623b      	str	r3, [r7, #32]
 80050c8:	230b      	movs	r3, #11
 80050ca:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80050cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80050d6:	e052      	b.n	800517e <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80050d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050da:	2b7f      	cmp	r3, #127	; 0x7f
 80050dc:	d914      	bls.n	8005108 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80050de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050e0:	2100      	movs	r1, #0
 80050e2:	4618      	mov	r0, r3
 80050e4:	f001 fd7c 	bl	8006be0 <ff_convert>
 80050e8:	4603      	mov	r3, r0
 80050ea:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80050ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d004      	beq.n	80050fc <create_name+0x240>
 80050f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050f4:	3b80      	subs	r3, #128	; 0x80
 80050f6:	4a24      	ldr	r2, [pc, #144]	; (8005188 <create_name+0x2cc>)
 80050f8:	5cd3      	ldrb	r3, [r2, r3]
 80050fa:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80050fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005100:	f043 0302 	orr.w	r3, r3, #2
 8005104:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005108:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800510a:	2b00      	cmp	r3, #0
 800510c:	d007      	beq.n	800511e <create_name+0x262>
 800510e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005110:	4619      	mov	r1, r3
 8005112:	481e      	ldr	r0, [pc, #120]	; (800518c <create_name+0x2d0>)
 8005114:	f7fe f9c0 	bl	8003498 <chk_chr>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d008      	beq.n	8005130 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800511e:	235f      	movs	r3, #95	; 0x5f
 8005120:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005122:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005126:	f043 0303 	orr.w	r3, r3, #3
 800512a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800512e:	e01b      	b.n	8005168 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005130:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005132:	2b40      	cmp	r3, #64	; 0x40
 8005134:	d909      	bls.n	800514a <create_name+0x28e>
 8005136:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005138:	2b5a      	cmp	r3, #90	; 0x5a
 800513a:	d806      	bhi.n	800514a <create_name+0x28e>
					b |= 2;
 800513c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005140:	f043 0302 	orr.w	r3, r3, #2
 8005144:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005148:	e00e      	b.n	8005168 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800514a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800514c:	2b60      	cmp	r3, #96	; 0x60
 800514e:	d90b      	bls.n	8005168 <create_name+0x2ac>
 8005150:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005152:	2b7a      	cmp	r3, #122	; 0x7a
 8005154:	d808      	bhi.n	8005168 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 8005156:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800515a:	f043 0301 	orr.w	r3, r3, #1
 800515e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005162:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005164:	3b20      	subs	r3, #32
 8005166:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800516e:	699a      	ldr	r2, [r3, #24]
 8005170:	6a3b      	ldr	r3, [r7, #32]
 8005172:	1c59      	adds	r1, r3, #1
 8005174:	6239      	str	r1, [r7, #32]
 8005176:	4413      	add	r3, r2
 8005178:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800517e:	e762      	b.n	8005046 <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 8005180:	bf00      	nop
 8005182:	e006      	b.n	8005192 <create_name+0x2d6>
 8005184:	08006e04 	.word	0x08006e04
 8005188:	08006e64 	.word	0x08006e64
 800518c:	08006e10 	.word	0x08006e10
			if (si > di) break;			/* No extension */
 8005190:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	2be5      	cmp	r3, #229	; 0xe5
 800519e:	d105      	bne.n	80051ac <create_name+0x2f0>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	2205      	movs	r2, #5
 80051aa:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	2b08      	cmp	r3, #8
 80051b0:	d104      	bne.n	80051bc <create_name+0x300>
 80051b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 80051bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80051c0:	f003 030c 	and.w	r3, r3, #12
 80051c4:	2b0c      	cmp	r3, #12
 80051c6:	d005      	beq.n	80051d4 <create_name+0x318>
 80051c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80051cc:	f003 0303 	and.w	r3, r3, #3
 80051d0:	2b03      	cmp	r3, #3
 80051d2:	d105      	bne.n	80051e0 <create_name+0x324>
		cf |= NS_LFN;
 80051d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051d8:	f043 0302 	orr.w	r3, r3, #2
 80051dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80051e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d117      	bne.n	800521c <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80051ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80051f0:	f003 0303 	and.w	r3, r3, #3
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d105      	bne.n	8005204 <create_name+0x348>
 80051f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051fc:	f043 0310 	orr.w	r3, r3, #16
 8005200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005204:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005208:	f003 030c 	and.w	r3, r3, #12
 800520c:	2b04      	cmp	r3, #4
 800520e:	d105      	bne.n	800521c <create_name+0x360>
 8005210:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005214:	f043 0308 	orr.w	r3, r3, #8
 8005218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	330b      	adds	r3, #11
 8005226:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800522a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800522c:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800522e:	4618      	mov	r0, r3
 8005230:	3728      	adds	r7, #40	; 0x28
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop

08005238 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	2b2f      	cmp	r3, #47	; 0x2f
 8005248:	d003      	beq.n	8005252 <follow_path+0x1a>
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	2b5c      	cmp	r3, #92	; 0x5c
 8005250:	d102      	bne.n	8005258 <follow_path+0x20>
		path++;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	3301      	adds	r3, #1
 8005256:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800525e:	461a      	mov	r2, r3
 8005260:	2300      	movs	r3, #0
 8005262:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	2b1f      	cmp	r3, #31
 800526a:	d80c      	bhi.n	8005286 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 800526c:	2100      	movs	r1, #0
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7fe ffe9 	bl	8004246 <dir_sdi>
 8005274:	4603      	mov	r3, r0
 8005276:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800527e:	461a      	mov	r2, r3
 8005280:	2300      	movs	r3, #0
 8005282:	6153      	str	r3, [r2, #20]
 8005284:	e049      	b.n	800531a <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005286:	463b      	mov	r3, r7
 8005288:	4619      	mov	r1, r3
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7ff fe16 	bl	8004ebc <create_name>
 8005290:	4603      	mov	r3, r0
 8005292:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005294:	7bfb      	ldrb	r3, [r7, #15]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d13a      	bne.n	8005310 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f7ff fc1e 	bl	8004adc <dir_find>
 80052a0:	4603      	mov	r3, r0
 80052a2:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	7adb      	ldrb	r3, [r3, #11]
 80052ae:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80052b0:	7bfb      	ldrb	r3, [r7, #15]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00a      	beq.n	80052cc <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
 80052b8:	2b04      	cmp	r3, #4
 80052ba:	d12b      	bne.n	8005314 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80052bc:	7bbb      	ldrb	r3, [r7, #14]
 80052be:	f003 0304 	and.w	r3, r3, #4
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d126      	bne.n	8005314 <follow_path+0xdc>
 80052c6:	2305      	movs	r3, #5
 80052c8:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80052ca:	e023      	b.n	8005314 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80052cc:	7bbb      	ldrb	r3, [r7, #14]
 80052ce:	f003 0304 	and.w	r3, r3, #4
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d120      	bne.n	8005318 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	330b      	adds	r3, #11
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	f003 0310 	and.w	r3, r3, #16
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d102      	bne.n	80052f4 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 80052ee:	2305      	movs	r3, #5
 80052f0:	73fb      	strb	r3, [r7, #15]
 80052f2:	e012      	b.n	800531a <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68b9      	ldr	r1, [r7, #8]
 80052fe:	4618      	mov	r0, r3
 8005300:	f7ff fa07 	bl	8004712 <ld_clust>
 8005304:	4602      	mov	r2, r0
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800530c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800530e:	e7ba      	b.n	8005286 <follow_path+0x4e>
			if (res != FR_OK) break;
 8005310:	bf00      	nop
 8005312:	e002      	b.n	800531a <follow_path+0xe2>
				break;
 8005314:	bf00      	nop
 8005316:	e000      	b.n	800531a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005318:	bf00      	nop
		}
	}

	return res;
 800531a:	7bfb      	ldrb	r3, [r7, #15]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800532c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005330:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d031      	beq.n	800539e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	617b      	str	r3, [r7, #20]
 8005340:	e002      	b.n	8005348 <get_ldnumber+0x24>
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	3301      	adds	r3, #1
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b1f      	cmp	r3, #31
 800534e:	d903      	bls.n	8005358 <get_ldnumber+0x34>
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b3a      	cmp	r3, #58	; 0x3a
 8005356:	d1f4      	bne.n	8005342 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2b3a      	cmp	r3, #58	; 0x3a
 800535e:	d11c      	bne.n	800539a <get_ldnumber+0x76>
			tp = *path;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	1c5a      	adds	r2, r3, #1
 800536a:	60fa      	str	r2, [r7, #12]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	3b30      	subs	r3, #48	; 0x30
 8005370:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	2b09      	cmp	r3, #9
 8005376:	d80e      	bhi.n	8005396 <get_ldnumber+0x72>
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	429a      	cmp	r2, r3
 800537e:	d10a      	bne.n	8005396 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d107      	bne.n	8005396 <get_ldnumber+0x72>
					vol = (int)i;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	3301      	adds	r3, #1
 800538e:	617b      	str	r3, [r7, #20]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	e002      	b.n	80053a0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800539a:	2300      	movs	r3, #0
 800539c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800539e:	693b      	ldr	r3, [r7, #16]
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	371c      	adds	r7, #28
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bc80      	pop	{r7}
 80053a8:	4770      	bx	lr
	...

080053ac <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053bc:	2200      	movs	r2, #0
 80053be:	711a      	strb	r2, [r3, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053c6:	461a      	mov	r2, r3
 80053c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053cc:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80053ce:	6839      	ldr	r1, [r7, #0]
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7fe fa8b 	bl	80038ec <move_window>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <check_fs+0x34>
		return 3;
 80053dc:	2303      	movs	r3, #3
 80053de:	e04a      	b.n	8005476 <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80053e6:	3301      	adds	r3, #1
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	021b      	lsls	r3, r3, #8
 80053ec:	b21a      	sxth	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80053f4:	b21b      	sxth	r3, r3
 80053f6:	4313      	orrs	r3, r2
 80053f8:	b21b      	sxth	r3, r3
 80053fa:	4a21      	ldr	r2, [pc, #132]	; (8005480 <check_fs+0xd4>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d001      	beq.n	8005404 <check_fs+0x58>
		return 2;
 8005400:	2302      	movs	r3, #2
 8005402:	e038      	b.n	8005476 <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	3336      	adds	r3, #54	; 0x36
 8005408:	3303      	adds	r3, #3
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	061a      	lsls	r2, r3, #24
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	3336      	adds	r3, #54	; 0x36
 8005412:	3302      	adds	r3, #2
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	041b      	lsls	r3, r3, #16
 8005418:	4313      	orrs	r3, r2
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	3236      	adds	r2, #54	; 0x36
 800541e:	3201      	adds	r2, #1
 8005420:	7812      	ldrb	r2, [r2, #0]
 8005422:	0212      	lsls	r2, r2, #8
 8005424:	4313      	orrs	r3, r2
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800542c:	4313      	orrs	r3, r2
 800542e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005432:	4a14      	ldr	r2, [pc, #80]	; (8005484 <check_fs+0xd8>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d101      	bne.n	800543c <check_fs+0x90>
		return 0;
 8005438:	2300      	movs	r3, #0
 800543a:	e01c      	b.n	8005476 <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	3352      	adds	r3, #82	; 0x52
 8005440:	3303      	adds	r3, #3
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	061a      	lsls	r2, r3, #24
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	3352      	adds	r3, #82	; 0x52
 800544a:	3302      	adds	r3, #2
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	041b      	lsls	r3, r3, #16
 8005450:	4313      	orrs	r3, r2
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	3252      	adds	r2, #82	; 0x52
 8005456:	3201      	adds	r2, #1
 8005458:	7812      	ldrb	r2, [r2, #0]
 800545a:	0212      	lsls	r2, r2, #8
 800545c:	4313      	orrs	r3, r2
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8005464:	4313      	orrs	r3, r2
 8005466:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800546a:	4a06      	ldr	r2, [pc, #24]	; (8005484 <check_fs+0xd8>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d101      	bne.n	8005474 <check_fs+0xc8>
		return 0;
 8005470:	2300      	movs	r3, #0
 8005472:	e000      	b.n	8005476 <check_fs+0xca>

	return 1;
 8005474:	2301      	movs	r3, #1
}
 8005476:	4618      	mov	r0, r3
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	ffffaa55 	.word	0xffffaa55
 8005484:	00544146 	.word	0x00544146

08005488 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b096      	sub	sp, #88	; 0x58
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	4613      	mov	r3, r2
 8005494:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800549c:	68b8      	ldr	r0, [r7, #8]
 800549e:	f7ff ff41 	bl	8005324 <get_ldnumber>
 80054a2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80054a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	da01      	bge.n	80054ae <find_volume+0x26>
 80054aa:	230b      	movs	r3, #11
 80054ac:	e311      	b.n	8005ad2 <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80054ae:	4a98      	ldr	r2, [pc, #608]	; (8005710 <find_volume+0x288>)
 80054b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054b6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80054b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <find_volume+0x3a>
 80054be:	230c      	movs	r3, #12
 80054c0:	e307      	b.n	8005ad2 <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054c6:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80054c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d01c      	beq.n	800550e <find_volume+0x86>
		stat = disk_status(fs->drv);
 80054d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054da:	785b      	ldrb	r3, [r3, #1]
 80054dc:	4618      	mov	r0, r3
 80054de:	f7fd fedf 	bl	80032a0 <disk_status>
 80054e2:	4603      	mov	r3, r0
 80054e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80054e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10c      	bne.n	800550e <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80054f4:	79fb      	ldrb	r3, [r7, #7]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d007      	beq.n	800550a <find_volume+0x82>
 80054fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80054fe:	f003 0304 	and.w	r3, r3, #4
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005506:	230a      	movs	r3, #10
 8005508:	e2e3      	b.n	8005ad2 <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 800550a:	2300      	movs	r3, #0
 800550c:	e2e1      	b.n	8005ad2 <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800550e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005514:	2200      	movs	r2, #0
 8005516:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800551a:	b2da      	uxtb	r2, r3
 800551c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005522:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800552a:	785b      	ldrb	r3, [r3, #1]
 800552c:	4618      	mov	r0, r3
 800552e:	f7fd fed1 	bl	80032d4 <disk_initialize>
 8005532:	4603      	mov	r3, r0
 8005534:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8005538:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	2b00      	cmp	r3, #0
 8005542:	d001      	beq.n	8005548 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005544:	2303      	movs	r3, #3
 8005546:	e2c4      	b.n	8005ad2 <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8005548:	79fb      	ldrb	r3, [r7, #7]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d007      	beq.n	800555e <find_volume+0xd6>
 800554e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005552:	f003 0304 	and.w	r3, r3, #4
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 800555a:	230a      	movs	r3, #10
 800555c:	e2b9      	b.n	8005ad2 <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800555e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005564:	7858      	ldrb	r0, [r3, #1]
 8005566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800556c:	330a      	adds	r3, #10
 800556e:	461a      	mov	r2, r3
 8005570:	2102      	movs	r1, #2
 8005572:	f7fd ff15 	bl	80033a0 <disk_ioctl>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10d      	bne.n	8005598 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800557c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005582:	895b      	ldrh	r3, [r3, #10]
 8005584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005588:	d306      	bcc.n	8005598 <find_volume+0x110>
 800558a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005590:	895b      	ldrh	r3, [r3, #10]
 8005592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005596:	d901      	bls.n	800559c <find_volume+0x114>
 8005598:	2301      	movs	r3, #1
 800559a:	e29a      	b.n	8005ad2 <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800559c:	2300      	movs	r3, #0
 800559e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80055a0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80055a2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055a4:	f7ff ff02 	bl	80053ac <check_fs>
 80055a8:	4603      	mov	r3, r0
 80055aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80055ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d153      	bne.n	800565e <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80055b6:	2300      	movs	r3, #0
 80055b8:	643b      	str	r3, [r7, #64]	; 0x40
 80055ba:	e028      	b.n	800560e <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80055bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055c0:	011b      	lsls	r3, r3, #4
 80055c2:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80055c6:	4413      	add	r3, r2
 80055c8:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80055ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055cc:	3304      	adds	r3, #4
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d012      	beq.n	80055fa <find_volume+0x172>
 80055d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d6:	330b      	adds	r3, #11
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	061a      	lsls	r2, r3, #24
 80055dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055de:	330a      	adds	r3, #10
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	041b      	lsls	r3, r3, #16
 80055e4:	4313      	orrs	r3, r2
 80055e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055e8:	3209      	adds	r2, #9
 80055ea:	7812      	ldrb	r2, [r2, #0]
 80055ec:	0212      	lsls	r2, r2, #8
 80055ee:	4313      	orrs	r3, r2
 80055f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055f2:	3208      	adds	r2, #8
 80055f4:	7812      	ldrb	r2, [r2, #0]
 80055f6:	431a      	orrs	r2, r3
 80055f8:	e000      	b.n	80055fc <find_volume+0x174>
 80055fa:	2200      	movs	r2, #0
 80055fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	3358      	adds	r3, #88	; 0x58
 8005602:	443b      	add	r3, r7
 8005604:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800560a:	3301      	adds	r3, #1
 800560c:	643b      	str	r3, [r7, #64]	; 0x40
 800560e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005610:	2b03      	cmp	r3, #3
 8005612:	d9d3      	bls.n	80055bc <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8005614:	2300      	movs	r3, #0
 8005616:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <find_volume+0x19c>
 800561e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005620:	3b01      	subs	r3, #1
 8005622:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8005624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	3358      	adds	r3, #88	; 0x58
 800562a:	443b      	add	r3, r7
 800562c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005630:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8005632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005634:	2b00      	cmp	r3, #0
 8005636:	d005      	beq.n	8005644 <find_volume+0x1bc>
 8005638:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800563a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800563c:	f7ff feb6 	bl	80053ac <check_fs>
 8005640:	4603      	mov	r3, r0
 8005642:	e000      	b.n	8005646 <find_volume+0x1be>
 8005644:	2302      	movs	r3, #2
 8005646:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800564a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800564e:	2b00      	cmp	r3, #0
 8005650:	d005      	beq.n	800565e <find_volume+0x1d6>
 8005652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005654:	3301      	adds	r3, #1
 8005656:	643b      	str	r3, [r7, #64]	; 0x40
 8005658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800565a:	2b03      	cmp	r3, #3
 800565c:	d9e2      	bls.n	8005624 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800565e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005662:	2b03      	cmp	r3, #3
 8005664:	d101      	bne.n	800566a <find_volume+0x1e2>
 8005666:	2301      	movs	r3, #1
 8005668:	e233      	b.n	8005ad2 <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800566a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <find_volume+0x1ee>
 8005672:	230d      	movs	r3, #13
 8005674:	e22d      	b.n	8005ad2 <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005678:	7b1b      	ldrb	r3, [r3, #12]
 800567a:	021b      	lsls	r3, r3, #8
 800567c:	b21a      	sxth	r2, r3
 800567e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005680:	7adb      	ldrb	r3, [r3, #11]
 8005682:	b21b      	sxth	r3, r3
 8005684:	4313      	orrs	r3, r2
 8005686:	b21a      	sxth	r2, r3
 8005688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800568e:	895b      	ldrh	r3, [r3, #10]
 8005690:	b21b      	sxth	r3, r3
 8005692:	429a      	cmp	r2, r3
 8005694:	d001      	beq.n	800569a <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 8005696:	230d      	movs	r3, #13
 8005698:	e21b      	b.n	8005ad2 <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800569a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569c:	7ddb      	ldrb	r3, [r3, #23]
 800569e:	021b      	lsls	r3, r3, #8
 80056a0:	b21a      	sxth	r2, r3
 80056a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a4:	7d9b      	ldrb	r3, [r3, #22]
 80056a6:	b21b      	sxth	r3, r3
 80056a8:	4313      	orrs	r3, r2
 80056aa:	b21b      	sxth	r3, r3
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80056b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d112      	bne.n	80056dc <find_volume+0x254>
 80056b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80056bc:	061a      	lsls	r2, r3, #24
 80056be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80056c4:	041b      	lsls	r3, r3, #16
 80056c6:	4313      	orrs	r3, r2
 80056c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056ca:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80056ce:	0212      	lsls	r2, r2, #8
 80056d0:	4313      	orrs	r3, r2
 80056d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056d4:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80056d8:	4313      	orrs	r3, r2
 80056da:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 80056dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056e2:	461a      	mov	r2, r3
 80056e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056e6:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80056e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ea:	7c1a      	ldrb	r2, [r3, #16]
 80056ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056f2:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80056f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056fa:	78db      	ldrb	r3, [r3, #3]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d009      	beq.n	8005714 <find_volume+0x28c>
 8005700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005706:	78db      	ldrb	r3, [r3, #3]
 8005708:	2b02      	cmp	r3, #2
 800570a:	d003      	beq.n	8005714 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 800570c:	230d      	movs	r3, #13
 800570e:	e1e0      	b.n	8005ad2 <find_volume+0x64a>
 8005710:	2000215c 	.word	0x2000215c
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8005714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800571a:	78db      	ldrb	r3, [r3, #3]
 800571c:	461a      	mov	r2, r3
 800571e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005720:	fb02 f303 	mul.w	r3, r2, r3
 8005724:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8005726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005728:	7b5a      	ldrb	r2, [r3, #13]
 800572a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005730:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8005732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005738:	789b      	ldrb	r3, [r3, #2]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00c      	beq.n	8005758 <find_volume+0x2d0>
 800573e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005744:	789b      	ldrb	r3, [r3, #2]
 8005746:	461a      	mov	r2, r3
 8005748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800574e:	789b      	ldrb	r3, [r3, #2]
 8005750:	3b01      	subs	r3, #1
 8005752:	4013      	ands	r3, r2
 8005754:	2b00      	cmp	r3, #0
 8005756:	d001      	beq.n	800575c <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 8005758:	230d      	movs	r3, #13
 800575a:	e1ba      	b.n	8005ad2 <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800575c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575e:	7c9b      	ldrb	r3, [r3, #18]
 8005760:	021b      	lsls	r3, r3, #8
 8005762:	b21a      	sxth	r2, r3
 8005764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005766:	7c5b      	ldrb	r3, [r3, #17]
 8005768:	b21b      	sxth	r3, r3
 800576a:	4313      	orrs	r3, r2
 800576c:	b21b      	sxth	r3, r3
 800576e:	b29a      	uxth	r2, r3
 8005770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005776:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8005778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800577e:	891b      	ldrh	r3, [r3, #8]
 8005780:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005782:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005786:	8952      	ldrh	r2, [r2, #10]
 8005788:	0952      	lsrs	r2, r2, #5
 800578a:	b292      	uxth	r2, r2
 800578c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005790:	fb01 f202 	mul.w	r2, r1, r2
 8005794:	1a9b      	subs	r3, r3, r2
 8005796:	b29b      	uxth	r3, r3
 8005798:	2b00      	cmp	r3, #0
 800579a:	d001      	beq.n	80057a0 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 800579c:	230d      	movs	r3, #13
 800579e:	e198      	b.n	8005ad2 <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80057a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a2:	7d1b      	ldrb	r3, [r3, #20]
 80057a4:	021b      	lsls	r3, r3, #8
 80057a6:	b21a      	sxth	r2, r3
 80057a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057aa:	7cdb      	ldrb	r3, [r3, #19]
 80057ac:	b21b      	sxth	r3, r3
 80057ae:	4313      	orrs	r3, r2
 80057b0:	b21b      	sxth	r3, r3
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80057b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d112      	bne.n	80057e2 <find_volume+0x35a>
 80057bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057be:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80057c2:	061a      	lsls	r2, r3, #24
 80057c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80057ca:	041b      	lsls	r3, r3, #16
 80057cc:	4313      	orrs	r3, r2
 80057ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057d0:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80057d4:	0212      	lsls	r2, r2, #8
 80057d6:	4313      	orrs	r3, r2
 80057d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057da:	f892 2020 	ldrb.w	r2, [r2, #32]
 80057de:	4313      	orrs	r3, r2
 80057e0:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80057e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e4:	7bdb      	ldrb	r3, [r3, #15]
 80057e6:	021b      	lsls	r3, r3, #8
 80057e8:	b21a      	sxth	r2, r3
 80057ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ec:	7b9b      	ldrb	r3, [r3, #14]
 80057ee:	b21b      	sxth	r3, r3
 80057f0:	4313      	orrs	r3, r2
 80057f2:	b21b      	sxth	r3, r3
 80057f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80057f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <find_volume+0x378>
 80057fc:	230d      	movs	r3, #13
 80057fe:	e168      	b.n	8005ad2 <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8005800:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005804:	4413      	add	r3, r2
 8005806:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005808:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800580c:	8911      	ldrh	r1, [r2, #8]
 800580e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005810:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005814:	8952      	ldrh	r2, [r2, #10]
 8005816:	0952      	lsrs	r2, r2, #5
 8005818:	b292      	uxth	r2, r2
 800581a:	fbb1 f2f2 	udiv	r2, r1, r2
 800581e:	b292      	uxth	r2, r2
 8005820:	4413      	add	r3, r2
 8005822:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005824:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005828:	429a      	cmp	r2, r3
 800582a:	d201      	bcs.n	8005830 <find_volume+0x3a8>
 800582c:	230d      	movs	r3, #13
 800582e:	e150      	b.n	8005ad2 <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005830:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005838:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800583c:	7892      	ldrb	r2, [r2, #2]
 800583e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005842:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <find_volume+0x3c6>
 800584a:	230d      	movs	r3, #13
 800584c:	e141      	b.n	8005ad2 <find_volume+0x64a>
	fmt = FS_FAT12;
 800584e:	2301      	movs	r3, #1
 8005850:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	f640 72f5 	movw	r2, #4085	; 0xff5
 800585a:	4293      	cmp	r3, r2
 800585c:	d902      	bls.n	8005864 <find_volume+0x3dc>
 800585e:	2302      	movs	r3, #2
 8005860:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800586a:	4293      	cmp	r3, r2
 800586c:	d902      	bls.n	8005874 <find_volume+0x3ec>
 800586e:	2303      	movs	r3, #3
 8005870:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005876:	3302      	adds	r3, #2
 8005878:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800587a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800587e:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8005880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005886:	461a      	mov	r2, r3
 8005888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800588a:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800588c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800588e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005890:	4413      	add	r3, r2
 8005892:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005894:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005898:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 800589a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800589c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589e:	4413      	add	r3, r2
 80058a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80058a6:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 80058a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058ac:	2b03      	cmp	r3, #3
 80058ae:	d124      	bne.n	80058fa <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80058b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058b6:	891b      	ldrh	r3, [r3, #8]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <find_volume+0x438>
 80058bc:	230d      	movs	r3, #13
 80058be:	e108      	b.n	8005ad2 <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80058c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80058c6:	061a      	lsls	r2, r3, #24
 80058c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ca:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80058ce:	041b      	lsls	r3, r3, #16
 80058d0:	4313      	orrs	r3, r2
 80058d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058d4:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80058d8:	0212      	lsls	r2, r2, #8
 80058da:	4313      	orrs	r3, r2
 80058dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058de:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80058e2:	4313      	orrs	r3, r2
 80058e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80058ea:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80058ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	647b      	str	r3, [r7, #68]	; 0x44
 80058f8:	e02b      	b.n	8005952 <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80058fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005900:	891b      	ldrh	r3, [r3, #8]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d101      	bne.n	800590a <find_volume+0x482>
 8005906:	230d      	movs	r3, #13
 8005908:	e0e3      	b.n	8005ad2 <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800590a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005910:	6a1a      	ldr	r2, [r3, #32]
 8005912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005914:	4413      	add	r3, r2
 8005916:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005918:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800591c:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800591e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005922:	2b02      	cmp	r3, #2
 8005924:	d105      	bne.n	8005932 <find_volume+0x4aa>
 8005926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	e00e      	b.n	8005950 <find_volume+0x4c8>
 8005932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005938:	695a      	ldr	r2, [r3, #20]
 800593a:	4613      	mov	r3, r2
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	4413      	add	r3, r2
 8005940:	085a      	lsrs	r2, r3, #1
 8005942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8005950:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005958:	699a      	ldr	r2, [r3, #24]
 800595a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005960:	895b      	ldrh	r3, [r3, #10]
 8005962:	4619      	mov	r1, r3
 8005964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005966:	440b      	add	r3, r1
 8005968:	3b01      	subs	r3, #1
 800596a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800596c:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8005970:	8949      	ldrh	r1, [r1, #10]
 8005972:	fbb3 f3f1 	udiv	r3, r3, r1
 8005976:	429a      	cmp	r2, r3
 8005978:	d201      	bcs.n	800597e <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 800597a:	230d      	movs	r3, #13
 800597c:	e0a9      	b.n	8005ad2 <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800597e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005984:	461a      	mov	r2, r3
 8005986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800598a:	6113      	str	r3, [r2, #16]
 800598c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005996:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800599a:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800599c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059a2:	2280      	movs	r2, #128	; 0x80
 80059a4:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80059a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059aa:	2b03      	cmp	r3, #3
 80059ac:	d17a      	bne.n	8005aa4 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80059ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80059b4:	021b      	lsls	r3, r3, #8
 80059b6:	b21a      	sxth	r2, r3
 80059b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80059be:	b21b      	sxth	r3, r3
 80059c0:	4313      	orrs	r3, r2
 80059c2:	b21b      	sxth	r3, r3
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d16d      	bne.n	8005aa4 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 80059c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059ca:	3301      	adds	r3, #1
 80059cc:	4619      	mov	r1, r3
 80059ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80059d0:	f7fd ff8c 	bl	80038ec <move_window>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d164      	bne.n	8005aa4 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 80059da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059e0:	2200      	movs	r2, #0
 80059e2:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80059e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e6:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80059ea:	021b      	lsls	r3, r3, #8
 80059ec:	b21a      	sxth	r2, r3
 80059ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f0:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80059f4:	b21b      	sxth	r3, r3
 80059f6:	4313      	orrs	r3, r2
 80059f8:	b21b      	sxth	r3, r3
 80059fa:	4a38      	ldr	r2, [pc, #224]	; (8005adc <find_volume+0x654>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d151      	bne.n	8005aa4 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8005a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a02:	78db      	ldrb	r3, [r3, #3]
 8005a04:	061a      	lsls	r2, r3, #24
 8005a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a08:	789b      	ldrb	r3, [r3, #2]
 8005a0a:	041b      	lsls	r3, r3, #16
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a10:	7852      	ldrb	r2, [r2, #1]
 8005a12:	0212      	lsls	r2, r2, #8
 8005a14:	4313      	orrs	r3, r2
 8005a16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a18:	7812      	ldrb	r2, [r2, #0]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	4a30      	ldr	r2, [pc, #192]	; (8005ae0 <find_volume+0x658>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d140      	bne.n	8005aa4 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8005a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a24:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8005a28:	061a      	lsls	r2, r3, #24
 8005a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a2c:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8005a30:	041b      	lsls	r3, r3, #16
 8005a32:	4313      	orrs	r3, r2
 8005a34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a36:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8005a3a:	0212      	lsls	r2, r2, #8
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a40:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8005a44:	4313      	orrs	r3, r2
 8005a46:	4a27      	ldr	r2, [pc, #156]	; (8005ae4 <find_volume+0x65c>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d12b      	bne.n	8005aa4 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8005a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4e:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8005a52:	061a      	lsls	r2, r3, #24
 8005a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a56:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8005a5a:	041b      	lsls	r3, r3, #16
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a60:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8005a64:	0212      	lsls	r2, r2, #8
 8005a66:	4313      	orrs	r3, r2
 8005a68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a6a:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005a76:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8005a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7a:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8005a7e:	061a      	lsls	r2, r3, #24
 8005a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a82:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8005a86:	041b      	lsls	r3, r3, #16
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a8c:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8005a90:	0212      	lsls	r2, r2, #8
 8005a92:	4313      	orrs	r3, r2
 8005a94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a96:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005aa2:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8005aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aaa:	461a      	mov	r2, r3
 8005aac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ab0:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8005ab2:	4b0d      	ldr	r3, [pc, #52]	; (8005ae8 <find_volume+0x660>)
 8005ab4:	881b      	ldrh	r3, [r3, #0]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	4b0b      	ldr	r3, [pc, #44]	; (8005ae8 <find_volume+0x660>)
 8005abc:	801a      	strh	r2, [r3, #0]
 8005abe:	4b0a      	ldr	r3, [pc, #40]	; (8005ae8 <find_volume+0x660>)
 8005ac0:	881a      	ldrh	r2, [r3, #0]
 8005ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ac8:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8005aca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005acc:	f7fd fe92 	bl	80037f4 <clear_lock>
#endif

	return FR_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3758      	adds	r7, #88	; 0x58
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	ffffaa55 	.word	0xffffaa55
 8005ae0:	41615252 	.word	0x41615252
 8005ae4:	61417272 	.word	0x61417272
 8005ae8:	20002160 	.word	0x20002160

08005aec <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d02a      	beq.n	8005b54 <validate+0x68>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d024      	beq.n	8005b54 <validate+0x68>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d01b      	beq.n	8005b54 <validate+0x68>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b28:	88da      	ldrh	r2, [r3, #6]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b30:	889b      	ldrh	r3, [r3, #4]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d10e      	bne.n	8005b54 <validate+0x68>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b42:	785b      	ldrb	r3, [r3, #1]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7fd fbab 	bl	80032a0 <disk_status>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <validate+0x6c>
		return FR_INVALID_OBJECT;
 8005b54:	2309      	movs	r3, #9
 8005b56:	e000      	b.n	8005b5a <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
	...

08005b64 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b088      	sub	sp, #32
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8005b76:	f107 0310 	add.w	r3, r7, #16
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7ff fbd2 	bl	8005324 <get_ldnumber>
 8005b80:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	da01      	bge.n	8005b8c <f_mount+0x28>
 8005b88:	230b      	movs	r3, #11
 8005b8a:	e02f      	b.n	8005bec <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005b8c:	4a19      	ldr	r2, [pc, #100]	; (8005bf4 <f_mount+0x90>)
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b94:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d007      	beq.n	8005bac <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8005b9c:	69b8      	ldr	r0, [r7, #24]
 8005b9e:	f7fd fe29 	bl	80037f4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ba8:	2200      	movs	r2, #0
 8005baa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d004      	beq.n	8005bbc <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bb8:	2200      	movs	r2, #0
 8005bba:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	490d      	ldr	r1, [pc, #52]	; (8005bf4 <f_mount+0x90>)
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d002      	beq.n	8005bd2 <f_mount+0x6e>
 8005bcc:	79fb      	ldrb	r3, [r7, #7]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d001      	beq.n	8005bd6 <f_mount+0x72>
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	e00a      	b.n	8005bec <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8005bd6:	f107 0108 	add.w	r1, r7, #8
 8005bda:	f107 030c 	add.w	r3, r7, #12
 8005bde:	2200      	movs	r2, #0
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7ff fc51 	bl	8005488 <find_volume>
 8005be6:	4603      	mov	r3, r0
 8005be8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3720      	adds	r7, #32
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	2000215c 	.word	0x2000215c

08005bf8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c06:	f843 0c4c 	str.w	r0, [r3, #-76]
 8005c0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c0e:	f843 1c50 	str.w	r1, [r3, #-80]
 8005c12:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c16:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8005c1a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c1e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <f_open+0x32>
 8005c26:	2309      	movs	r3, #9
 8005c28:	e2f7      	b.n	800621a <f_open+0x622>
	fp->fs = 0;			/* Clear file object */
 8005c2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c2e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c36:	461a      	mov	r2, r3
 8005c38:	2300      	movs	r3, #0
 8005c3a:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8005c3c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c40:	461a      	mov	r2, r3
 8005c42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c46:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005c4a:	f003 031f 	and.w	r3, r3, #31
 8005c4e:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8005c52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c56:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005c5a:	f023 0301 	bic.w	r3, r3, #1
 8005c5e:	b2da      	uxtb	r2, r3
 8005c60:	f107 0118 	add.w	r1, r7, #24
 8005c64:	3910      	subs	r1, #16
 8005c66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005c6a:	3b18      	subs	r3, #24
 8005c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7ff fc09 	bl	8005488 <find_volume>
 8005c76:	4603      	mov	r3, r0
 8005c78:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005c7c:	f102 0217 	add.w	r2, r2, #23
 8005c80:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8005c82:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005c86:	f103 0317 	add.w	r3, r3, #23
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f040 82bf 	bne.w	8006210 <f_open+0x618>
		INIT_BUF(dj);
 8005c92:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c96:	461a      	mov	r2, r3
 8005c98:	f107 0318 	add.w	r3, r7, #24
 8005c9c:	3b04      	subs	r3, #4
 8005c9e:	f8c2 3fe0 	str.w	r3, [r2, #4064]	; 0xfe0
 8005ca2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	4bd4      	ldr	r3, [pc, #848]	; (8005ffc <f_open+0x404>)
 8005caa:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 8005cae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005cb2:	f853 2c50 	ldr.w	r2, [r3, #-80]
 8005cb6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005cba:	3b18      	subs	r3, #24
 8005cbc:	4611      	mov	r1, r2
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7ff faba 	bl	8005238 <follow_path>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005cca:	f102 0217 	add.w	r2, r2, #23
 8005cce:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8005cd0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005cd4:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 8005cd8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005cdc:	f102 0210 	add.w	r2, r2, #16
 8005ce0:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005ce2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005ce6:	f103 0317 	add.w	r3, r3, #23
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d126      	bne.n	8005d3e <f_open+0x146>
			if (!dir)	/* Default directory itself */
 8005cf0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005cf4:	f103 0310 	add.w	r3, r3, #16
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d106      	bne.n	8005d0c <f_open+0x114>
				res = FR_INVALID_NAME;
 8005cfe:	2306      	movs	r3, #6
 8005d00:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005d04:	f102 0217 	add.w	r2, r2, #23
 8005d08:	7013      	strb	r3, [r2, #0]
 8005d0a:	e018      	b.n	8005d3e <f_open+0x146>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005d0c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005d10:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005d14:	f023 0301 	bic.w	r3, r3, #1
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	bf14      	ite	ne
 8005d1c:	2301      	movne	r3, #1
 8005d1e:	2300      	moveq	r3, #0
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	461a      	mov	r2, r3
 8005d24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005d28:	3b18      	subs	r3, #24
 8005d2a:	4611      	mov	r1, r2
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7fd fbcd 	bl	80034cc <chk_lock>
 8005d32:	4603      	mov	r3, r0
 8005d34:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005d38:	f102 0217 	add.w	r2, r2, #23
 8005d3c:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005d3e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005d42:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005d46:	f003 031c 	and.w	r3, r3, #28
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f000 813c 	beq.w	8005fc8 <f_open+0x3d0>
			if (res != FR_OK) {					/* No file, create new */
 8005d50:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005d54:	f103 0317 	add.w	r3, r3, #23
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d02e      	beq.n	8005dbc <f_open+0x1c4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8005d5e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005d62:	f103 0317 	add.w	r3, r3, #23
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	2b04      	cmp	r3, #4
 8005d6a:	d112      	bne.n	8005d92 <f_open+0x19a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005d6c:	f7fd fc1e 	bl	80035ac <enq_lock>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d007      	beq.n	8005d86 <f_open+0x18e>
 8005d76:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005d7a:	3b18      	subs	r3, #24
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7fe ff79 	bl	8004c74 <dir_register>
 8005d82:	4603      	mov	r3, r0
 8005d84:	e000      	b.n	8005d88 <f_open+0x190>
 8005d86:	2312      	movs	r3, #18
 8005d88:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005d8c:	f102 0217 	add.w	r2, r2, #23
 8005d90:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005d92:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005d96:	461a      	mov	r2, r3
 8005d98:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005d9c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005da0:	f043 0308 	orr.w	r3, r3, #8
 8005da4:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 8005da8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005dac:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 8005db0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005db4:	f102 0210 	add.w	r2, r2, #16
 8005db8:	6013      	str	r3, [r2, #0]
 8005dba:	e01f      	b.n	8005dfc <f_open+0x204>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005dbc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005dc0:	f103 0310 	add.w	r3, r3, #16
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	330b      	adds	r3, #11
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	f003 0311 	and.w	r3, r3, #17
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d006      	beq.n	8005de0 <f_open+0x1e8>
					res = FR_DENIED;
 8005dd2:	2307      	movs	r3, #7
 8005dd4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005dd8:	f102 0217 	add.w	r2, r2, #23
 8005ddc:	7013      	strb	r3, [r2, #0]
 8005dde:	e00d      	b.n	8005dfc <f_open+0x204>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8005de0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005de4:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005de8:	f003 0304 	and.w	r3, r3, #4
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d005      	beq.n	8005dfc <f_open+0x204>
						res = FR_EXIST;
 8005df0:	2308      	movs	r3, #8
 8005df2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005df6:	f102 0217 	add.w	r2, r2, #23
 8005dfa:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005dfc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005e00:	f103 0317 	add.w	r3, r3, #23
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f040 8113 	bne.w	8006032 <f_open+0x43a>
 8005e0c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005e10:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005e14:	f003 0308 	and.w	r3, r3, #8
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 810a 	beq.w	8006032 <f_open+0x43a>
				dw = GET_FATTIME();				/* Created time */
 8005e1e:	f7fd f9e3 	bl	80031e8 <get_fattime>
 8005e22:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005e26:	f103 030c 	add.w	r3, r3, #12
 8005e2a:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8005e2c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005e30:	f103 0310 	add.w	r3, r3, #16
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	330e      	adds	r3, #14
 8005e38:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005e3c:	f102 020c 	add.w	r2, r2, #12
 8005e40:	6812      	ldr	r2, [r2, #0]
 8005e42:	b2d2      	uxtb	r2, r2
 8005e44:	701a      	strb	r2, [r3, #0]
 8005e46:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005e4a:	f103 030c 	add.w	r3, r3, #12
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	0a1b      	lsrs	r3, r3, #8
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005e5a:	f103 0310 	add.w	r3, r3, #16
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	330f      	adds	r3, #15
 8005e62:	b2d2      	uxtb	r2, r2
 8005e64:	701a      	strb	r2, [r3, #0]
 8005e66:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005e6a:	f103 030c 	add.w	r3, r3, #12
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	0c1a      	lsrs	r2, r3, #16
 8005e72:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005e76:	f103 0310 	add.w	r3, r3, #16
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	3310      	adds	r3, #16
 8005e7e:	b2d2      	uxtb	r2, r2
 8005e80:	701a      	strb	r2, [r3, #0]
 8005e82:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005e86:	f103 030c 	add.w	r3, r3, #12
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	0e1a      	lsrs	r2, r3, #24
 8005e8e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005e92:	f103 0310 	add.w	r3, r3, #16
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3311      	adds	r3, #17
 8005e9a:	b2d2      	uxtb	r2, r2
 8005e9c:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8005e9e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005ea2:	f103 0310 	add.w	r3, r3, #16
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	330b      	adds	r3, #11
 8005eaa:	2200      	movs	r2, #0
 8005eac:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8005eae:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005eb2:	f103 0310 	add.w	r3, r3, #16
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	331c      	adds	r3, #28
 8005eba:	2200      	movs	r2, #0
 8005ebc:	701a      	strb	r2, [r3, #0]
 8005ebe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005ec2:	f103 0310 	add.w	r3, r3, #16
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	331d      	adds	r3, #29
 8005eca:	2200      	movs	r2, #0
 8005ecc:	701a      	strb	r2, [r3, #0]
 8005ece:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005ed2:	f103 0310 	add.w	r3, r3, #16
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	331e      	adds	r3, #30
 8005eda:	2200      	movs	r2, #0
 8005edc:	701a      	strb	r2, [r3, #0]
 8005ede:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005ee2:	f103 0310 	add.w	r3, r3, #16
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	331f      	adds	r3, #31
 8005eea:	2200      	movs	r2, #0
 8005eec:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8005eee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005ef2:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8005ef6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005efa:	f102 0210 	add.w	r2, r2, #16
 8005efe:	6811      	ldr	r1, [r2, #0]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7fe fc06 	bl	8004712 <ld_clust>
 8005f06:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005f0a:	f103 0308 	add.w	r3, r3, #8
 8005f0e:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8005f10:	2100      	movs	r1, #0
 8005f12:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005f16:	f103 0310 	add.w	r3, r3, #16
 8005f1a:	6818      	ldr	r0, [r3, #0]
 8005f1c:	f7fe fc27 	bl	800476e <st_clust>
				dj.fs->wflag = 1;
 8005f20:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005f24:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8005f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8005f30:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005f34:	f103 0308 	add.w	r3, r3, #8
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d079      	beq.n	8006032 <f_open+0x43a>
					dw = dj.fs->winsect;
 8005f3e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005f42:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8005f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005f50:	f102 020c 	add.w	r2, r2, #12
 8005f54:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8005f56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005f5a:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8005f5e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005f62:	f102 0208 	add.w	r2, r2, #8
 8005f66:	6811      	ldr	r1, [r2, #0]
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7fe f823 	bl	8003fb4 <remove_chain>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005f74:	f102 0217 	add.w	r2, r2, #23
 8005f78:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8005f7a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005f7e:	f103 0317 	add.w	r3, r3, #23
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d154      	bne.n	8006032 <f_open+0x43a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8005f88:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005f8c:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	; 0xfc8
 8005f90:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005f94:	f103 0308 	add.w	r3, r3, #8
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005fa0:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 8005fa2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005fa6:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8005faa:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005fae:	f102 020c 	add.w	r2, r2, #12
 8005fb2:	6811      	ldr	r1, [r2, #0]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7fd fc99 	bl	80038ec <move_window>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005fc0:	f102 0217 	add.w	r2, r2, #23
 8005fc4:	7013      	strb	r3, [r2, #0]
 8005fc6:	e034      	b.n	8006032 <f_open+0x43a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8005fc8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005fcc:	f103 0317 	add.w	r3, r3, #23
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d12d      	bne.n	8006032 <f_open+0x43a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8005fd6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005fda:	f103 0310 	add.w	r3, r3, #16
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	330b      	adds	r3, #11
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	f003 0310 	and.w	r3, r3, #16
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d009      	beq.n	8006000 <f_open+0x408>
					res = FR_NO_FILE;
 8005fec:	2304      	movs	r3, #4
 8005fee:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005ff2:	f102 0217 	add.w	r2, r2, #23
 8005ff6:	7013      	strb	r3, [r2, #0]
 8005ff8:	e01b      	b.n	8006032 <f_open+0x43a>
 8005ffa:	bf00      	nop
 8005ffc:	2000217c 	.word	0x2000217c
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8006000:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006004:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006008:	f003 0302 	and.w	r3, r3, #2
 800600c:	2b00      	cmp	r3, #0
 800600e:	d010      	beq.n	8006032 <f_open+0x43a>
 8006010:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006014:	f103 0310 	add.w	r3, r3, #16
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	330b      	adds	r3, #11
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	2b00      	cmp	r3, #0
 8006024:	d005      	beq.n	8006032 <f_open+0x43a>
						res = FR_DENIED;
 8006026:	2307      	movs	r3, #7
 8006028:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800602c:	f102 0217 	add.w	r2, r2, #23
 8006030:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8006032:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006036:	f103 0317 	add.w	r3, r3, #23
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d157      	bne.n	80060f0 <f_open+0x4f8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006040:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006044:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006048:	f003 0308 	and.w	r3, r3, #8
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00a      	beq.n	8006066 <f_open+0x46e>
				mode |= FA__WRITTEN;
 8006050:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006054:	461a      	mov	r2, r3
 8006056:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800605a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800605e:	f043 0320 	orr.w	r3, r3, #32
 8006062:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8006066:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800606a:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800606e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006074:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006078:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800607c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006080:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8006082:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006086:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800608a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800608e:	461a      	mov	r2, r3
 8006090:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006094:	f103 0310 	add.w	r3, r3, #16
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800609c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80060a0:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80060a4:	f023 0301 	bic.w	r3, r3, #1
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	bf14      	ite	ne
 80060ac:	2301      	movne	r3, #1
 80060ae:	2300      	moveq	r3, #0
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	461a      	mov	r2, r3
 80060b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80060b8:	3b18      	subs	r3, #24
 80060ba:	4611      	mov	r1, r2
 80060bc:	4618      	mov	r0, r3
 80060be:	f7fd fa99 	bl	80035f4 <inc_lock>
 80060c2:	4602      	mov	r2, r0
 80060c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80060c8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80060cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060d0:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 80060d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80060d6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80060da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d105      	bne.n	80060f0 <f_open+0x4f8>
 80060e4:	2302      	movs	r3, #2
 80060e6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80060ea:	f102 0217 	add.w	r2, r2, #23
 80060ee:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80060f0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80060f4:	f103 0317 	add.w	r3, r3, #23
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f040 8088 	bne.w	8006210 <f_open+0x618>
			fp->flag = mode;					/* File access mode */
 8006100:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006104:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800610c:	461a      	mov	r2, r3
 800610e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006112:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006116:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8006118:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800611c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006124:	2200      	movs	r2, #0
 8006126:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8006128:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800612c:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8006130:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006134:	f102 0210 	add.w	r2, r2, #16
 8006138:	6811      	ldr	r1, [r2, #0]
 800613a:	4618      	mov	r0, r3
 800613c:	f7fe fae9 	bl	8004712 <ld_clust>
 8006140:	4602      	mov	r2, r0
 8006142:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006146:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800614a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800614e:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8006150:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006154:	f103 0310 	add.w	r3, r3, #16
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	331f      	adds	r3, #31
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	061a      	lsls	r2, r3, #24
 8006160:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006164:	f103 0310 	add.w	r3, r3, #16
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	331e      	adds	r3, #30
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	041b      	lsls	r3, r3, #16
 8006170:	4313      	orrs	r3, r2
 8006172:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006176:	f102 0210 	add.w	r2, r2, #16
 800617a:	6812      	ldr	r2, [r2, #0]
 800617c:	321d      	adds	r2, #29
 800617e:	7812      	ldrb	r2, [r2, #0]
 8006180:	0212      	lsls	r2, r2, #8
 8006182:	4313      	orrs	r3, r2
 8006184:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006188:	f102 0210 	add.w	r2, r2, #16
 800618c:	6812      	ldr	r2, [r2, #0]
 800618e:	321c      	adds	r2, #28
 8006190:	7812      	ldrb	r2, [r2, #0]
 8006192:	4313      	orrs	r3, r2
 8006194:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006198:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800619c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80061a0:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 80061a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80061a6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80061aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061ae:	461a      	mov	r2, r3
 80061b0:	2300      	movs	r3, #0
 80061b2:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 80061b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80061b8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80061bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061c0:	461a      	mov	r2, r3
 80061c2:	2300      	movs	r3, #0
 80061c4:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80061c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80061ca:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80061ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061d2:	461a      	mov	r2, r3
 80061d4:	2300      	movs	r3, #0
 80061d6:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80061d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80061dc:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 80061e0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80061e4:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80061e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80061ec:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 80061ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80061f2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80061f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006200:	88da      	ldrh	r2, [r3, #6]
 8006202:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006206:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800620a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800620e:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8006210:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006214:	f103 0317 	add.w	r3, r3, #23
 8006218:	781b      	ldrb	r3, [r3, #0]
}
 800621a:	4618      	mov	r0, r3
 800621c:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8006220:	3718      	adds	r7, #24
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop

08006228 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b08a      	sub	sp, #40	; 0x28
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
 8006234:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2200      	movs	r2, #0
 800623e:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f7ff fc53 	bl	8005aec <validate>
 8006246:	4603      	mov	r3, r0
 8006248:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800624a:	7dfb      	ldrb	r3, [r7, #23]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d001      	beq.n	8006254 <f_write+0x2c>
 8006250:	7dfb      	ldrb	r3, [r7, #23]
 8006252:	e21e      	b.n	8006692 <f_write+0x46a>
	if (fp->err)							/* Check error */
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800625a:	79db      	ldrb	r3, [r3, #7]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d004      	beq.n	800626a <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006266:	79db      	ldrb	r3, [r3, #7]
 8006268:	e213      	b.n	8006692 <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006270:	799b      	ldrb	r3, [r3, #6]
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 800627a:	2307      	movs	r3, #7
 800627c:	e209      	b.n	8006692 <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006284:	689a      	ldr	r2, [r3, #8]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	441a      	add	r2, r3
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	429a      	cmp	r2, r3
 8006294:	f080 81d9 	bcs.w	800664a <f_write+0x422>
 8006298:	2300      	movs	r3, #0
 800629a:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800629c:	e1d5      	b.n	800664a <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80062ac:	6812      	ldr	r2, [r2, #0]
 80062ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80062b2:	8952      	ldrh	r2, [r2, #10]
 80062b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80062b8:	fb01 f202 	mul.w	r2, r1, r2
 80062bc:	1a9b      	subs	r3, r3, r2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f040 8169 	bne.w	8006596 <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80062d2:	6812      	ldr	r2, [r2, #0]
 80062d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80062d8:	8952      	ldrh	r2, [r2, #10]
 80062da:	fbb3 f3f2 	udiv	r3, r3, r2
 80062de:	b2da      	uxtb	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ec:	789b      	ldrb	r3, [r3, #2]
 80062ee:	3b01      	subs	r3, #1
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	4013      	ands	r3, r2
 80062f4:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 80062f6:	7dbb      	ldrb	r3, [r7, #22]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d15f      	bne.n	80063bc <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d111      	bne.n	800632c <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8006312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006314:	2b00      	cmp	r3, #0
 8006316:	d126      	bne.n	8006366 <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2100      	movs	r1, #0
 8006322:	4618      	mov	r0, r3
 8006324:	f7fd fea7 	bl	8004076 <create_chain>
 8006328:	6278      	str	r0, [r7, #36]	; 0x24
 800632a:	e01c      	b.n	8006366 <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006334:	2b00      	cmp	r3, #0
 8006336:	d009      	beq.n	800634c <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	4619      	mov	r1, r3
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f7fd ff3f 	bl	80041c6 <clmt_clust>
 8006348:	6278      	str	r0, [r7, #36]	; 0x24
 800634a:	e00c      	b.n	8006366 <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	4619      	mov	r1, r3
 800635e:	4610      	mov	r0, r2
 8006360:	f7fd fe89 	bl	8004076 <create_chain>
 8006364:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	2b00      	cmp	r3, #0
 800636a:	f000 8173 	beq.w	8006654 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800636e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006370:	2b01      	cmp	r3, #1
 8006372:	d106      	bne.n	8006382 <f_write+0x15a>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800637a:	2202      	movs	r2, #2
 800637c:	71da      	strb	r2, [r3, #7]
 800637e:	2302      	movs	r3, #2
 8006380:	e187      	b.n	8006692 <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006384:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006388:	d106      	bne.n	8006398 <f_write+0x170>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006390:	2201      	movs	r2, #1
 8006392:	71da      	strb	r2, [r3, #7]
 8006394:	2301      	movs	r3, #1
 8006396:	e17c      	b.n	8006692 <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800639e:	461a      	mov	r2, r3
 80063a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a2:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d105      	bne.n	80063bc <f_write+0x194>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063b6:	461a      	mov	r2, r3
 80063b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ba:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063c2:	799b      	ldrb	r3, [r3, #6]
 80063c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d023      	beq.n	8006414 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063d8:	7858      	ldrb	r0, [r3, #1]
 80063da:	68f9      	ldr	r1, [r7, #12]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063e2:	699a      	ldr	r2, [r3, #24]
 80063e4:	2301      	movs	r3, #1
 80063e6:	f7fc ffbb 	bl	8003360 <disk_write>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d006      	beq.n	80063fe <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063f6:	2201      	movs	r2, #1
 80063f8:	71da      	strb	r2, [r3, #7]
 80063fa:	2301      	movs	r3, #1
 80063fc:	e149      	b.n	8006692 <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006404:	799b      	ldrb	r3, [r3, #6]
 8006406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800640a:	b2da      	uxtb	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006412:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	4619      	mov	r1, r3
 8006426:	4610      	mov	r0, r2
 8006428:	f7fd fb51 	bl	8003ace <clust2sect>
 800642c:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d106      	bne.n	8006442 <f_write+0x21a>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800643a:	2202      	movs	r2, #2
 800643c:	71da      	strb	r2, [r3, #7]
 800643e:	2302      	movs	r3, #2
 8006440:	e127      	b.n	8006692 <f_write+0x46a>
			sect += csect;
 8006442:	7dbb      	ldrb	r3, [r7, #22]
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	4413      	add	r3, r2
 8006448:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006456:	895b      	ldrh	r3, [r3, #10]
 8006458:	461a      	mov	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006460:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d069      	beq.n	800653c <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006468:	7dba      	ldrb	r2, [r7, #22]
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	4413      	add	r3, r2
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006474:	6812      	ldr	r2, [r2, #0]
 8006476:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800647a:	7892      	ldrb	r2, [r2, #2]
 800647c:	4293      	cmp	r3, r2
 800647e:	d90a      	bls.n	8006496 <f_write+0x26e>
					cc = fp->fs->csize - csect;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800648c:	789b      	ldrb	r3, [r3, #2]
 800648e:	461a      	mov	r2, r3
 8006490:	7dbb      	ldrb	r3, [r7, #22]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064a2:	7858      	ldrb	r0, [r3, #1]
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	69b9      	ldr	r1, [r7, #24]
 80064aa:	f7fc ff59 	bl	8003360 <disk_write>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d006      	beq.n	80064c2 <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064ba:	2201      	movs	r2, #1
 80064bc:	71da      	strb	r2, [r3, #7]
 80064be:	2301      	movs	r3, #1
 80064c0:	e0e7      	b.n	8006692 <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064c8:	699a      	ldr	r2, [r3, #24]
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	69fa      	ldr	r2, [r7, #28]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d926      	bls.n	8006522 <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064dc:	699a      	ldr	r2, [r3, #24]
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80064e8:	6812      	ldr	r2, [r2, #0]
 80064ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80064ee:	8952      	ldrh	r2, [r2, #10]
 80064f0:	fb02 f303 	mul.w	r3, r2, r3
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	18d1      	adds	r1, r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006504:	895b      	ldrh	r3, [r3, #10]
 8006506:	461a      	mov	r2, r3
 8006508:	f7fc ff68 	bl	80033dc <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006512:	799b      	ldrb	r3, [r3, #6]
 8006514:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006518:	b2da      	uxtb	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006520:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800652e:	895b      	ldrh	r3, [r3, #10]
 8006530:	461a      	mov	r2, r3
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	fb02 f303 	mul.w	r3, r2, r3
 8006538:	623b      	str	r3, [r7, #32]
				continue;
 800653a:	e06e      	b.n	800661a <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	429a      	cmp	r2, r3
 8006548:	d01f      	beq.n	800658a <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006550:	689a      	ldr	r2, [r3, #8]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	429a      	cmp	r2, r3
 800655c:	d215      	bcs.n	800658a <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800656a:	7858      	ldrb	r0, [r3, #1]
 800656c:	68f9      	ldr	r1, [r7, #12]
 800656e:	2301      	movs	r3, #1
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	f7fc fed5 	bl	8003320 <disk_read>
 8006576:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8006578:	2b00      	cmp	r3, #0
 800657a:	d006      	beq.n	800658a <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006582:	2201      	movs	r2, #1
 8006584:	71da      	strb	r2, [r3, #7]
 8006586:	2301      	movs	r3, #1
 8006588:	e083      	b.n	8006692 <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006590:	461a      	mov	r2, r3
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065a2:	895b      	ldrh	r3, [r3, #10]
 80065a4:	4618      	mov	r0, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80065b4:	6812      	ldr	r2, [r2, #0]
 80065b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80065ba:	8952      	ldrh	r2, [r2, #10]
 80065bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80065c0:	fb01 f202 	mul.w	r2, r1, r2
 80065c4:	1a9b      	subs	r3, r3, r2
 80065c6:	1ac3      	subs	r3, r0, r3
 80065c8:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80065ca:	6a3a      	ldr	r2, [r7, #32]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d901      	bls.n	80065d6 <f_write+0x3ae>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80065e4:	6812      	ldr	r2, [r2, #0]
 80065e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80065ea:	8952      	ldrh	r2, [r2, #10]
 80065ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80065f0:	fb01 f202 	mul.w	r2, r1, r2
 80065f4:	1a9b      	subs	r3, r3, r2
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	4413      	add	r3, r2
 80065fa:	6a3a      	ldr	r2, [r7, #32]
 80065fc:	69b9      	ldr	r1, [r7, #24]
 80065fe:	4618      	mov	r0, r3
 8006600:	f7fc feec 	bl	80033dc <mem_cpy>
		fp->flag |= FA__DIRTY;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800660a:	799b      	ldrb	r3, [r3, #6]
 800660c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006610:	b2da      	uxtb	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006618:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800661a:	69ba      	ldr	r2, [r7, #24]
 800661c:	6a3b      	ldr	r3, [r7, #32]
 800661e:	4413      	add	r3, r2
 8006620:	61bb      	str	r3, [r7, #24]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006628:	689a      	ldr	r2, [r3, #8]
 800662a:	6a3b      	ldr	r3, [r7, #32]
 800662c:	4413      	add	r3, r2
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006634:	6093      	str	r3, [r2, #8]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	441a      	add	r2, r3
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	601a      	str	r2, [r3, #0]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b00      	cmp	r3, #0
 800664e:	f47f ae26 	bne.w	800629e <f_write+0x76>
 8006652:	e000      	b.n	8006656 <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006654:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800665c:	689a      	ldr	r2, [r3, #8]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	429a      	cmp	r2, r3
 8006668:	d907      	bls.n	800667a <f_write+0x452>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006678:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006680:	799b      	ldrb	r3, [r3, #6]
 8006682:	f043 0320 	orr.w	r3, r3, #32
 8006686:	b2da      	uxtb	r2, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800668e:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3728      	adds	r7, #40	; 0x28
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b086      	sub	sp, #24
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7ff fa22 	bl	8005aec <validate>
 80066a8:	4603      	mov	r3, r0
 80066aa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80066ac:	7dfb      	ldrb	r3, [r7, #23]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f040 80bc 	bne.w	800682c <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066ba:	799b      	ldrb	r3, [r3, #6]
 80066bc:	f003 0320 	and.w	r3, r3, #32
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f000 80b3 	beq.w	800682c <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066cc:	799b      	ldrb	r3, [r3, #6]
 80066ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d01e      	beq.n	8006714 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066e2:	7858      	ldrb	r0, [r3, #1]
 80066e4:	6879      	ldr	r1, [r7, #4]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066ec:	699a      	ldr	r2, [r3, #24]
 80066ee:	2301      	movs	r3, #1
 80066f0:	f7fc fe36 	bl	8003360 <disk_write>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d001      	beq.n	80066fe <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80066fa:	2301      	movs	r3, #1
 80066fc:	e097      	b.n	800682e <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006704:	799b      	ldrb	r3, [r3, #6]
 8006706:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800670a:	b2da      	uxtb	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006712:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006722:	69db      	ldr	r3, [r3, #28]
 8006724:	4619      	mov	r1, r3
 8006726:	4610      	mov	r0, r2
 8006728:	f7fd f8e0 	bl	80038ec <move_window>
 800672c:	4603      	mov	r3, r0
 800672e:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8006730:	7dfb      	ldrb	r3, [r7, #23]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d17a      	bne.n	800682c <f_sync+0x192>
				dir = fp->dir_ptr;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	330b      	adds	r3, #11
 8006744:	781a      	ldrb	r2, [r3, #0]
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	330b      	adds	r3, #11
 800674a:	f042 0220 	orr.w	r2, r2, #32
 800674e:	b2d2      	uxtb	r2, r2
 8006750:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006758:	68da      	ldr	r2, [r3, #12]
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	331c      	adds	r3, #28
 800675e:	b2d2      	uxtb	r2, r2
 8006760:	701a      	strb	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	b29b      	uxth	r3, r3
 800676c:	0a1b      	lsrs	r3, r3, #8
 800676e:	b29a      	uxth	r2, r3
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	331d      	adds	r3, #29
 8006774:	b2d2      	uxtb	r2, r2
 8006776:	701a      	strb	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	0c1a      	lsrs	r2, r3, #16
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	331e      	adds	r3, #30
 8006786:	b2d2      	uxtb	r2, r2
 8006788:	701a      	strb	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	0e1a      	lsrs	r2, r3, #24
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	331f      	adds	r3, #31
 8006798:	b2d2      	uxtb	r2, r2
 800679a:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	4619      	mov	r1, r3
 80067a6:	6938      	ldr	r0, [r7, #16]
 80067a8:	f7fd ffe1 	bl	800476e <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80067ac:	f7fc fd1c 	bl	80031e8 <get_fattime>
 80067b0:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	3316      	adds	r3, #22
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	b2d2      	uxtb	r2, r2
 80067ba:	701a      	strb	r2, [r3, #0]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	b29b      	uxth	r3, r3
 80067c0:	0a1b      	lsrs	r3, r3, #8
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	3317      	adds	r3, #23
 80067c8:	b2d2      	uxtb	r2, r2
 80067ca:	701a      	strb	r2, [r3, #0]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	0c1a      	lsrs	r2, r3, #16
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	3318      	adds	r3, #24
 80067d4:	b2d2      	uxtb	r2, r2
 80067d6:	701a      	strb	r2, [r3, #0]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	0e1a      	lsrs	r2, r3, #24
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	3319      	adds	r3, #25
 80067e0:	b2d2      	uxtb	r2, r2
 80067e2:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	3312      	adds	r3, #18
 80067e8:	2200      	movs	r2, #0
 80067ea:	701a      	strb	r2, [r3, #0]
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	3313      	adds	r3, #19
 80067f0:	2200      	movs	r2, #0
 80067f2:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067fa:	799b      	ldrb	r3, [r3, #6]
 80067fc:	f023 0320 	bic.w	r3, r3, #32
 8006800:	b2da      	uxtb	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006808:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006816:	2201      	movs	r2, #1
 8006818:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4618      	mov	r0, r3
 8006824:	f7fd f894 	bl	8003950 <sync_fs>
 8006828:	4603      	mov	r3, r0
 800682a:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800682c:	7dfb      	ldrb	r3, [r7, #23]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3718      	adds	r7, #24
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b084      	sub	sp, #16
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f7ff ff2b 	bl	800669a <f_sync>
 8006844:	4603      	mov	r3, r0
 8006846:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006848:	7bfb      	ldrb	r3, [r7, #15]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d119      	bne.n	8006882 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7ff f94c 	bl	8005aec <validate>
 8006854:	4603      	mov	r3, r0
 8006856:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006858:	7bfb      	ldrb	r3, [r7, #15]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d111      	bne.n	8006882 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006866:	4618      	mov	r0, r3
 8006868:	f7fc ff80 	bl	800376c <dec_lock>
 800686c:	4603      	mov	r3, r0
 800686e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006870:	7bfb      	ldrb	r3, [r7, #15]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d105      	bne.n	8006882 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800687c:	461a      	mov	r2, r3
 800687e:	2300      	movs	r3, #0
 8006880:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006882:	7bfb      	ldrb	r3, [r7, #15]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b08e      	sub	sp, #56	; 0x38
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8006898:	f107 030c 	add.w	r3, r7, #12
 800689c:	2200      	movs	r2, #0
 800689e:	4619      	mov	r1, r3
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f7fe fdf1 	bl	8005488 <find_volume>
 80068a6:	4603      	mov	r3, r0
 80068a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 80068b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	f040 80bc 	bne.w	8006a34 <f_getfree+0x1a8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068c2:	691a      	ldr	r2, [r3, #16]
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068ca:	695b      	ldr	r3, [r3, #20]
 80068cc:	3b02      	subs	r3, #2
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d806      	bhi.n	80068e0 <f_getfree+0x54>
			*nclst = fs->free_clust;
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068d8:	691a      	ldr	r2, [r3, #16]
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	601a      	str	r2, [r3, #0]
 80068de:	e0a9      	b.n	8006a34 <f_getfree+0x1a8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	76fb      	strb	r3, [r7, #27]
			n = 0;
 80068ea:	2300      	movs	r3, #0
 80068ec:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 80068ee:	7efb      	ldrb	r3, [r7, #27]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d126      	bne.n	8006942 <f_getfree+0xb6>
				clst = 2;
 80068f4:	2302      	movs	r3, #2
 80068f6:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 80068f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068fa:	69f8      	ldr	r0, [r7, #28]
 80068fc:	f7fd f90b 	bl	8003b16 <get_fat>
 8006900:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006908:	d103      	bne.n	8006912 <f_getfree+0x86>
 800690a:	2301      	movs	r3, #1
 800690c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006910:	e07c      	b.n	8006a0c <f_getfree+0x180>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d103      	bne.n	8006920 <f_getfree+0x94>
 8006918:	2302      	movs	r3, #2
 800691a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800691e:	e075      	b.n	8006a0c <f_getfree+0x180>
					if (stat == 0) n++;
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d102      	bne.n	800692c <f_getfree+0xa0>
 8006926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006928:	3301      	adds	r3, #1
 800692a:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 800692c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692e:	3301      	adds	r3, #1
 8006930:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800693c:	429a      	cmp	r2, r3
 800693e:	d3db      	bcc.n	80068f8 <f_getfree+0x6c>
 8006940:	e064      	b.n	8006a0c <f_getfree+0x180>
			} else {
				clst = fs->n_fatent;
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006952:	6a1b      	ldr	r3, [r3, #32]
 8006954:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 8006956:	2300      	movs	r3, #0
 8006958:	627b      	str	r3, [r7, #36]	; 0x24
 800695a:	2300      	movs	r3, #0
 800695c:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006960:	2b00      	cmp	r3, #0
 8006962:	d114      	bne.n	800698e <f_getfree+0x102>
						res = move_window(fs, sect++);
 8006964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006966:	1c5a      	adds	r2, r3, #1
 8006968:	62ba      	str	r2, [r7, #40]	; 0x28
 800696a:	4619      	mov	r1, r3
 800696c:	69f8      	ldr	r0, [r7, #28]
 800696e:	f7fc ffbd 	bl	80038ec <move_window>
 8006972:	4603      	mov	r3, r0
 8006974:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 8006978:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800697c:	2b00      	cmp	r3, #0
 800697e:	d144      	bne.n	8006a0a <f_getfree+0x17e>
						p = fs->win.d8;
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800698a:	895b      	ldrh	r3, [r3, #10]
 800698c:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 800698e:	7efb      	ldrb	r3, [r7, #27]
 8006990:	2b02      	cmp	r3, #2
 8006992:	d115      	bne.n	80069c0 <f_getfree+0x134>
						if (LD_WORD(p) == 0) n++;
 8006994:	6a3b      	ldr	r3, [r7, #32]
 8006996:	3301      	adds	r3, #1
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	021b      	lsls	r3, r3, #8
 800699c:	b21a      	sxth	r2, r3
 800699e:	6a3b      	ldr	r3, [r7, #32]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	b21b      	sxth	r3, r3
 80069a4:	4313      	orrs	r3, r2
 80069a6:	b21b      	sxth	r3, r3
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d102      	bne.n	80069b2 <f_getfree+0x126>
 80069ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ae:	3301      	adds	r3, #1
 80069b0:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 80069b2:	6a3b      	ldr	r3, [r7, #32]
 80069b4:	3302      	adds	r3, #2
 80069b6:	623b      	str	r3, [r7, #32]
 80069b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ba:	3b02      	subs	r3, #2
 80069bc:	627b      	str	r3, [r7, #36]	; 0x24
 80069be:	e01d      	b.n	80069fc <f_getfree+0x170>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 80069c0:	6a3b      	ldr	r3, [r7, #32]
 80069c2:	3303      	adds	r3, #3
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	061a      	lsls	r2, r3, #24
 80069c8:	6a3b      	ldr	r3, [r7, #32]
 80069ca:	3302      	adds	r3, #2
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	041b      	lsls	r3, r3, #16
 80069d0:	4313      	orrs	r3, r2
 80069d2:	6a3a      	ldr	r2, [r7, #32]
 80069d4:	3201      	adds	r2, #1
 80069d6:	7812      	ldrb	r2, [r2, #0]
 80069d8:	0212      	lsls	r2, r2, #8
 80069da:	4313      	orrs	r3, r2
 80069dc:	6a3a      	ldr	r2, [r7, #32]
 80069de:	7812      	ldrb	r2, [r2, #0]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d102      	bne.n	80069f0 <f_getfree+0x164>
 80069ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ec:	3301      	adds	r3, #1
 80069ee:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 80069f0:	6a3b      	ldr	r3, [r7, #32]
 80069f2:	3304      	adds	r3, #4
 80069f4:	623b      	str	r3, [r7, #32]
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	3b04      	subs	r3, #4
 80069fa:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 80069fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fe:	3b01      	subs	r3, #1
 8006a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1aa      	bne.n	800695e <f_getfree+0xd2>
 8006a08:	e000      	b.n	8006a0c <f_getfree+0x180>
						if (res != FR_OK) break;
 8006a0a:	bf00      	nop
			}
			fs->free_clust = n;
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a12:	461a      	mov	r2, r3
 8006a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a16:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a1e:	795b      	ldrb	r3, [r3, #5]
 8006a20:	f043 0301 	orr.w	r3, r3, #1
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a2c:	715a      	strb	r2, [r3, #5]
			*nclst = n;
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a32:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 8006a34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3738      	adds	r7, #56	; 0x38
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	460b      	mov	r3, r1
 8006a4a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8006a4c:	78fb      	ldrb	r3, [r7, #3]
 8006a4e:	2b0a      	cmp	r3, #10
 8006a50:	d103      	bne.n	8006a5a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8006a52:	210d      	movs	r1, #13
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7ff fff3 	bl	8006a40 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	db25      	blt.n	8006ab2 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	1c5a      	adds	r2, r3, #1
 8006a6a:	60fa      	str	r2, [r7, #12]
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	4413      	add	r3, r2
 8006a70:	78fa      	ldrb	r2, [r7, #3]
 8006a72:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2b3c      	cmp	r3, #60	; 0x3c
 8006a78:	dd12      	ble.n	8006aa0 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6818      	ldr	r0, [r3, #0]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f103 010c 	add.w	r1, r3, #12
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	f107 0308 	add.w	r3, r7, #8
 8006a8a:	f7ff fbcd 	bl	8006228 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d101      	bne.n	8006a9a <putc_bfd+0x5a>
 8006a96:	2300      	movs	r3, #0
 8006a98:	e001      	b.n	8006a9e <putc_bfd+0x5e>
 8006a9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a9e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	1c5a      	adds	r2, r3, #1
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	609a      	str	r2, [r3, #8]
 8006ab0:	e000      	b.n	8006ab4 <putc_bfd+0x74>
	if (i < 0) return;
 8006ab2:	bf00      	nop
}
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8006aba:	b590      	push	{r4, r7, lr}
 8006abc:	b097      	sub	sp, #92	; 0x5c
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
 8006ac2:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	613b      	str	r3, [r7, #16]
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8006ad0:	e009      	b.n	8006ae6 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	1c5a      	adds	r2, r3, #1
 8006ad6:	607a      	str	r2, [r7, #4]
 8006ad8:	781a      	ldrb	r2, [r3, #0]
 8006ada:	f107 030c 	add.w	r3, r7, #12
 8006ade:	4611      	mov	r1, r2
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f7ff ffad 	bl	8006a40 <putc_bfd>
	while (*str)			/* Put the string */
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1f1      	bne.n	8006ad2 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	db15      	blt.n	8006b20 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	461c      	mov	r4, r3
 8006afa:	f107 0208 	add.w	r2, r7, #8
 8006afe:	f107 030c 	add.w	r3, r7, #12
 8006b02:	f103 010c 	add.w	r1, r3, #12
 8006b06:	4613      	mov	r3, r2
 8006b08:	4622      	mov	r2, r4
 8006b0a:	f7ff fb8d 	bl	8006228 <f_write>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d105      	bne.n	8006b20 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d101      	bne.n	8006b20 <f_puts+0x66>
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	e001      	b.n	8006b24 <f_puts+0x6a>
	return EOF;
 8006b20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	375c      	adds	r7, #92	; 0x5c
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd90      	pop	{r4, r7, pc}

08006b2c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b087      	sub	sp, #28
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	4613      	mov	r3, r2
 8006b38:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8006b42:	4b1e      	ldr	r3, [pc, #120]	; (8006bbc <FATFS_LinkDriverEx+0x90>)
 8006b44:	7a5b      	ldrb	r3, [r3, #9]
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d831      	bhi.n	8006bb0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006b4c:	4b1b      	ldr	r3, [pc, #108]	; (8006bbc <FATFS_LinkDriverEx+0x90>)
 8006b4e:	7a5b      	ldrb	r3, [r3, #9]
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	461a      	mov	r2, r3
 8006b54:	4b19      	ldr	r3, [pc, #100]	; (8006bbc <FATFS_LinkDriverEx+0x90>)
 8006b56:	2100      	movs	r1, #0
 8006b58:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8006b5a:	4b18      	ldr	r3, [pc, #96]	; (8006bbc <FATFS_LinkDriverEx+0x90>)
 8006b5c:	7a5b      	ldrb	r3, [r3, #9]
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	4a16      	ldr	r2, [pc, #88]	; (8006bbc <FATFS_LinkDriverEx+0x90>)
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	4413      	add	r3, r2
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8006b6a:	4b14      	ldr	r3, [pc, #80]	; (8006bbc <FATFS_LinkDriverEx+0x90>)
 8006b6c:	7a5b      	ldrb	r3, [r3, #9]
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	461a      	mov	r2, r3
 8006b72:	4b12      	ldr	r3, [pc, #72]	; (8006bbc <FATFS_LinkDriverEx+0x90>)
 8006b74:	4413      	add	r3, r2
 8006b76:	79fa      	ldrb	r2, [r7, #7]
 8006b78:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006b7a:	4b10      	ldr	r3, [pc, #64]	; (8006bbc <FATFS_LinkDriverEx+0x90>)
 8006b7c:	7a5b      	ldrb	r3, [r3, #9]
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	1c5a      	adds	r2, r3, #1
 8006b82:	b2d1      	uxtb	r1, r2
 8006b84:	4a0d      	ldr	r2, [pc, #52]	; (8006bbc <FATFS_LinkDriverEx+0x90>)
 8006b86:	7251      	strb	r1, [r2, #9]
 8006b88:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006b8a:	7dbb      	ldrb	r3, [r7, #22]
 8006b8c:	3330      	adds	r3, #48	; 0x30
 8006b8e:	b2da      	uxtb	r2, r3
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	3301      	adds	r3, #1
 8006b98:	223a      	movs	r2, #58	; 0x3a
 8006b9a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	3302      	adds	r3, #2
 8006ba0:	222f      	movs	r2, #47	; 0x2f
 8006ba2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	3303      	adds	r3, #3
 8006ba8:	2200      	movs	r2, #0
 8006baa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006bac:	2300      	movs	r3, #0
 8006bae:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8006bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	371c      	adds	r7, #28
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bc80      	pop	{r7}
 8006bba:	4770      	bx	lr
 8006bbc:	2000237c 	.word	0x2000237c

08006bc0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006bca:	2200      	movs	r2, #0
 8006bcc:	6839      	ldr	r1, [r7, #0]
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f7ff ffac 	bl	8006b2c <FATFS_LinkDriverEx>
 8006bd4:	4603      	mov	r3, r0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3708      	adds	r7, #8
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
	...

08006be0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	4603      	mov	r3, r0
 8006be8:	6039      	str	r1, [r7, #0]
 8006bea:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8006bec:	88fb      	ldrh	r3, [r7, #6]
 8006bee:	2b7f      	cmp	r3, #127	; 0x7f
 8006bf0:	d802      	bhi.n	8006bf8 <ff_convert+0x18>
		c = chr;
 8006bf2:	88fb      	ldrh	r3, [r7, #6]
 8006bf4:	81fb      	strh	r3, [r7, #14]
 8006bf6:	e025      	b.n	8006c44 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00b      	beq.n	8006c16 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8006bfe:	88fb      	ldrh	r3, [r7, #6]
 8006c00:	2bff      	cmp	r3, #255	; 0xff
 8006c02:	d805      	bhi.n	8006c10 <ff_convert+0x30>
 8006c04:	88fb      	ldrh	r3, [r7, #6]
 8006c06:	3b80      	subs	r3, #128	; 0x80
 8006c08:	4a11      	ldr	r2, [pc, #68]	; (8006c50 <ff_convert+0x70>)
 8006c0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c0e:	e000      	b.n	8006c12 <ff_convert+0x32>
 8006c10:	2300      	movs	r3, #0
 8006c12:	81fb      	strh	r3, [r7, #14]
 8006c14:	e016      	b.n	8006c44 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8006c16:	2300      	movs	r3, #0
 8006c18:	81fb      	strh	r3, [r7, #14]
 8006c1a:	e009      	b.n	8006c30 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8006c1c:	89fb      	ldrh	r3, [r7, #14]
 8006c1e:	4a0c      	ldr	r2, [pc, #48]	; (8006c50 <ff_convert+0x70>)
 8006c20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c24:	88fa      	ldrh	r2, [r7, #6]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d006      	beq.n	8006c38 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8006c2a:	89fb      	ldrh	r3, [r7, #14]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	81fb      	strh	r3, [r7, #14]
 8006c30:	89fb      	ldrh	r3, [r7, #14]
 8006c32:	2b7f      	cmp	r3, #127	; 0x7f
 8006c34:	d9f2      	bls.n	8006c1c <ff_convert+0x3c>
 8006c36:	e000      	b.n	8006c3a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8006c38:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8006c3a:	89fb      	ldrh	r3, [r7, #14]
 8006c3c:	3380      	adds	r3, #128	; 0x80
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8006c44:	89fb      	ldrh	r3, [r7, #14]
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3714      	adds	r7, #20
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bc80      	pop	{r7}
 8006c4e:	4770      	bx	lr
 8006c50:	08006ef4 	.word	0x08006ef4

08006c54 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	60fb      	str	r3, [r7, #12]
 8006c62:	e002      	b.n	8006c6a <ff_wtoupper+0x16>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	3301      	adds	r3, #1
 8006c68:	60fb      	str	r3, [r7, #12]
 8006c6a:	4a0f      	ldr	r2, [pc, #60]	; (8006ca8 <ff_wtoupper+0x54>)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d006      	beq.n	8006c84 <ff_wtoupper+0x30>
 8006c76:	4a0c      	ldr	r2, [pc, #48]	; (8006ca8 <ff_wtoupper+0x54>)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c7e:	88fa      	ldrh	r2, [r7, #6]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d1ef      	bne.n	8006c64 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8006c84:	4a08      	ldr	r2, [pc, #32]	; (8006ca8 <ff_wtoupper+0x54>)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d004      	beq.n	8006c9a <ff_wtoupper+0x46>
 8006c90:	4a06      	ldr	r2, [pc, #24]	; (8006cac <ff_wtoupper+0x58>)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c98:	e000      	b.n	8006c9c <ff_wtoupper+0x48>
 8006c9a:	88fb      	ldrh	r3, [r7, #6]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3714      	adds	r7, #20
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bc80      	pop	{r7}
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	08006ff4 	.word	0x08006ff4
 8006cac:	080071d4 	.word	0x080071d4

08006cb0 <__libc_init_array>:
 8006cb0:	b570      	push	{r4, r5, r6, lr}
 8006cb2:	2600      	movs	r6, #0
 8006cb4:	4d0c      	ldr	r5, [pc, #48]	; (8006ce8 <__libc_init_array+0x38>)
 8006cb6:	4c0d      	ldr	r4, [pc, #52]	; (8006cec <__libc_init_array+0x3c>)
 8006cb8:	1b64      	subs	r4, r4, r5
 8006cba:	10a4      	asrs	r4, r4, #2
 8006cbc:	42a6      	cmp	r6, r4
 8006cbe:	d109      	bne.n	8006cd4 <__libc_init_array+0x24>
 8006cc0:	f000 f822 	bl	8006d08 <_init>
 8006cc4:	2600      	movs	r6, #0
 8006cc6:	4d0a      	ldr	r5, [pc, #40]	; (8006cf0 <__libc_init_array+0x40>)
 8006cc8:	4c0a      	ldr	r4, [pc, #40]	; (8006cf4 <__libc_init_array+0x44>)
 8006cca:	1b64      	subs	r4, r4, r5
 8006ccc:	10a4      	asrs	r4, r4, #2
 8006cce:	42a6      	cmp	r6, r4
 8006cd0:	d105      	bne.n	8006cde <__libc_init_array+0x2e>
 8006cd2:	bd70      	pop	{r4, r5, r6, pc}
 8006cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cd8:	4798      	blx	r3
 8006cda:	3601      	adds	r6, #1
 8006cdc:	e7ee      	b.n	8006cbc <__libc_init_array+0xc>
 8006cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ce2:	4798      	blx	r3
 8006ce4:	3601      	adds	r6, #1
 8006ce6:	e7f2      	b.n	8006cce <__libc_init_array+0x1e>
 8006ce8:	080073b4 	.word	0x080073b4
 8006cec:	080073b4 	.word	0x080073b4
 8006cf0:	080073b4 	.word	0x080073b4
 8006cf4:	080073b8 	.word	0x080073b8

08006cf8 <memset>:
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	4402      	add	r2, r0
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d100      	bne.n	8006d02 <memset+0xa>
 8006d00:	4770      	bx	lr
 8006d02:	f803 1b01 	strb.w	r1, [r3], #1
 8006d06:	e7f9      	b.n	8006cfc <memset+0x4>

08006d08 <_init>:
 8006d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0a:	bf00      	nop
 8006d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d0e:	bc08      	pop	{r3}
 8006d10:	469e      	mov	lr, r3
 8006d12:	4770      	bx	lr

08006d14 <_fini>:
 8006d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d16:	bf00      	nop
 8006d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d1a:	bc08      	pop	{r3}
 8006d1c:	469e      	mov	lr, r3
 8006d1e:	4770      	bx	lr
